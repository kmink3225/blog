{
  "hash": "cedff842d8736ee41cd81200fb8167fc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Hugging Face: PLM 생태계의 중심\"\nsubtitle: \"실무에서 바로 사용할 수 있는 사전 학습 모델의 허브\"\ndescription: |\n  Hugging Face는 현재 NLP 분야에서 가장 중요한 라이브러리이자 플랫폼이다. 수만 개의 사전 학습 모델을 제공하며, 몇 줄의 코드만으로 최신 PLM을 활용할 수 있게 해준다. 토크나이저부터 파인튜닝, 배포까지 전체 ML 워크플로우를 지원하는 Hugging Face의 핵심 기능들과 실무 활용 전략을 상세히 분석한다.\ncategories:\n  - NLP\n  - Deep Learning\nauthor: Kwangmin Kim\ndate: 2025-01-27\nformat: \n  html:\n    page-layout: full\n    code-fold: true\n    toc: true\n    number-sections: true\ndraft: False\nexecute:\n  eval: false\n---\n\n한국어 혐오 발언 다중 레이블 분류 : K-MHaS (Korean Multi-label Hate Speech Dataset)\n\n# KorNLI 분류\n\n데이터 셋: https://github.com/adlnlp/K-MHaS\n\n# 데이터셋 로드 및 구조 확인\n\n::: {#67240479 .cell execution_count=1}\n``` {.python .cell-code}\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"jeanlee/kmhas_korean_hate_speech\")\ndataset\n```\n:::\n\n\n만약 테스트 데이터만 별도로 로드하고 싶다면 load_dataset()으로 데이터를 불러올 당시에 split=\"test\"의 인자를 추가적으로 사용하면 됩니다.\n\n::: {#000006f6 .cell execution_count=2}\n``` {.python .cell-code}\ndataset = load_dataset(\"jeanlee/kmhas_korean_hate_speech\", split=\"test\")\ndataset\ndataset.features\nprint('테스트 데이터 셋의 크기 :', len(dataset['text']))\nprint('첫번째 샘플 출력 :', dataset['text'][0])\nprint('첫번째 샘플의 레이블 출력 :', dataset['label'][0])\n```\n:::\n\n\n데이터셋의 깃허브로부터 확인할 수 있는 각 레이블이 의미하는 바는 다음과 같습니다. 레이블은 0부터 8까지 총 9개의 레이블이 존재합니다.\n\n```         \nclass_label:\n  names:\n    0: origin (출신차별)\n    1: physical (외모차별)\n    2: politics (정치성향차별)\n    3: profanity (혐오욕설)\n    4: age (연령차별)\n    5: gender (성차별)\n    6: race (인종차별)\n    7: religion (종교차별)\n    8: not_hate_speech (혐오아님)\n```\n\n::: {#ade045f2 .cell execution_count=3}\n``` {.python .cell-code}\nprint('두번째 샘플 출력 :', dataset['text'][1])\nprint('두번째 샘플의 레이블 출력 :', dataset['label'][1])\n```\n:::\n\n\n# 전처리\n\n::: {#cbdae1b2 .cell execution_count=4}\n``` {.python .cell-code}\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"jeanlee/kmhas_korean_hate_speech\")\n\nimport pandas as pd\nimport numpy as np\nimport random\nimport time\nimport datetime\nfrom tqdm import tqdm\n\nimport csv\nimport os\n\nimport tensorflow as tf\nimport torch\n\n# BERT 사용을 위함\nfrom transformers import BertTokenizer\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig\nfrom transformers import get_linear_schedule_with_warmup\nfrom torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n# for padding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences \n\n# 전처리 및 평가 지표\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.metrics import f1_score, roc_auc_score, accuracy_score, hamming_loss\n\n# 훈련 데이터, 검증 데이터, 테스트 데이터를 로드합니다.\n\ntrain = load_dataset(\"jeanlee/kmhas_korean_hate_speech\", split=\"train\")\nvalidation = load_dataset(\"jeanlee/kmhas_korean_hate_speech\", split=\"validation\")\ntest = load_dataset(\"jeanlee/kmhas_korean_hate_speech\", split=\"test\")\n```\n:::\n\n\n훈련 데이터, 검증 데이터, 테스트 데이터에 대해서 \\[CLS\\] 문장 \\[SEP\\] 구조를 만듭니다. \\[CLS\\]는 분류를 하기 위해 BERT가 사용하는 첫번째 입력 토큰이며, \\[SEP\\]는 입력 문장의 종료를 나타내기 위해 사용하는 스페셜 토큰입니다.\n\n::: {#f30b0583 .cell execution_count=5}\n``` {.python .cell-code}\n# 훈련 데이터, 검증 데이터, 테스트 데이터에 대해서 `[CLS] 문장 [SEP]` 구조를 만듭니다.\n\ntrain_sentences = list(map(lambda x: '[CLS] ' + str(x) + ' [SEP]', train['text']))\nvalidation_sentences = list(map(lambda x: '[CLS] ' + str(x) + ' [SEP]', validation['text']))\ntest_sentences = list(map(lambda x: '[CLS] ' + str(x) + ' [SEP]', test['text']))\n```\n:::\n\n\n다중 레이블의 경우에는 모든 카테고리 문제에 대해서 이진 분류 문제를 푸는 것과 같습니다. 현재 이 문제의 경우 총 9개의 카테고리가 존재하므로 모델은 다음과 같이 모든 샘플에 대해서 아래의 질문을 모두 수행합니다.\n\nEx) 이 텍스트가 0번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 1번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 2번 레이블에 해당하는가? yes or no =\\> yes. 이 텍스트가 3번 레이블에 해당하는가? yes or no =\\> yes. 이 텍스트가 4번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 5번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 6번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 7번 레이블에 해당하는가? yes or no =\\> no. 이 텍스트가 8번 레이블에 해당하는가? yes or no =\\> no.\n\n예측 : \\[2, 3\\]\n\n::: {#f85340b5 .cell execution_count=6}\n``` {.python .cell-code}\n# 정답인 레이블의 위치에는 1, 나머지 위치에는 0을 기록합니다.\n# 레이블 전처리 예시)\n# [8]    -> [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0] : 의미적으로는 [no, no, no, no, no, no, no, no, no, yes]\n# [2, 3] -> [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0] : 의미적으로는 [no, no, yes, yes, no, no, no, no, no, no]\n\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nenc = MultiLabelBinarizer()\n\ndef multi_label(example):\n    enc_label = enc.fit_transform(example['label'])\n    float_arr = np.vstack(enc_label[:]).astype(float)\n    update_label = float_arr.tolist()\n    return update_label\n\ntrain_labels = multi_label(train)\nvalidation_labels = multi_label(validation)\ntest_labels = multi_label(test)\ntest_sentences[:5]\n# 각 레이블은 기존에 [8], [2, 3], [2], [0], [8] 이었으며 전처리 후 아래와 같이 변경됨.\ntest_labels[:5]\n```\n:::\n\n\n# BERT 토크나이저를 이용한 전처리\n\nBERT를 사용하기 위해서는 토크나이저와 모델이 반드시 맵핑 관계여야만 합니다. 다시 말해 아래의 이름에 들어가는 모델이름은 반드시 동일해야 합니다.\n\n-   `BertTokenizer.from_pretrained('모델이름')`\n-   `BertForSequenceClassification.from_pretrained(\"모델이름\")`\n\n토크나이저는 내부적으로 Vocabulary를 갖고 있어 정수 인코딩을 수행해주는 모듈입니다.\n\n::: {#3c87152e .cell execution_count=7}\n``` {.python .cell-code}\n# 한국어 BERT 중 하나인 'klue/bert-base'를 사용.\ntokenizer = BertTokenizer.from_pretrained('klue/bert-base')\ntokenized_text = tokenizer.tokenize('안녕하세요. 자연어 처리를 배울거에요.')\ninput_id = tokenizer.convert_tokens_to_ids(tokenized_text)\n\nprint('토큰화 된 문장 :', tokenized_text)\nprint('정수 인코딩 된 문장 :', input_id)\n\nMAX_LEN = 128\n\ndef data_to_tensor (sentences, labels):\n  # 정수 인코딩 과정. 각 텍스트를 토큰화한 후에 Vocabulary에 맵핑되는 정수 시퀀스로 변환한다.\n  # ex) ['안녕하세요'] ==> ['안', '녕', '하세요'] ==> [231, 52, 45]\n  tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n  input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n\n  # pad_sequences는 패딩을 위한 모듈. 주어진 최대 길이를 위해서 뒤에서 0으로 채워준다.\n  # ex) [231, 52, 45] ==> [231, 52, 45, 0, 0, 0]\n  input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\") \n\n  attention_masks = []\n\n  for seq in input_ids:\n      seq_mask = [float(i > 0) for i in seq]\n      attention_masks.append(seq_mask)\n\n  tensor_inputs = torch.tensor(input_ids)\n  tensor_labels = torch.tensor(labels)\n  tensor_masks = torch.tensor(attention_masks)\n\n  return tensor_inputs, tensor_labels, tensor_masks\n\n# 훈련 데이터, 검증 데이터, 텍스트 데이터에 대해서 data_to_tensor 함수를 통해서 정수 인코딩 된 데이터, 레이블, 어텐션 마스크를 얻습니다.\ntrain_inputs, train_labels, train_masks = data_to_tensor(train_sentences, train_labels)\nvalidation_inputs, validation_labels, validation_masks = data_to_tensor(validation_sentences, validation_labels)\ntest_inputs, test_labels, test_masks = data_to_tensor(test_sentences, test_labels)\n\n```\n:::\n\n\n배치 크기는 32로 하고 파이토치의 데이터로더(배치 단위로 데이터를 꺼내올 수 있도록 하는 모듈)로 변환합니다.\n\n::: {#0be3dbea .cell execution_count=8}\n``` {.python .cell-code}\nbatch_size = 32\n\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\nvalidation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\nvalidation_sampler = SequentialSampler(validation_data)\nvalidation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)\n\ntest_data = TensorDataset(test_inputs, test_masks, test_labels)\ntest_sampler = RandomSampler(test_data)\ntest_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=batch_size)\n\nprint('훈련 데이터의 크기:', len(train_labels))\nprint('검증 데이터의 크기:', len(validation_labels))\nprint('테스트 데이터의 크기:', len(test_labels))\n```\n:::\n\n\n# GPU가 정상 셋팅되었는지 확인.\n\nColab에서 GPU를 사용하기 위해서는 아래와 같이 설정이 되어있어야만 합니다.\n\n런타임 \\> 런타임 유형 변경 \\> 하드웨어 가속기 \\> 'GPU' 선택\n\n::: {#c88e4ab6 .cell execution_count=9}\n``` {.python .cell-code}\nif torch.cuda.is_available():    \n    device = torch.device(\"cuda\")\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\nelse:\n    device = torch.device(\"cpu\")\n    print('No GPU available, using the CPU instead.')\n```\n:::\n\n\n# 모델로드\n\nBERT를 사용하여 텍스트를 분류하는 BERT 아키텍처는 BertForSequenceClassification.from_pretrained(\"모델이름\")을 넣어서 가능합니다.\n\n이때 인자값으로 \"problem_type\"에 \"multi_label_classification\" 값으로 넣으면 다중 레이블 분류 형태로 모델을 로드합니다.\n\n::: {#8dab083a .cell execution_count=10}\n``` {.python .cell-code}\nnum_labels = 9\n\nmodel = BertForSequenceClassification.from_pretrained(\"klue/bert-base\", num_labels=num_labels, problem_type=\"multi_label_classification\")\nmodel.cuda()\n\n# 옵티마이저 선택\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5,\n                  eps = 1e-8\n                )\n# 몇 번의 에포크(전체 데이터에 대한 학습 횟수)를 할 것인지 선택\nepochs = 4\ntotal_steps = len(train_dataloader) * epochs\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0,\n                                            num_training_steps = total_steps)\n\ndef format_time(elapsed):\n    elapsed_rounded = int(round((elapsed)))\n    return str(datetime.timedelta(seconds=elapsed_rounded))  # hh:mm:ss\n\ndef multi_label_metrics(predictions, labels, threshold=0.5):\n    \n    # 모델의 예측에 대해서 시그모이드 함수값을 통과시킨다. (batch_size, num_labels)\n    sigmoid = torch.nn.Sigmoid()\n    probs = sigmoid(torch.Tensor(predictions))\n\n    # 만약 threshold 값을 넘는 경우에는 1로 예측했다고 간주한다.\n    # threshold 값은 일반적으로 로지스틱 회귀 방식에 의하여 0.5를 선택하는 것이 일반적이다.\n    y_pred = np.zeros(probs.shape)\n    y_pred[np.where(probs >= threshold)] = 1\n\n    y_true = labels\n\n    # 사용 가능한 메트릭들을 사용한다.\n    accuracy = accuracy_score(y_true, y_pred)\n    f1_macro_average = f1_score(y_true=y_true, y_pred=y_pred, average='macro', zero_division=0)\n    f1_micro_average = f1_score(y_true=y_true, y_pred=y_pred, average='micro', zero_division=0)\n    f1_weighted_average = f1_score(y_true=y_true, y_pred=y_pred, average='weighted', zero_division=0)\n    roc_auc = roc_auc_score(y_true, y_pred, average = 'micro')\n\n    # 메트릭 결과에 대해서 리턴\n    metrics = {'accuracy': accuracy,\n               'f1_macro': f1_macro_average,\n               'f1_micro': f1_micro_average,\n               'f1_weighted': f1_weighted_average,\n               'roc_auc': roc_auc}\n\n    return metrics\n```\n:::\n\n\n# 모델 학습\n\n::: {#78646840 .cell execution_count=11}\n``` {.python .cell-code}\n# 랜덤 시드값.\nseed_val = 777\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\nmodel.zero_grad()\nfor epoch_i in range(0, epochs):\n    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n    t0 = time.time()\n    total_loss = 0\n\n    model.train()\n\n    for step, batch in tqdm(enumerate(train_dataloader)):\n        if step % 500 == 0 and not step == 0:\n            elapsed = format_time(time.time() - t0)\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        batch = tuple(t.to(device) for t in batch)\n        b_input_ids, b_input_mask, b_labels = batch\n\n        outputs = model(b_input_ids, \n                        token_type_ids=None, \n                        attention_mask=b_input_mask, \n                        labels=b_labels)\n        \n        loss = outputs[0]\n        total_loss += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)  # gradient clipping if it is over a threshold\n        optimizer.step()\n        scheduler.step()\n\n        model.zero_grad()\n\n    avg_train_loss = total_loss / len(train_dataloader)            \n\n    print(\"\")\n    print(\"  Average training loss: {0:.4f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(format_time(time.time() - t0)))\n```\n:::\n\n\n# 검증 데이터에 대한 평가\n\n::: {#31b6bff6 .cell execution_count=12}\n``` {.python .cell-code}\nt0 = time.time()\nmodel.eval()\naccum_logits, accum_label_ids = [], []\n\nfor batch in validation_dataloader:\n    batch = tuple(t.to(device) for t in batch)\n    b_input_ids, b_input_mask, b_labels = batch\n\n    with torch.no_grad():\n        outputs = model(b_input_ids, \n                        token_type_ids=None, \n                        attention_mask=b_input_mask)\n\n    logits = outputs[0]\n    logits = logits.detach().cpu().numpy()\n    label_ids = b_labels.to('cpu').numpy()\n\n    for b in logits:\n        accum_logits.append(list(b))\n\n    for b in label_ids:\n        accum_label_ids.append(list(b))\n\naccum_logits = np.array(accum_logits)\naccum_label_ids = np.array(accum_label_ids)\nresults = multi_label_metrics(accum_logits, accum_label_ids)\n\nprint(\"Accuracy: {0:.4f}\".format(results['accuracy']))\nprint(\"F1 (Macro) Score: {0:.4f}\".format(results['f1_macro']))\nprint(\"F1 (Micro) Score: {0:.4f}\".format(results['f1_micro']))\nprint(\"F1 (Weighted) Score: {0:.4f}\".format(results['f1_weighted']))\nprint(\"ROC-AUC: {0:.4f}\".format(results['roc_auc']))\n```\n:::\n\n\n# 모델 저장과 로드\n\n::: {#abc4b5cd .cell execution_count=13}\n``` {.python .cell-code}\n%pwd\n\n# 폴더 생성\n%mkdir model\n\npath = '/content/model/'\n\n# 모델 저장\ntorch.save(model.state_dict(), path+\"BERT_kornli.pt\")\n\n# 모델 로드\nmodel.load_state_dict(torch.load(path+\"BERT_kornli.pt\"))\n```\n:::\n\n\n# 테스트 데이터에 대한 평가\n\n::: {#5b7b4c08 .cell execution_count=14}\n``` {.python .cell-code}\nt0 = time.time()\nmodel.eval()\naccum_logits, accum_label_ids = [], []\n\nfor step, batch in tqdm(enumerate(test_dataloader)):\n    if step % 100 == 0 and not step == 0:\n        elapsed = format_time(time.time() - t0)\n        print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(test_dataloader), elapsed))\n\n    batch = tuple(t.to(device) for t in batch)\n    b_input_ids, b_input_mask, b_labels = batch\n\n    with torch.no_grad():\n        outputs = model(b_input_ids, \n                        token_type_ids=None, \n                        attention_mask=b_input_mask)\n\n    logits = outputs[0]\n    logits = logits.detach().cpu().numpy()\n    label_ids = b_labels.to('cpu').numpy()\n    \n    for b in logits:\n        accum_logits.append(list(b))\n\n    for b in label_ids:\n        accum_label_ids.append(list(b))\n\naccum_logits = np.array(accum_logits)\naccum_label_ids = np.array(accum_label_ids)\nresults = multi_label_metrics(accum_logits, accum_label_ids)\n\nprint(\"Accuracy: {0:.4f}\".format(results['accuracy']))\nprint(\"F1 (Macro) Score: {0:.4f}\".format(results['f1_macro']))\nprint(\"F1 (Micro) Score: {0:.4f}\".format(results['f1_micro']))\nprint(\"F1 (Weighted) Score: {0:.4f}\".format(results['f1_weighted']))\nprint(\"ROC-AUC: {0:.4f}\".format(results['roc_auc']))\n```\n:::\n\n\n# 예측\n\n::: {#da2caeed .cell execution_count=15}\n``` {.python .cell-code}\nfrom transformers import pipeline\npipe = pipeline(\"text-classification\", model=model.cuda(), tokenizer=tokenizer, device=0, max_length=512,\n                return_all_scores=True, function_to_apply='sigmoid')\n\nresult = pipe('틀니들은 왜 그렇게 민폐를 끼치냐?')\nprint(result)\n\ndef prediction(text):\n  result = pipe(text)\n  return [label_dict[res['label']] for res in result[0] if res['score'] > 0.5]\n```\n:::\n\n\n",
    "supporting": [
      "30.plm_sentimental_files"
    ],
    "filters": [],
    "includes": {}
  }
}