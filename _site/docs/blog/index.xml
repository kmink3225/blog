<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kwangmin Kim</title>
<link>kmink3225.netlify.app/docs/blog/</link>
<atom:link href="kmink3225.netlify.app/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>blog</description>
<generator>quarto-1.4.543</generator>
<lastBuildDate>Tue, 31 Dec 2999 15:00:00 GMT</lastBuildDate>
<item>
  <title>Blog Content List</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/content_list.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Scalars are denoted with a lower-case letter (ex a ) or a non-bolded lower-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Calpha"> ).</li>
<li>Vectors are denoted using a bold-faced lower-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20a">).</li>
<li>Matrices are denoted using a bold-faced upper-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5Cphi">) or a bold-faced upper-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5CPhi">).</li>
<li>Tensors are denoted using a bold-faced upper-case letter with multiple subscripts or superscripts, indicating the number of indices and the dimensions of the tensor along each axis.
<ul>
<li>A second-order tensor (also known as a matrix) <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bij%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m"> and <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are the indices that run over the rows and columns of the matrix, respectively.</li>
<li>A third-order tensor <img src="https://latex.codecogs.com/png.latex?T"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m%20%5Ctimes%20p"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bijk%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m">, <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are <img src="https://latex.codecogs.com/png.latex?i">, and <img src="https://latex.codecogs.com/png.latex?k%20=%201,%5Cdots,p"> <img src="https://latex.codecogs.com/png.latex?j">, and <img src="https://latex.codecogs.com/png.latex?k">, which are the indices that run over the three dimensions of the tensor.</li>
</ul></li>
</ul>
</div>
</div>
<section id="contents" class="level1">
<h1>Contents</h1>
<ul>
<li><a href="../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering</a></li>
<li><a href="../../../docs/blog/posts/Surveilance/guide_map/index.html">Surveilance</a></li>
</ul>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<ul>
<li>Statistics
<ul>
<li>George Casella &amp; Rogeer L. Berger - Statistcal Inference, 2nd Edition</li>
<li>Dobson and Barnett (2008) An Introduction to Generalized Linear Model. 3rd Ed. Chapman &amp; Hall.</li>
<li>Fitzmaurice, Laird and Ware (2011) Applied Longitudinal Analysis. 2nd Ed. Wiley.</li>
<li>Hosmer, Lemeshow and May (2008) Applied Survival Analysis. 2nd Ed. Wiley.</li>
<li>슬기로운 통계생활 - https://www.youtube.com/<span class="citation" data-cites="statisticsplaybook">@statisticsplaybook</span></li>
<li>슬기로운 통계생활 - https://github.com/statisticsplaybook</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Mathematics
<ul>
<li>James Stewart - Calculus Early Transcedentals, 7th Eidition &amp; any James Stewart series</li>
<li>GILBERT STRANG - Introduction to Linear Algebra, 4th Edition.</li>
<li>임장환 - 머신러닝, 인공지능, 컴퓨터 비전 전공자를 위한 최적화 이론</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li><a href="https://www.youtube.com/playlist?list=PLaqQvlCBe8vIkIEb4GX2ZZ1A4tFYeXR5W">8일간의 선형대수학 기초(이상준 경희대 교수)</a></li>
<li><a href="https://ocw.mit.edu/courses/18-06-linear-algebra-spring-2010/">Linear Algebra(Prof.&nbsp;Gilbert Strang, MIT Open Courseware)</a></li>
<li><a href="https://github.com/fastai/numerical-linear-algebra/blob/master/README.md">Computational Linear Algebra for Coders</a></li>
<li><a href="http://immersivemath.com/ila/">Immersive linear Algebra</a></li>
<li><a href="https://www.3blue1brown.com/topics/linear-algebra">3blue1brown</a></li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Machine Learning
<ul>
<li>Gareth M. James, Daniela Witten, Trevor Hastie, Robert Tibshirani - An Introduction to Statistical Learning: With Applications in R 2nd Edition</li>
<li>Trevor Hastie, Robert Tibshirani, Jerome H. Friedman - The Elements of Statistical Learning 2nd Edition</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Deep Learning
<ul>
<li>Saito Koki - Deep Learning from Scratch 1,2,3 (밑바닥부터 시작하는 딥러닝 1,2,3)</li>
<li>조준우 - 머신러닝·딥러닝에 필요한 기초 수학 with 파이썬</li>
<li>조준우 - https://github.com/metamath1/noviceml</li>
<li>동빈나 - https://www.youtube.com/c/dongbinna</li>
<li>혁펜하임 - https://www.youtube.com/channel/UCcbPAIfCa4q0x7x8yFXmBag</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Engineering
<ul>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>All List</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/content_list.html</guid>
  <pubDate>Tue, 31 Dec 2999 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Engineering</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/</link>
  <description><![CDATA[ 




<section id="it-terminology" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="it-terminology"><span class="header-section-number">1</span> IT Terminology</h2>
<ul>
<li>0000-00-00, Terminology</li>
</ul>
</section>
<section id="data-structure" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">2</span> Data Structure</h2>
<ul>
<li>2023-01-17, <a href="../2023-01-17_data_structure_overview/">Overview</a></li>
<li>2023-01-18, <a href="../2023-01-18_array/">Array</a></li>
<li>2023-01-18, <a href="../2023-01-18_linked_list/">Linked List</a></li>
<li>2023-01-18, <a href="../2023-01-18_python_list/">Python List</a></li>
<li>2023-01-19, <a href="../2023-01-19_stack/">Stack</a></li>
<li>2023-01-19, <a href="../2023-01-19_queue/">Queue</a></li>
<li>2023-01-26, <a href="../2023-01-19_deque/">Deque</a></li>
<li>2023-01-26, <a href="../2023-01-20_binary_search_tree/">Binary Search Tree</a></li>
<li>2023-01-20, <a href="../2023-01-20_priority_queue/">Priority Queue</a></li>
<li>2023-01-20, <a href="../2023-01-20_graph/">Graph</a></li>
</ul>
</section>
<section id="development-environment-setting" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="development-environment-setting"><span class="header-section-number">3</span> Development Environment Setting</h2>
<section id="wsl2" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="wsl2"><span class="header-section-number">3.1</span> WSL2</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">Introduction &amp; Installation</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Command</a></li>
<li>2024-01-25, <a href="../../../../../docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html">Linux_Error_Fix_rm_cannot_remove_files_busy</a></li>
</ul>
</section>
<section id="docker" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="docker"><span class="header-section-number">3.2</span> Docker</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="vs-code" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="vs-code"><span class="header-section-number">3.3</span> VS code</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/VScode/01.vscode_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="conda" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="conda"><span class="header-section-number">3.4</span> Conda</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Conda/01.conda_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="git" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="git"><span class="header-section-number">3.5</span> Git</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
</section>
<section id="documentation" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="documentation"><span class="header-section-number">4</span> Documentation</h2>
<section id="dynamic-documentation" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="dynamic-documentation"><span class="header-section-number">4.1</span> Dynamic Documentation</h3>
<ul>
<li>2023-01-19, <a href="https://quarto.org/docs/get-started/">Quarto</a></li>
<li>2023-01-19, <a href="https://github.com/yihui/xaringan">xaringan[R]</a></li>
<li>2023-01-19, <a href="https://bookdown.org/yihui/bookdown/get-started.html">Bookdown[R]</a></li>
<li>2023-01-19, <a href="https://decile-team-distil.readthedocs.io/en/latest/index.html">DISTL</a></li>
<li>2023-01-26, <a href="https://www.sphinx-doc.org/en/master/">Sphinx[Python]</a></li>
</ul>
</section>
<section id="diagrams" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="diagrams"><span class="header-section-number">4.2</span> Diagrams</h3>
<ul>
<li>2023-05-01, <a href="https://quarto.org/docs/authoring/diagrams.html">Quarto &amp; Diagrams</a></li>
<li>2023-05-01, <a href="https://graphviz.org/gallery/">Graphiz Gallery</a></li>
<li>2023-05-01, <a href="https://mermaid.js.org/#/">Mermaid Gallery</a></li>
</ul>
</section>
</section>
<section id="aws-cloud" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="aws-cloud"><span class="header-section-number">5</span> AWS Cloud</h2>
<p>Coursera Course: AWS Fundamentals</p>
<ul>
<li>2023-03-09, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/computing_networking.html">Computing and Networking</a></li>
<li>2023-03-12, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/storage_database.html">Storage and Database</a></li>
<li>2023-03-26, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/monitoring_sharedresponsibility.html">Monitoring and SharedResponsibility</a></li>
<li>2023-04-05, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/infra_security.html">Infrastructure Security</a></li>
</ul>
</section>
<section id="azure-cloud" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="azure-cloud"><span class="header-section-number">6</span> Azure Cloud</h2>
</section>
<section id="gcp" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="gcp"><span class="header-section-number">7</span> GCP</h2>
</section>
<section id="python" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="python"><span class="header-section-number">8</span> python</h2>
<ul>
<li>2023-06-01, <a href="../../../../../docs/blog/posts/Engineering/Python/package_management.html">Package Management: requirements.txt</a></li>
<li>2023-07-01, <a href="../../../../../docs/blog/posts/Engineering/Python/pathlib.html">Pathlib Library: File System Path Management</a></li>
</ul>
</section>
<section id="web" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="web"><span class="header-section-number">9</span> Web</h2>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/web/http_method.html">HTTP Methods</a></li>
</ul>
</section>
<section id="apache-airflow" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="apache-airflow"><span class="header-section-number">10</span> Apache Airflow</h2>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/01.intro.html">Introduction</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/02.env_setting.html">Airflow Environment Setting</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/03.operator_basic.html">Operator Basics</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/04.python_operator.html">Python Operators</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/05.template_variable.html">Template Variable</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/06.data_share.html">Data Share</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/07.task_handling.html">Task Handling - Advanced</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/08.more_operators.html">More Operators</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/09.connection_hook.html">Connection &amp; Hook</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/10.sensor.html">Sensor</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">More Airflow Functions</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">Operate WebApp Using Rshiny</a></li>
</ul>
</section>
<section id="apache-spark" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="apache-spark"><span class="header-section-number">11</span> Apache Spark</h2>
</section>
<section id="data-modeling" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="data-modeling"><span class="header-section-number">12</span> Data Modeling</h2>
</section>
<section id="front-end" class="level2" data-number="13">
<h2 data-number="13" class="anchored" data-anchor-id="front-end"><span class="header-section-number">13</span> Front End</h2>
</section>
<section id="back-end" class="level2" data-number="14">
<h2 data-number="14" class="anchored" data-anchor-id="back-end"><span class="header-section-number">14</span> Back End</h2>
</section>
<section id="public-data" class="level2" data-number="15">
<h2 data-number="15" class="anchored" data-anchor-id="public-data"><span class="header-section-number">15</span> Public data</h2>
<ul>
<li>2024-01-01, <a href="../../../../../docs/blog/posts/Engineering/public_data/index.html">Public Data Centers</a></li>
</ul>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Validation</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/</link>
  <description><![CDATA[ 




<section id="sgs" class="level2" data-number="1">

<ul>
<li>0000-00-00, EN62304</li>
</ul>
</section>
<section id="fda" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="fda"><span class="header-section-number">2</span> FDA</h2>
<ul>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2022-12-10_FDA_sw_general_guidance/index.html">General Principles of SW Validation</a></li>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2023-01-27_FDA_sw_general_guidance_presentation/index.html">General Principles of SW Validation - Diagram Summary</a></li>
<li>1111-11-11, Guidance for the Content of Premarket Submissions for Software Contained in Medical Devices</li>
</ul>
</section>
<section id="dhf" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="dhf"><span class="header-section-number">3</span> DHF</h2>
</section>
<section id="public-health" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="public-health"><span class="header-section-number">4</span> Public Health</h2>
</section>
<section id="wet-lab" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="wet-lab"><span class="header-section-number">5</span> Wet Lab</h2>
<ul>
<li>0000-00-00, PCR (Polymerase Chain Reaction) Experiment</li>
</ul>


</section>

 ]]></description>
  <category>Surveilance</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/</guid>
  <pubDate>Sat, 31 Dec 2089 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Governance Study</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Governance/list.html</link>
  <description><![CDATA[ 




<section id="데이터-거버넌스-지식-및-업무-절차-프레임워크" class="level2" data-number="1">

<ul>
<li>데이터 거버넌스 기초
<ul>
<li>정의 및 목적
<ul>
<li>데이터 거버넌스의 정의</li>
<li>데이터 거버넌스의 중요성과 비즈니스 가치</li>
</ul></li>
</ul></li>
<li>핵심 원칙
<ul>
<li>데이터 품질</li>
<li>데이터 보안 및 프라이버시</li>
<li>데이터 접근성 및 공유</li>
<li>데이터 일관성 및 표준화</li>
</ul></li>
<li>주요 구성 요소
<ul>
<li>정책 및 표준</li>
<li>프로세스 및 절차</li>
<li>역할 및 책임</li>
<li>기술 및 도구</li>
</ul></li>
<li>데이터 거버넌스 프레임워크
<ul>
<li>DAMA-DMBOK
<ul>
<li>데이터 관리 지식 체계 개요</li>
<li>11개 지식 영역 이해</li>
</ul></li>
<li>IBM Data Governance Council Maturity Model
<ul>
<li>11개 범주 및 5단계 성숙도 모델 이해</li>
</ul></li>
<li>기타 프레임워크
<ul>
<li>COBIT (Control Objectives for Information and Related Technologies)</li>
<li>ISO/IEC 38500 IT Governance Standard</li>
</ul></li>
</ul></li>
<li>데이터 거버넌스를 위한 기술지원 솔루션
<ul>
<li>Snowflake</li>
<li>Databricks</li>
<li>Purview</li>
<li>Encore</li>
</ul></li>
<li>데이터 거버넌스 구현 단계
<ul>
<li>준비 및 계획</li>
<li>현황 분석 및 요구사항 정의</li>
<li>이해관계자 식별 및 참여</li>
<li>비전 및 목표 설정</li>
</ul></li>
<li>3.2 조직 구성</li>
<li></li>
<li>데이터 거버넌스 위원회 구성</li>
<li>데이터 스튜어드 지정</li>
<li>역할 및 책임 정의</li>
<li></li>
<li>3.3 정책 및 표준 수립</li>
<li></li>
<li>데이터 품질 정책</li>
<li>데이터 보안 및 프라이버시 정책</li>
<li>데이터 아키텍처 표준</li>
<li></li>
<li>3.4 프로세스 설계 및 구현</li>
<li></li>
<li>데이터 생명주기 관리 프로세스</li>
<li>메타데이터 관리 프로세스</li>
<li>데이터 품질 관리 프로세스</li>
<li></li>
<li>3.5 기술 도입</li>
<li></li>
<li>데이터 카탈로그 도구</li>
<li>데이터 품질 관리 도구</li>
<li>메타데이터 관리 도구</li>
<li></li>
<li>3.6 모니터링 및 개선</li>
<li></li>
<li>성과 지표(KPI) 설정 및 측정</li>
<li>지속적인 개선 활동</li>
<li></li>
<li><ol start="4" type="1">
<li>데이터 거버넌스 주요 업무 영역</li>
</ol></li>
<li>4.1 데이터 품질 관리</li>
<li></li>
<li>데이터 프로파일링</li>
<li>데이터 클렌징</li>
<li>데이터 품질 모니터링</li>
<li></li>
<li>4.2 메타데이터 관리</li>
<li></li>
<li>비즈니스 메타데이터</li>
<li>기술 메타데이터</li>
<li>운영 메타데이터</li>
<li></li>
<li>4.3 마스터 데이터 관리 (MDM)</li>
<li></li>
<li>마스터 데이터 식별</li>
<li>마스터 데이터 통합 및 동기화</li>
<li></li>
<li>4.4 데이터 보안 및 프라이버시</li>
<li></li>
<li>데이터 분류</li>
<li>접근 제어</li>
<li>데이터 암호화</li>
<li></li>
<li>4.5 데이터 아키텍처 관리</li>
<li></li>
<li>데이터 모델링</li>
<li>데이터 플로우 관리</li>
<li></li>
<li><ol start="5" type="1">
<li>데이터 거버넌스 도구 및 기술</li>
</ol></li>
<li>5.1 데이터 카탈로그 도구</li>
<li></li>
<li>Collibra</li>
<li>Alation</li>
<li>IBM Watson Knowledge Catalog</li>
<li></li>
<li>5.2 데이터 품질 관리 도구</li>
<li></li>
<li>Informatica Data Quality</li>
<li>Talend Data Quality</li>
<li>IBM InfoSphere Information Server for Data Quality</li>
<li></li>
<li>5.3 메타데이터 관리 도구</li>
<li></li>
<li>ASG Enterprise Data Intelligence</li>
<li>Adaptive Metadata Manager</li>
<li>erwin Data Intelligence</li>
<li></li>
<li><ol start="6" type="1">
<li>변화 관리 및 문화 조성</li>
</ol></li>
<li>6.1 데이터 중심 문화 구축</li>
<li></li>
<li>데이터 리터러시 향상</li>
<li>데이터 윤리 교육</li>
<li></li>
<li>6.2 조직 변화 관리</li>
<li></li>
<li>커뮤니케이션 전략</li>
<li>교육 및 훈련 프로그램</li>
<li></li>
<li><ol start="7" type="1">
<li>규제 및 컴플라이언스</li>
</ol></li>
<li>7.1 주요 데이터 관련 규제</li>
<li></li>
<li>GDPR (General Data Protection Regulation)</li>
<li>CCPA (California Consumer Privacy Act)</li>
<li>국내 개인정보보호법</li>
<li></li>
<li>7.2 컴플라이언스 관리</li>
<li></li>
<li>규제 요구사항 매핑</li>
<li>컴플라이언스 모니터링 및 보고</li>
<li></li>
<li><ol start="8" type="1">
<li>데이터 거버넌스 성과 측정</li>
</ol></li>
<li>8.1 핵심 성과 지표 (KPI)</li>
<li></li>
<li>데이터 품질 개선율</li>
<li>데이터 관련 의사결정 시간 단축</li>
<li>데이터 보안 사고 감소율</li>
<li></li>
<li>8.2 ROI 분석</li>
<li></li>
<li>비용 절감 효과</li>
<li>수익 증대 효과</li>
<li>리스크 감소 효과</li>
<li></li>
<li><ol start="9" type="1">
<li>향후 트렌드 및 발전 방향</li>
</ol></li>
<li>9.1 AI/ML을 활용한 데이터 거버넌스</li>
<li>9.2 클라우드 환경에서의 데이터 거버넌스</li>
<li>9.3 데이터 윤리 및 책임 있는 AI</li>
</ul>


</section>

 ]]></description>
  <guid>kmink3225.netlify.app/docs/blog/posts/Governance/list.html</guid>
  <pubDate>Wed, 07 Aug 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Governance Study</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Governance/basis.html</link>
  <description><![CDATA[ 




<section id="데이터-거버넌스-기초" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="데이터-거버넌스-기초"><span class="header-section-number">1</span> 데이터 거버넌스 기초</h2>
<ul>
<li>조직의 데이터 관리를 위한 핵심적인 프레임워크
<ul>
<li>프레임워크란?
<ul>
<li>특정 문제나 도메인에 대한 구조화된 접근 방식을 제공하는 <strong>개념</strong>적인 구조</li>
<li>문제 해결을 위한 가이드라인, 원칙, 모범 사례를 제시</li>
</ul></li>
</ul></li>
<li>조직 전체의 데이터 관리 전략과 실행 방법을 다룬다. 즉, 개념적, 전략적 접근 방식</li>
<li>최종적으로, 조직의 정책, 프로세스, 문화 등에 반영되어야 한다.</li>
</ul>
<section id="데이터-거버넌스의-정의" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="데이터-거버넌스의-정의"><span class="header-section-number">1.1</span> 데이터 거버넌스의 정의</h3>
<ul>
<li>데이터 거버넌스는 조직 내에서 데이터의 <strong>가용성, 유용성, 무결성, 보안을 보장</strong>하기 위한 정책, 절차, 표준을 수립하고 실행하는 과정이다.</li>
<li>이는 <strong>데이터를 비즈니스 자산으로 관리</strong>하고 활용하는 체계적인 접근 방식이다.</li>
<li>데이터 거버넌스 구조</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/governance/governance_structure.PNG" class="img-fluid figure-img"></p>
<figcaption>Data Governance Structure</figcaption>
</figure>
</div>
</section>
<section id="데이터-거버넌스의-기대효과" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="데이터-거버넌스의-기대효과"><span class="header-section-number">1.2</span> 데이터 거버넌스의 기대효과</h3>
<p>거버넌스는 기술 구현 목적이 아니라 비즈니스 전략의 핵심 요소로 자리 잡아야 한다.</p>
<ul>
<li>데이터 품질 향상: 고품질 데이터는 정확한 분석과 신속한 비즈니스 의사결정의 기반이 된다.
<ul>
<li>잘못된 데이터로 인한 비용 감소</li>
<li>고객 만족도 증가</li>
<li>운영 효율성 개선</li>
</ul></li>
<li>규정 준수 및 리스크 관리: 데이터 관련 법규(예: GDPR, CCPA)를 준수해야 함
<ul>
<li>법적 제재 및 벌금 회피<br>
</li>
<li>기업 평판 보호<br>
</li>
<li>고객 신뢰 증진</li>
</ul></li>
<li>운영 및 개발 효율성 증가: 체계적인 데이터 관리는 업무 프로세스를 최적화
<ul>
<li>개발 생산성 형상: 표준용어와 구조 정보를 관리하여 데이터 이해도 증가</li>
<li>중복 작업 감소</li>
<li>데이터 검색 및 활용 시간 단축</li>
<li>부서간 협업 증진</li>
<li>유지보수 효율성 향상</li>
<li>평균 30~60% 이상의 비용, 공수, 기간 효율 제고</li>
<li>비즈니스 목표 달성 및 노동 생산성 향상에도 기여함</li>
</ul></li>
<li>데이터 보안 강화: 민감한 데이터를 보호하고 무단 접근을 방지해야 함
<ul>
<li>데이터 유출로 인한 손실 예방</li>
<li>고객 및 파트너 신뢰 유지</li>
<li>지적 재산권 보호</li>
</ul></li>
<li>비즈니스 인텔리전스 및 분석 개선: 일관되고 신뢰할 수 있는 데이터는 더 나은 분석을 가능하게 함
<ul>
<li>시장 트렌드 신속 파악</li>
<li>고객 인사이트 향상</li>
<li>예측 분석의 정확도 증가</li>
</ul></li>
<li>데이터 자산의 가치 극대화
<ul>
<li>데이터를 전략적 자산으로 관리</li>
<li>데이터 기반 신규 비즈니스 모델 창출</li>
<li>데이터 monetization 기회 발굴
<ul>
<li>데이터 판매: 수집한 데이터를 다른 기업이나 연구기관에 직접 판매</li>
<li>데이터 접근권 판매: API나 구독 모델을 통해 데이터 접근권을 제공</li>
<li>제품/서비스 개선: 데이터를 활용해 기존 제품이나 서비스를 개선</li>
<li>맞춤형 마케팅: 고객 데이터를 활용한 타겟 마케팅으로 매출 증대</li>
<li>운영 효율성 개선: 내부 데이터 분석을 통한 비용 절감</li>
</ul></li>
</ul></li>
<li>비용 절감: 효율적인 데이터 관리는 여러 영역에서 비용을 절감
<ul>
<li>데이터 저장 및 관리 비용 최적화</li>
<li>데이터 관련 오류 수정 비용 감소</li>
<li>중복 시스템 및 프로세스 제거</li>
</ul></li>
</ul>
</section>
<section id="데이터-거버넌스의-목적" class="level3" data-number="1.3">
<h3 data-number="1.3" class="anchored" data-anchor-id="데이터-거버넌스의-목적"><span class="header-section-number">1.3</span> 데이터 거버넌스의 목적</h3>
<ul>
<li>데이터 품질 향상</li>
<li>데이터 보안 및 규정 준수 보장</li>
<li>의사결정 프로세스 개선</li>
<li>운영 효율성 및 생산성 증대</li>
<li>데이터 기반 혁신 촉진</li>
</ul>
</section>
<section id="핵심-구성-요소" class="level3" data-number="1.4">
<h3 data-number="1.4" class="anchored" data-anchor-id="핵심-구성-요소"><span class="header-section-number">1.4</span> 핵심 구성 요소</h3>
<ul>
<li>데이터 표준
<ul>
<li>데이터의 일관성을 유지하기 위한 규칙과 가이드라인</li>
</ul></li>
<li>데이터 정책
<ul>
<li>데이터 보안 및 프라이버시 정책</li>
<li>데이터 생명주기 관리 정책
<ul>
<li>데이터 흐름도와 데이터 계보(lineage) 관리를 통해 데이터의 전체 생명주기를 명확히 파악</li>
</ul></li>
</ul></li>
<li>데이터 품질 기준
<ul>
<li>데이터의 정확성, 완전성, 일관성, 시의성 등을 관리</li>
</ul></li>
<li>데이터 구조
<ul>
<li>데이터의 조직화, 저장, 관리 방식을 정의하는 아키텍처와 모델링</li>
</ul></li>
<li>조직 및 역할
<ul>
<li>데이터 거버넌스 위원회</li>
<li>데이터 소유자 (Data Owner)</li>
<li>데이터 관리자 (Data Steward)</li>
<li>데이터 사용자</li>
</ul></li>
<li>프로세스
<ul>
<li>데이터 품질 관리 프로세스</li>
<li>메타데이터 관리 프로세스</li>
<li>데이터 접근 및 공유 프로세스</li>
</ul></li>
<li>기술
<ul>
<li>데이터 카탈로그</li>
<li>데이터 품질 도구</li>
<li>메타데이터 관리 도구</li>
</ul></li>
<li>주요 원칙
<ul>
<li>책임성: 데이터에 대한 명확한 소유권과 책임을 정의</li>
<li>투명성: 데이터 관련 프로세스와 결정을 투명하게 관리</li>
<li>무결성: 데이터의 정확성과 일관성을 유지</li>
<li>보안: 데이터를 안전하게 보호하고 적절한 접근 제어를 실시</li>
<li>규정 준수: 관련 법규와 업계 표준을 준수</li>
<li>가용성: 필요한 사람이 필요한 시점에 데이터에 접근할 수 있도록 함</li>
<li>효율성: 데이터 관리 프로세스를 최적화하여 비용 효율성을 높임</li>
</ul></li>
<li>구현 단계
<ul>
<li>현황 평가: 현재의 데이터 관리 실태를 분석</li>
<li>전략 수립: 조직의 목표에 맞는 데이터 거버넌스 전략을 수립</li>
<li>정책 및 표준 개발: 필요한 정책과 표준을 개발</li>
<li>조직 구성: 데이터 거버넌스를 위한 조직 구조를 설계하고 역할을 할당</li>
<li>프로세스 구현: 데이터 관리 프로세스를 설계하고 구현</li>
<li>기술 도입: 필요한 데이터 관리 도구를 선택하고 도입</li>
<li>교육 및 변화 관리: 조직 구성원들에게 필요한 교육을 제공하고 변화를 관리</li>
<li>모니터링 및 개선: 지속적으로 성과를 모니터링하고 개선</li>
</ul></li>
<li>도전 과제
<ul>
<li>조직 문화 변화의 어려움</li>
<li>다양한 이해관계자 간의 조정</li>
<li>레거시 시스템과의 통합</li>
<li>지속적인 투자와 관심 유지</li>
</ul></li>
</ul>
</section>
<section id="데이터-비표준화-문제점" class="level3" data-number="1.5">
<h3 data-number="1.5" class="anchored" data-anchor-id="데이터-비표준화-문제점"><span class="header-section-number">1.5</span> 데이터 비표준화 문제점</h3>
<ul>
<li>의사결정 품질 저하
<ul>
<li>부정확하거나 불완전한 데이터로 인해 잘못된 결정을 내릴 수 있다.</li>
<li>시의적절한 데이터 접근이 어려워 기회를 놓칠 수 있다.</li>
</ul></li>
<li>운영 비효율성
<ul>
<li>중복되거나 일관성 없는 데이터로 인해 작업 시간이 증가</li>
<li>부서간 데이터 공유와 협업이 어려워진다.</li>
<li>시간이 지남에 따라 비표준화된 데이터는 계속 누적되어 악순환에 빠짐</li>
</ul></li>
<li>규정 준수 리스크 증가
<ul>
<li>데이터 관련 법규(예: GDPR, CCPA) 위반 가능성이 높아진다.</li>
<li>감사 대응이 어려워지고, 이로 인한 법적 제재나 벌금 위험이 증가</li>
</ul></li>
<li>신뢰 상실
<ul>
<li>데이터 구조와 정의가 불명확하여 데이터의 신뢰성이 떨어짐</li>
<li>부정확한 고객 데이터로 인해 서비스 품질이 저하될 수 있다.</li>
<li>데이터의 내용과 형식이 불분명하여 데이터 해석이 어렵습니다.</li>
<li>개인정보 유출 위험이 증가하여 고객 신뢰를 잃을 수 있다.</li>
</ul></li>
<li>재무적 손실
<ul>
<li>잘못된 데이터로 인한 전략적 실패로 재무적 손실이 발생할 수 있다.</li>
<li>데이터 오류 수정에 많은 비용과 시간이 소요
<ul>
<li>일관성 없는 명명 규칙으로 인해 데이터 이해와 통합이 어려워짐</li>
<li>즉, 높은 의사소통 비용과 생산성 저하</li>
</ul></li>
</ul></li>
<li>경쟁력 약화
<ul>
<li>낮은 데이터 품질로 의사결정의 정확도와 신속도가 저하됨</li>
<li>데이터 기반 혁신이 어려워져 시장에서 뒤처질 수 있다.</li>
<li>고객 인사이트 부족으로 시장 변화에 대응하기 어려움</li>
</ul></li>
<li>IT 시스템 복잡성 증가
<ul>
<li>일관성 없는 데이터 구조로 인해 시스템 통합이 어려워진다.</li>
<li>레거시 시스템 유지 비용이 증가</li>
</ul></li>
<li>데이터 보안 취약성
<ul>
<li>데이터 접근 통제가 제대로 이루어지지 않아 보안 위험이 증가</li>
<li>중요 데이터의 위치나 중요도를 파악하기 어려워 적절한 보호가 어렵다.</li>
</ul></li>
<li>분석 및 AI/ML 프로젝트 실패
<ul>
<li>데이터 통합 실패 및 부족으로 모델링 불가</li>
<li>낮은 품질의 데이터로 인해 분석 결과의 신뢰성이 떨어진다.</li>
<li>AI/ML 모델의 성능이 저하되거나 편향된 결과를 도출할 수 있다.</li>
</ul></li>
<li>조직 문화 악화
<ul>
<li>데이터에 대한 불신으로 인해 데이터 기반 문화 형성이 어렵다.</li>
<li>부서간 데이터 사일로로 인해 협업이 저해</li>
</ul></li>
<li>비즈니스 기회 상실
<ul>
<li>데이터의 전략적 가치를 활용하지 못해 새로운 비즈니스 모델 개발이 어렵다.</li>
<li>데이터 monetization 기회를 놓친다.</li>
</ul></li>
<li>리소스 낭비
<ul>
<li>중복된 데이터 저장 및 관리로 인해 불필요한 비용이 발생</li>
<li>데이터 검색과 정제에 많은 시간을 소비.
<ul>
<li>데이터의 위치와 저장 방식이 일관되지 않아 필요한 데이터를 찾기 어렵다</li>
</ul></li>
</ul></li>
<li>데이터 계보 추적 불가
<ul>
<li>데이터의 생성, 이동, 변환 과정이 불분명하여 데이터 계보 추적이 어렵다.</li>
</ul></li>
</ul>


</section>
</section>

 ]]></description>
  <guid>kmink3225.netlify.app/docs/blog/posts/Governance/basis.html</guid>
  <pubDate>Wed, 31 Jul 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>시계열 분석 기초 개념 - 정상성(stationarity)</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/time_series/basic_stationarity.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="introduction"><span class="header-section-number">1</span> Introduction</h2>
<p>다른 데이터와 달리, 시계열 데이터는 시간이 흐름에 따라 연속적으로 기록되며, 동일한 데이터가 반복되지 않고, 항상 새로운 데이터가 시간 축을 따라 순차적으로 추가된다는 특성이 있다. 따라서 시계열 데이터 분석은 추세, 계절성, 자기 상관성 등의 패턴을 분석하는 과정을 포함한다.</p>
<p>시계열 예측 모델은 이러한 시계열 데이터의 특성을 잘 반영하여 설계되어야 한다. 시계열 데이터의 주요 특성으로는 정상성, 비정상성, 지연, 차분, 자기 상관성, 백색 잡음 등이 있으며, 이러한 요소들을 고려한 모델링이 중요하다.</p>
</section>
<section id="정상성stationarity의-정의" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="정상성stationarity의-정의"><span class="header-section-number">2</span> 정상성(Stationarity)의 정의</h2>
<p>시계열이 정상성을 가진다는 것은 다음 조건들을 만족한다는 의미:</p>
<ul>
<li>평균이 일정, <img src="https://latex.codecogs.com/png.latex?E%5BY_t%5D%20=%20%5Cmu%20%5Cquad%20%5Ctext%7B%EB%AA%A8%EB%93%A0%20%7D%20t%20%5Ctext%7B%EC%97%90%20%EB%8C%80%ED%95%B4%7D"></li>
<li>분산이 일정, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(Y_t)%20=%20%5Csigma%5E2%20%5Cquad%20%5Ctext%7B%EB%AA%A8%EB%93%A0%20%7D%20t%20%5Ctext%7B%EC%97%90%20%EB%8C%80%ED%95%B4%7D"></li>
<li>공분산이 시차에만 의존하고 시간 자체에는 의존하지 않음.
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCov%7D(Y_t,%20Y_%7Bt+k%7D)%20=%20%5Cgamma_k%20%5Cquad%20%5Ctext%7B%EB%AA%A8%EB%93%A0%20%EC%8B%9C%EA%B0%84%20%7D%20t%20%5Ctext%7B%EC%99%80%20%EC%8B%9C%EA%B0%84%20%EA%B0%84%EA%B2%A9%20%7D%20k%20%5Ctext%7B%EC%97%90%20%EB%8C%80%ED%95%B4%7D"></li>
</ul></li>
</ul>
<section id="textcovy_t-y_tk-gamma_k" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="textcovy_t-y_tk-gamma_k"><span class="header-section-number">2.1</span> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCov%7D(Y_t,%20Y_%7Bt+k%7D)%20=%20%5Cgamma_k"></h3>
<p>두 시점 사이의 관계가 그 사이의 간격(시차)에만 영향을 받고, 실제 시간 위치는 중요하지 않다는 의미다. 특정 시점에서의 값이 그 시점 이후의 값들과 얼마나 상관관계가 있는지를 측정할 때 그 상관관계가 시간 <img src="https://latex.codecogs.com/png.latex?t"> 의 특정 위치와 무관하다는 의미이다. 다시 말해, 공분산이 <img src="https://latex.codecogs.com/png.latex?t"> 에 따라 변하지 않고 오직 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에만 의존한다는 뜻</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Python</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">R</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시계열 데이터 생성</span></span>
<span id="cb1-6">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb1-8">lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시차의 최대값</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AR(1) 생성 (phi = 0.8)</span></span>
<span id="cb1-11">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb1-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(n)</span>
<span id="cb1-13">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># white noise</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb1-16">    y[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y[t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon[t]</span>
<span id="cb1-17"></span>
<span id="cb1-18">covariances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.cov(y[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k], y[k:])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-19"></span>
<span id="cb1-20">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb1-21">plt.bar(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), covariances, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb1-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Covariance as a Function of Lag (Cov(Yt, Yt+k) = γk)'</span>)</span>
<span id="cb1-23">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lag (k)'</span>)</span>
<span id="cb1-24">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Covariance (γk)'</span>)</span>
<span id="cb1-25">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-26">plt.show()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/time_series/basic_stationarity_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reshape2)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시계열 데이터 생성</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-6">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-7">lags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시차의 최대값</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AR(1) 생성 (phi = 0.8)</span></span>
<span id="cb2-10">phi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb2-11">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(n)</span>
<span id="cb2-12">epsilon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># white noise</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (t <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb2-15">  y[t] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> phi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y[t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon[t]</span>
<span id="cb2-16">}</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 공분산 계산</span></span>
<span id="cb2-19">covariances <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>lags, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k)], y[(k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n]))</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb2-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barplot</span>(covariances, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names.arg =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>lags, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, </span>
<span id="cb2-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Covariance as a Function of Lag (Cov(Yt, Yt+k) = γk)"</span>,</span>
<span id="cb2-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag (k)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Covariance (γk)"</span>)</span>
<span id="cb2-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid</span>()</span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시점 t 선택 (여기서는 예시로 여러 개의 t를 선택하여 비교)</span></span>
<span id="cb2-28">time_points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb2-29">max_lag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>  </span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 시점 t에서 공분산 계산</span></span>
<span id="cb2-32">covariances_per_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>max_lag)</span>
<span id="cb2-33"></span>
<span id="cb2-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (t <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> time_points) {</span>
<span id="cb2-35">  covariances <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(max_lag)</span>
<span id="cb2-36">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>max_lag) {</span>
<span id="cb2-37">    covariances[k] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(y[t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>max_lag<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)], y[(t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>max_lag<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)])</span>
<span id="cb2-38">  }</span>
<span id="cb2-39">  covariances_per_t[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t_"</span>, t)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> covariances</span>
<span id="cb2-40">}</span>
<span id="cb2-41"></span>
<span id="cb2-42">covariances_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(covariances_per_t, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable.name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Covariance"</span>)</span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb2-45"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(covariances_long, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Lag, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Covariance, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> Time)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Covariance as a Function of Lag for Different Time Points"</span>,</span>
<span id="cb2-49">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag (k)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Covariance (γk)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-50">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-51">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
</details>
</div>
</div>
</div>
</div>
<ul>
<li>그래프에서 볼 수 있듯이, 특정 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에서의 공분산 값은 모든 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에 대해 동일한 패턴을 보인다. 이 같은 특성은 흔히 <strong>정상 시계열</strong> 이라고 불리며, 이는 시계열 데이터가 시간에 따른 일정한 통계적 특성을 갖고 있음을 의미한다.</li>
<li><strong>시차(Lag)에 대한 의존성</strong>
<ul>
<li>시차 <img src="https://latex.codecogs.com/png.latex?k"> 가 증가할수록 공분산의 값이 점차 감소하는 패턴을 보이고 있다. 이는 <img src="https://latex.codecogs.com/png.latex?k"> 가 커질수록 시계열 데이터가 더 멀리 떨어진 시점과의 상관관계가 줄어든다는 것을 의미한다.</li>
</ul></li>
<li><strong>시간 <img src="https://latex.codecogs.com/png.latex?t"> 에 대한 독립성</strong>
<ul>
<li>공분산이 특정 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 대해서만 달라지고, 시간 <img src="https://latex.codecogs.com/png.latex?t"> 자체에는 의존하지 않음을 의미. 즉, 동일한 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 대해 어느 시간 <img src="https://latex.codecogs.com/png.latex?t"> 에서 계산하든 동일한 공분산 값을 가진다.</li>
<li>이를 그래프에서 직접적으로 확인하기는 어렵지만, 중요한 점은 <strong>모든 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 대해 공분산이 일정한 패턴(감소하는 경향)을 유지하고 있다는 것</strong>. 이는 시계열 데이터가 시간에 따라 변화하지 않는 정상성을 갖고 있음을 암시한다.</li>
<li>공분산이 시간 <img src="https://latex.codecogs.com/png.latex?t"> 에 의존하지 않는다는 것은, <strong>어느 시점에서 시작하든 동일한 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 대한 공분산 값이 동일한 패턴을 보여야 한다</strong>는 것이다. 즉, 공분산 값의 감소 패턴은 특정 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에 국한되지 않고, 모든 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에 대해 동일하게 나타난다는 뜻이다.</li>
</ul></li>
<li>그래서, 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 따라 공분산이 감소하는 것은, 특정한 시점에서만 나타나는 현상이 아니라, 모든 시점에서 동일하게 나타나는 패턴이라는 것이다. 이 때문에 공분산이 시간 <img src="https://latex.codecogs.com/png.latex?t"> 에 의존하지 않는다고 할 수 있다.</li>
<li>그래프에서 시점 <img src="https://latex.codecogs.com/png.latex?t"> 가 달라져도 동일한 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 대해 공분산이 같은 감소 패턴을 보인다는 점에서, 공분산이 시간 자체에는 의존하지 않고 시차에만 의존한다는 사실을 확인할 수 있다.</li>
<li>특정 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에서만 계산한 것이 아니라, 모든 시점 <img src="https://latex.codecogs.com/png.latex?t"> 를 반영하여 계산된 공분산의 평균값이다.</li>
</ul>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시점 t 선택</span></span>
<span id="cb3-3">time_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>]</span>
<span id="cb3-4">max_lag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최대 시차를 줄여 데이터 길이 문제 해결</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 시점 t에서 공분산 계산</span></span>
<span id="cb3-7">covariances_per_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> time_points:</span>
<span id="cb3-9">    covariances_per_t[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.cov(y[t:t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>max_lag], y[t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k:t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>max_lag])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_lag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb3-12">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> time_points:</span>
<span id="cb3-15">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_lag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), covariances_per_t[t], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f't=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/time_series/basic_stationarity_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>위의 그래프는 여러 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에서 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 따른 공분산 값을 보여준다.</li>
<li>서로 다른 시점 <img src="https://latex.codecogs.com/png.latex?t"> 에 대해서도 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에 따른 공분산 값은 거의 동일한 패턴을 보인다. 이는 공분산이 시간 <img src="https://latex.codecogs.com/png.latex?t"> 에 의존하지 않고 시차 <img src="https://latex.codecogs.com/png.latex?k"> 에만 의존한다는 것을 의미한다.</li>
</ul>
</section>
</section>
<section id="정상성의-중요성" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="정상성의-중요성"><span class="header-section-number">3</span> 정상성의 중요성</h2>
<ul>
<li>많은 시계열 모델(ARMA 포함)은 정상성을 가정한다.</li>
</ul>
<div class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> </span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정상성을 갖는 시계열: AR(1) (phi = 0.8)</span></span>
<span id="cb4-5">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb4-6">y_stationary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(n)</span>
<span id="cb4-7">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 백색잡음</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb4-10">    y_stationary[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_stationary[t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon[t]</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정상성을 갖지 않는 시계열 (예: 랜덤워크)</span></span>
<span id="cb4-13">y_non_stationary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(n)</span>
<span id="cb4-14">epsilon_non_stationary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 백색잡음</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n):</span>
<span id="cb4-17">    y_non_stationary[t] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_non_stationary[t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon_non_stationary[t]</span>
<span id="cb4-18"></span>
<span id="cb4-19"></span>
<span id="cb4-20">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-21"></span>
<span id="cb4-22">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-23">plt.plot(y_stationary, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stationary Time Series (AR(1))'</span>)</span>
<span id="cb4-24">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stationary Time Series'</span>)</span>
<span id="cb4-25">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb4-26">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb4-27">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-28">plt.legend()</span>
<span id="cb4-29"></span>
<span id="cb4-30">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-31">plt.plot(y_non_stationary, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Non-Stationary Time Series (Random Walk)'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>)</span>
<span id="cb4-32">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Non-Stationary Time Series'</span>)</span>
<span id="cb4-33">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb4-34">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb4-35">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-36">plt.legend()</span>
<span id="cb4-37"></span>
<span id="cb4-38">plt.tight_layout()</span>
<span id="cb4-39">plt.show()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/time_series/basic_stationarity_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid figure-img" width="1344"></p>
</figure>
</div>
</div>
</div>
<ul>
<li><strong>정상성을 갖는 시계열 (Stationary Time Series)</strong>:
<ul>
<li>왼쪽 그래프는 AR(1) 프로세스에 의해 생성된 정상성을 갖는 시계열. 이 시계열은 평균과 분산이 시간에 따라 일정하게 유지된다. 즉, 데이터의 변동이 시간에 따라 크게 변화하지 않고 상대적으로 일정한 패턴을 보인다.</li>
</ul></li>
<li><strong>정상성을 갖지 않는 시계열 (Non-Stationary Time Series)</strong>:
<ul>
<li>오른쪽 그래프는 랜덤 워크(Random Walk)에 의해 생성된 정상성을 갖지 않는 시계열. 이 시계열은 시간에 따라 평균이나 분산이 변하는 경향을 보이며, 데이터가 시간이 지남에 따라 특정 방향으로 이동하거나 더 넓은 범위로 퍼진다.<br>
</li>
</ul></li>
<li>정상성을 가진 데이터는 예측이 더 쉽고 신뢰할 수 있다.</li>
<li>비정상 시계열은 과거 패턴이 미래에 그대로 적용되지 않을 수 있어 예측이 어렵다.</li>
</ul>
</section>
<section id="정상성-검정" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="정상성-검정"><span class="header-section-number">4</span> 정상성 검정</h2>
<ul>
<li>시각적 검사: (정성적 방법) 시계열 플롯, ACF(자기상관함수) plot 등을 통해 대략적으로 파악</li>
<li>통계적 검정: (정량적 방법) Augmented Dickey-Fuller 검정, KPSS 검정 등</li>
</ul>
</section>
<section id="비정상-시계열의-정상화-방법" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="비정상-시계열의-정상화-방법"><span class="header-section-number">5</span> 비정상 시계열의 정상화 방법</h2>
<ul>
<li>차분(Differencing): 연속된 관측값의 차이를 구함</li>
<li>로그 변환: 지수적 증가 추세를 선형화</li>
<li>계절성 조정: 계절적 패턴 제거</li>
</ul>
</section>
<section id="약정상성-weak-stationarity-vs-강정상성-strong-stationarity" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="약정상성-weak-stationarity-vs-강정상성-strong-stationarity"><span class="header-section-number">6</span> 약정상성 (Weak Stationarity) vs 강정상성 (Strong Stationarity)</h2>
<ul>
<li>약정상성
<ul>
<li>정상성의 정의를 만족</li>
<li>약 정상성은 시계열의 기본적인 통계적 특성인 평균과 분산, 공분산이 시간에 따라 변하지 않도록 요구하는데, 이는 주로 선형 모델이나 통계적 분석에서 주로 사용된다.</li>
</ul></li>
<li>강정상성
<ul>
<li>모든 차수의 결합 확률 분포가 시간에 따라 불변</li>
</ul></li>
</ul>
<ol start="6" type="1">
<li>실제 응용:
<ul>
<li>경제 지표, 주가, 기상 데이터 등 많은 실제 시계열은 비정상적입니다.</li>
<li>이러한 데이터는 적절한 변환을 통해 정상화한 후 분석합니다.</li>
</ul></li>
</ol>
<p>정상성은 시계열 모델의 기본 가정이며, 데이터의 특성을 이해하고 적절한 모델을 선택하는 데 중요한 역할을 합니다.</p>


</section>

 ]]></description>
  <guid>kmink3225.netlify.app/docs/blog/posts/time_series/basic_stationarity.html</guid>
  <pubDate>Sun, 07 Jul 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Time Series (시계열) Data Analysis</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/time_series/</link>
  <description><![CDATA[ 




<section id="시계열-stduy-목차" class="level2" data-number="1">

<ul>
<li>시계열 데이터란?
<ul>
<li>시간에 따른 관측값의 순서</li>
<li>시간 간격의 중요성 (일별, 월별, 분기별 등)</li>
</ul></li>
<li>시계열 데이터의 특성
<ul>
<li>시간 독립변수</li>
<li>자기 상관 관계 (Autocorrelation)</li>
<li>추세(Trend)</li>
<li>계절성(Seasonality)</li>
<li>주기성(Cyclical)</li>
<li>불규칙 요소(Irregular component)</li>
</ul></li>
<li>시계열 데이터의 시각화
<ul>
<li>선 그래프 (Line Plot): 시간에 따른 데이터의 변화를 연속적인 선으로 표현</li>
<li>영역 그래프 (Area Plot): 여러 시계열을 누적하여 표현할 때 유용</li>
<li>막대 그래프 (Bar Plot): 각 시점의 값을 막대로 표현, 불연속적인 시계열이나 빈도 데이터에 적합</li>
<li>캔들스틱 차트 (Candlestick Chart): 시가, 고가, 저가, 종가를 한 번에 표현</li>
<li>히트맵 (Heatmap): 여러 변수나 범주의 시계열을 동시에 비교할 때 유용</li>
<li>상자 그림 (Box Plot): 시간 구간별 데이터의 분포를 요약하여 표현, 이상치 탐지에 유용</li>
<li>산점도 (Scatter Plot): 두 시계열 변수 간의 관계를 표현, 상관관계나 패턴을 파악하는 데 유용</li>
<li>자기상관 그림 (Autocorrelation Plot): ACF, PACF를 시각화, 시계열의 자기상관 구조를 파악하는 데 사용</li>
<li>계절성 분해 그래프 (Seasonal Decomposition Plot): 시계열을 트렌드, 계절성, 잔차로 분해하여 표현</li>
<li>스펙트럼 분석 그래프 (Spectral Analysis Plot): 시계열의 주기성을 주파수 도메인에서 분석</li>
<li>워터폴 차트 (Waterfall Chart): 시간에 따른 누적 변화를 단계별로 표현</li>
<li>리플 그래프 (Ridge Plot): 여러 분포를 시간에 따라 중첩하여 표현, 분포의 변화를 시각적으로 파악하기 좋음</li>
</ul></li>
<li>시계열 데이터의 처리
<ul>
<li>시간 정보 추출</li>
<li>시간 기간 연산</li>
<li>시간 반올림</li>
<li>시간 그룹핑 (주간, 월간 합계 또는 평균)</li>
<li>시간 저가 고가 종가 (OHLC)</li>
<li>시간 롤링 (3일 평균, 5일 합계)</li>
<li>필터링</li>
<li>기간별 증감량</li>
<li>기간별 비중 백분율</li>
<li>기간별 누적 합계</li>
<li>동 기간별 plot</li>
<li>결측치 처리 (Handling Missing Values)
<ul>
<li>선형 보간법 (Linear Interpolation)</li>
<li>전방/후방 채우기 (Forward/Backward Fill)</li>
<li>평균/중앙값 대체 (Mean/Median Imputation)</li>
<li>시계열 예측 모델을 이용한 대체</li>
</ul></li>
<li>이상치 처리 (Outlier Detection and Treatment)
<ul>
<li>Z-score 방법</li>
<li>IQR (Interquartile Range) 방법</li>
<li>이동 평균을 이용한 방법</li>
<li>시계열 분해를 이용한 방법</li>
</ul></li>
<li>정규화 및 표준화 (Normalization and Standardization)
<ul>
<li>Min-Max 정규화</li>
<li>Z-score 표준화</li>
<li>로그 변환 (Log Transformation)</li>
</ul></li>
<li>리샘플링 (Resampling)
<ul>
<li>업샘플링 (Upsampling): 더 높은 빈도로 변환</li>
<li>다운샘플링 (Downsampling): 더 낮은 빈도로 변환</li>
</ul></li>
<li>시간 정렬 (Time Alignment)
<ul>
<li>시간대 조정</li>
<li>날짜/시간 형식 통일</li>
</ul></li>
<li>차분 (Differencing)
<ul>
<li>1차 차분</li>
<li>계절 차분</li>
</ul></li>
<li>이동 평균 (Moving Average)
<ul>
<li>단순 이동 평균</li>
<li>가중 이동 평균</li>
<li>지수 이동 평균</li>
</ul></li>
<li>윈도잉 (Windowing)
<ul>
<li>고정 윈도우</li>
<li>슬라이딩 윈도우</li>
</ul></li>
<li>트렌드 제거 (Detrending)
<ul>
<li>선형 트렌드 제거</li>
<li>비선형 트렌드 제거</li>
</ul></li>
<li>계절성 조정 (Seasonal Adjustment)
<ul>
<li>계절 분해</li>
<li>X-11, X-12-ARIMA 방법</li>
</ul></li>
<li>주기성 변환 (Periodicity Transformation)
<ul>
<li>푸리에 변환 (Fourier Transform)</li>
<li>웨이블릿 변환 (Wavelet Transform)</li>
</ul></li>
<li>특성 추출 (Feature Extraction)
<ul>
<li>통계적 특성 (평균, 분산, 왜도, 첨도 등)</li>
<li>주파수 도메인 특성</li>
<li>시간 도메인 특성</li>
</ul></li>
<li>차원 축소 (Dimensionality Reduction)
<ul>
<li>주성분 분석 (PCA)</li>
<li>동적 시간 워핑 (DTW)</li>
</ul></li>
<li>데이터 증강 (Data Augmentation)
<ul>
<li>시간 이동 (Time Shifting)</li>
<li>스케일링 (Scaling)</li>
<li>노이즈 추가 (Adding Noise)</li>
</ul></li>
</ul></li>
<li>시계열 데이터 기초 개념
<ul>
<li>정상성(stationarity)과 비정상성(non-stationarity)</li>
<li>지연과 차분 (Lag and Differencing)</li>
<li>ACF와 PACF (ACF and PACF - Autocorrelation Function and Partial Autocorrelation Function)</li>
<li>적합값과 잔차 (Fitted Values and Residuals)</li>
<li>백색잡음 (White Noise)</li>
<li>시계열 분해 (Time Series Decomposition)</li>
<li>정상성 테스트 (Stationarity Test)</li>
<li>계절성 검정 (Seasonality Test)</li>
</ul></li>
<li>시계열 예측 모델
<ul>
<li>단순 모델 (Simple Models)
<ul>
<li>단순 평균 (Simple Average)</li>
<li>나이브 방법 (Naive Method)</li>
<li>계절성 나이브 방법 (Seasonal Naive Method)</li>
<li>드리프트 방법 (Drift Method)</li>
</ul></li>
<li>지수 평활법 (Exponential Smoothing)
<ul>
<li>단순 지수 평활법 (Simple Exponential Smoothing)</li>
<li>홀트의 선형 추세 방법 (Holt’s Linear Trend Method)</li>
<li>홀트-윈터스 방법 (Holt-Winters Method)</li>
</ul></li>
<li>회귀 기반 모델 (Regression-based Models)
<ul>
<li>선형 회귀 (Linear Regression)</li>
<li>다항 회귀 (Polynomial Regression)</li>
<li>동적 회귀 (Dynamic Regression)</li>
</ul></li>
<li>자기회귀 모델 (Autoregressive Models)
<ul>
<li>AR (AutoRegressive) 모델</li>
<li>MA (Moving Average) 모델</li>
<li>ARMA (AutoRegressive Moving Average) 모델</li>
<li>ARIMA (AutoRegressive Integrated Moving Average) 모델</li>
<li>SARIMA (Seasonal ARIMA) 모델</li>
<li>ARIMAX (ARIMA with eXogenous variables) 모델</li>
</ul></li>
<li>고급 통계 모델 (Advanced Statistical Models)
<ul>
<li>VAR (Vector AutoRegression)</li>
<li>VARMA (Vector AutoRegressive Moving Average)</li>
<li>GARCH (Generalized AutoRegressive Conditional Heteroskedasticity)</li>
<li>상태 공간 모델 (State Space Models)</li>
</ul></li>
<li>기계학습 모델 (Machine Learning Models)
<ul>
<li>랜덤 포레스트 (Random Forest)</li>
<li>서포트 벡터 머신 (Support Vector Machine)</li>
<li>K-최근접 이웃 (K-Nearest Neighbors)</li>
<li>그래디언트 부스팅 (Gradient Boosting)</li>
</ul></li>
<li>딥러닝 모델 (Deep Learning Models)
<ul>
<li>RNN (Recurrent Neural Networks)</li>
<li>LSTM (Long Short-Term Memory)</li>
<li>GRU (Gated Recurrent Units)</li>
<li>CNN (Convolutional Neural Networks) for Time Series</li>
<li>Transformer 모델</li>
</ul></li>
<li>혼합 및 앙상블 모델 (Hybrid and Ensemble Models)
<ul>
<li>TBATS (Trigonometric, Box-Cox transform, ARMA errors, Trend, and Seasonal components)</li>
<li>Prophet (Facebook’s Time Series Forecasting Model)</li>
<li>앙상블 방법 (여러 모델의 조합)</li>
</ul></li>
<li>베이지안 모델 (Bayesian Models)
<ul>
<li>베이지안 구조적 시계열 모델 (Bayesian Structural Time Series)</li>
<li>동적 선형 모델 (Dynamic Linear Models)</li>
</ul></li>
<li>특수 목적 모델 (Specialized Models)
<ul>
<li>크로스 섹션 시계열 모델 (Cross-sectional Time Series Models)</li>
<li>계층적 시계열 모델 (Hierarchical Time Series Models)</li>
<li>간헐적 수요 예측 모델 (Intermittent Demand Forecasting Models)</li>
</ul></li>
</ul></li>
<li>시계열 분석 frameworks
<ul>
<li>통계 기반 프레임워크
<ul>
<li>statsmodels (Python)</li>
<li>forecast (R)</li>
<li>SPSS Time Series Modeler</li>
</ul></li>
<li>머신러닝 기반 프레임워크
<ul>
<li>scikit-learn (Python)</li>
<li>MLlib (Apache Spark)</li>
<li>H2O.ai</li>
</ul></li>
<li>딥러닝 기반 프레임워크
<ul>
<li>TensorFlow (Google)</li>
<li>PyTorch (Facebook)</li>
<li>Keras</li>
</ul></li>
<li>시계열 특화 프레임워크
<ul>
<li>Prophet (Facebook)</li>
<li>tslearn (Python)</li>
<li>tsfresh (Python)</li>
</ul></li>
<li>통합 분석 플랫폼
<ul>
<li>Darts (Python)</li>
<li>GluonTS (Amazon)</li>
<li>Kats (Facebook)</li>
</ul></li>
<li>비즈니스 인텔리전스 도구
<ul>
<li>Tableau</li>
<li>Power BI (Microsoft)</li>
<li>QlikView</li>
</ul></li>
<li>클라우드 기반 서비스
<ul>
<li>Amazon Forecast</li>
<li>Google Cloud AI Platform</li>
<li>Azure Time Series Insights</li>
</ul></li>
<li>특수 목적 프레임워크
<ul>
<li>pmdarima (Python, ARIMA 모델링)</li>
<li>PyFlux (Python, 베이지안 추론)</li>
<li>BEAST (R, 베이지안 시계열 분석)</li>
</ul></li>
<li>실시간 처리 프레임워크
<ul>
<li>Apache Flink</li>
<li>Apache Kafka Streams</li>
<li>Streamz (Python)</li>
</ul></li>
<li>시각화 특화 프레임워크
<ul>
<li>Plotly</li>
<li>Bokeh</li>
<li>Altair</li>
</ul></li>
</ul></li>
</ul>


</section>

 ]]></description>
  <guid>kmink3225.netlify.app/docs/blog/posts/time_series/</guid>
  <pubDate>Sun, 07 Jul 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>OCR</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/image_process/03.operator_basic.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="dag-basic" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> DAG Basic</h1>
<pre class="{markdown}"><code>from PIL import Image
import pytesseract

# Load the image from file
image_path = '/mnt/data/캡처.PNG'
image = Image.open(image_path)

# Perform OCR using tesseract
extracted_text = pytesseract.image_to_string(image, lang='kor')

extracted_text
</code></pre>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/image_process/03.operator_basic.html</guid>
  <pubDate>Thu, 14 Mar 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Linux_Error_Fix_rm_cannot_remove_files_busy</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="error" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Error</h1>
<p><code>rm: cannot remove 'files': Device or resource busy</code></p>
</section>
<section id="how-to-solve" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> How to Solve</h1>
<ul>
<li>파일이나 디렉토리를 사용 중인 프로세스 식별: <code>lsof</code> 명령어를 사용하여 어떤 프로세스가 파일이나 디렉토리를 사용하고 있는지 찾을 수 있다. 명령어는 <code>lsof | grep 'files'</code> 실행. 이렇게 하면 삭제하려는 항목을 사용하고 있는 프로세스가 나열된다.</li>
<li>프로세스 종료: 파일이나 디렉토리를 사용하는 프로세스를 찾았다면, 적절한 방법(예: 파일을 사용하는 프로그램 종료)으로 그 프로세스를 정상적으로 종료할 수 있다. 만약 그것이 불가능하거나 프로세스가 응답하지 않는 경우, 프로세스 ID 뒤에 <code>kill</code> 명령어를 사용하여 강제로 종료할 수 있다. 이 방법을 사용할 때는 데이터 손실이나 시스템 불안정을 초래할 수 있으므로 주의해야 함.</li>
<li>파일 시스템 마운트 해제: 디렉토리가 마운트된 파일 시스템의 일부라면, 삭제하기 전에 마운트를 해제해야 할 수 있다. 마운트 지점이나 장치 이름 뒤에 <code>umount</code> 명령어를 사용. 마운트 해제하기 전에 어떤 프로세스도 파일 시스템을 사용하고 있지 않은지 확인.</li>
</ul>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Visitor Tracking</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/web/visitor_trancking.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="visitor-tracking-방문자-추적" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Visitor Tracking (방문자 추적)</h1>
<section id="google-analytics-활용" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="google-analytics-활용"><span class="header-section-number">1.1</span> Google Analytics 활용</h2>
<p>Quarto를 사용하여 만든 기술 블로그 웹사이트의 방문자 수를 추적하려면, 일반적으로 웹 분석 도구를 사용해야한다. 가장 널리 사용되는 도구 중 하나는 Google Analytics인데. Google Analytics를 사용하면 사이트 방문자 수, 페이지 뷰, 사용자 행동 등 다양한 통계를 확인할 수 있다.</p>
</section>
<section id="integrating-google-analytics-into-a-quarto-website" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="integrating-google-analytics-into-a-quarto-website"><span class="header-section-number">1.2</span> Integrating Google Analytics into a Quarto Website</h2>
<ul>
<li>Google Analytics 계정 생성 및 설정
<ul>
<li>Google Analytics 계정 생성 <a href="https://marketingplatform.google.com/about/analytics/">링크</a></li>
<li>새로운 프로퍼티(Property)를 생성 <a href="https://support.google.com/sites/answer/97459">링크</a><br>
</li>
<li>웹사이트에 대한 정보를 입력하고 추적 ID를 수령</li>
</ul></li>
<li>추적 코드를 웹사이트에 추가
<ul>
<li>Google Analytics에서 제공하는 추적 코드를 복사</li>
<li>Quarto 웹사이트의 HTML 템플릿에 이 추적 코드를 추가</li>
<li>이 코드는 보통

태그 안에 넣음</li>
</ul></li>
<li>Quarto 프로젝트에 코드 추가
<ul>
<li>Quarto 프로젝트의 _quarto.yml 파일이나 해당 HTML 템플릿 파일에 Google Analytics 스크립트를 추가</li>
</ul></li>
<li>웹사이트 업데이트 및 배포
<ul>
<li>rendering을 하여 변경사항을 웹사이트에 적용하고 재배포</li>
</ul></li>
<li>Google Analytics에서 데이터 확인
<ul>
<li>Google Analytics Dashboard에서 웹사이트의 트래픽과 관련 데이터를 확인</li>
</ul></li>
</ul>
<p><a href="https://quarto.org/docs/websites/website-tools.html#google-analytics">참고: quarto official website &gt;&gt; guide &gt;&gt; websites &gt;&gt; webiste tools</a></p>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/web/visitor_trancking.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Website Monetization</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/web/website_monetization.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="website-monetization-수익화" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Website Monetization (수익화)</h1>
<section id="google-adsense-활용" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="google-adsense-활용"><span class="header-section-number">1.1</span> Google AdSense 활용</h2>
<ul>
<li>Google AdSense 계정 생성 및 승인 받기
<ul>
<li>Google AdSense 웹사이트에 방문하여 계정을 만듭니다.</li>
<li>계정이 승인되기를 기다린다 (이 과정은 몇 일이 걸릴 수 있음)</li>
</ul></li>
<li>AdSense 코드 생성
<ul>
<li>Google AdSense 계정이 승인되면, 광고를 생성하고 광고 코드를 받는다.</li>
<li>‘광고’ 섹션에서 새 광고 단위를 생성하고, 광고 스타일과 크기를 설정</li>
<li>생성된 광고 코드를 복사</li>
</ul></li>
<li>Quarto 웹사이트에 코드 추가
<ul>
<li>Quarto 프로젝트의 해당 HTML 파일을 연다.</li>
<li>보통은 _output.yml 파일이나, 특정 레이아웃 파일일 수 있다.</li>
<li>HTML의

태그 안에 AdSense 코드를 붙여넣는다. 이는 전역적으로 광고를 관리하기 위함이다.</li>
<li>또는, 특정 페이지나 섹션에 광고를 표시하고 싶다면 해당 위치에 광고 코드를 삽입</li>
</ul></li>
<li>웹사이트 업데이트 및 배포
<ul>
<li>변경 사항을 저장하고 웹사이트를 다시 배포</li>
<li>일정 시간이 지나면, 웹사이트에 광고가 표시되기 시작</li>
</ul></li>
<li>성능 모니터링
<ul>
<li>Google AdSense 계정에서 광고 성능을 주기적으로 확인</li>
<li>광고 위치나 스타일을 조정하여 최적화할 수 있다.</li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/web/website_monetization.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Public Data</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/public_data/</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="public-data" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Public data</h1>
<section id="topic" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="topic"><span class="header-section-number">1.1</span> Topic</h2>
<ul>
<li>Government and Health Data: datasets related to sociology, economic development, education, health care, and more. datasets from the Indian Government, European Union, UK Government, US Government, and US Bureau of Labor Statistics are typically well-maintained and comprehensive.</li>
<li>Socioeconomic Data by World Bodies: Organizations like the United Nations, UNICEF, World Health Organization, World Bank, IMF, and the Asian Development Bank provide extensive datasets.</li>
<li>Financial Data: Datasets from the National Stock Exchange of India, Reserve Bank of India, NASDAQ, and the New York Stock Exchange offer historical trading data (time-series analysis, stock market trends, and algorithmic trading models).</li>
<li>Computer Vision Datasets: datasets like ImageNet, COCO, Google’s Open Image Dataset, and LSUN.</li>
<li>Natural Language Processing (NLP) Datasets: datasets for voice and speech recognition, language translation, and other linguistics-related tasks</li>
</ul>
</section>
<section id="api" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="api"><span class="header-section-number">1.2</span> API</h2>
<ul>
<li>Google Cloud Datasets: datasets hosted on Google Cloud</li>
<li>Microsoft Azure Open Datasets: their curated datasets working within the Azure ecosystem for your machine learning projects.</li>
<li>Kaggle: data for its machine learning competitions</li>
<li>US Government’s Data (data.gov): the US government data.</li>
<li>World Bank Data: economic and development datasets.</li>
<li>Quandl: financial and economic dataset (time-series data)</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/public_data/</guid>
  <pubDate>Sun, 31 Dec 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Conceptual Data Modeling</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/conceptual_data_modeling.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="database-system" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Database System</h1>
<section id="database의-주요-구성-요소" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="database의-주요-구성-요소"><span class="header-section-number">1.1</span> Database의 주요 구성 요소</h2>
<section id="데이터-실제로-저장되는-정보로-예를-들어-고객-정보-주문-내역-제품-세부-사항-등이-있다." class="level3" data-number="1.1.1">
<h3 data-number="1.1.1" class="anchored" data-anchor-id="데이터-실제로-저장되는-정보로-예를-들어-고객-정보-주문-내역-제품-세부-사항-등이-있다."><span class="header-section-number">1.1.1</span> 데이터: 실제로 저장되는 정보로, 예를 들어 고객 정보, 주문 내역, 제품 세부 사항 등이 있다.</h3>
</section>
<section id="스키마schema-데이터베이스의-구조를-정의하는-청사진으로-테이블-열-데이터-타입-제약-조건-등을-포함." class="level3" data-number="1.1.2">
<h3 data-number="1.1.2" class="anchored" data-anchor-id="스키마schema-데이터베이스의-구조를-정의하는-청사진으로-테이블-열-데이터-타입-제약-조건-등을-포함."><span class="header-section-number">1.1.2</span> 스키마(Schema): 데이터베이스의 구조를 정의하는 청사진으로, 테이블, 열, 데이터 타입, 제약 조건 등을 포함.</h3>
</section>
<section id="dbms-database-management-system-데이터베이스를-관리하고-조작하는-소프트웨어-시스템으로-데이터-저장-검색-수정-삭제-등의-기능을-제공합니다." class="level3" data-number="1.1.3">
<h3 data-number="1.1.3" class="anchored" data-anchor-id="dbms-database-management-system-데이터베이스를-관리하고-조작하는-소프트웨어-시스템으로-데이터-저장-검색-수정-삭제-등의-기능을-제공합니다."><span class="header-section-number">1.1.3</span> DBMS (Database Management System): 데이터베이스를 관리하고 조작하는 소프트웨어 시스템으로, 데이터 저장, 검색, 수정, 삭제 등의 기능을 제공합니다.</h3>
</section>
<section id="쿼리-언어-데이터베이스와-상호-작용하기-위한-언어로-sqlstructured-query-language이-가장-널리-사용됩니다." class="level3" data-number="1.1.4">
<h3 data-number="1.1.4" class="anchored" data-anchor-id="쿼리-언어-데이터베이스와-상호-작용하기-위한-언어로-sqlstructured-query-language이-가장-널리-사용됩니다."><span class="header-section-number">1.1.4</span> 쿼리 언어: 데이터베이스와 상호 작용하기 위한 언어로, SQL(Structured Query Language)이 가장 널리 사용됩니다.</h3>
</section>
<section id="인덱스index-데이터-검색-속도를-높이기-위해-사용되는-구조로-데이터의-특정-속성에-대한-빠른-접근을-지원합니다." class="level3" data-number="1.1.5">
<h3 data-number="1.1.5" class="anchored" data-anchor-id="인덱스index-데이터-검색-속도를-높이기-위해-사용되는-구조로-데이터의-특정-속성에-대한-빠른-접근을-지원합니다."><span class="header-section-number">1.1.5</span> 인덱스(Index): 데이터 검색 속도를 높이기 위해 사용되는 구조로, 데이터의 특정 속성에 대한 빠른 접근을 지원합니다.</h3>
</section>
</section>
<section id="활용-예시" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="활용-예시"><span class="header-section-number">1.2</span> 활용 예시</h2>
<p>비즈니스 운영: 고객 관리, 재고 관리, 주문 처리 등 다양한 비즈니스 프로세스를 지원합니다. 웹 애플리케이션: 사용자 정보, 콘텐츠 관리, 트랜잭션 데이터 등을 저장하고 관리합니다. 분석 및 보고: 데이터 웨어하우스를 통해 대규모 데이터 분석 및 비즈니스 인텔리전스 활동을 지원합니다.</p>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/conceptual_data_modeling.html</guid>
  <pubDate>Sat, 01 Jul 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Database의 기능</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/database.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="database" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Database</h1>
<ul>
<li>데이터베이스(database)는 구조화된 데이터의 집합체 (데이터 저장소)</li>
<li>특정 목적을 위해 체계적으로 저장되고 관리되는 데이터의 모임이다.</li>
<li>데이터베이스는 데이터를 효율적으로 저장하고 검색할 수 있도록 설계되었으며,</li>
<li>다양한 응용 프로그램과 시스템에서 데이터를 쉽게 접근하고 조작할 수 있도록 지원하는 역할을 한다.</li>
</ul>
</section>
<section id="database의-특성" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Database의 특성</h1>
<section id="구조화된-데이터" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="구조화된-데이터"><span class="header-section-number">2.1</span> 구조화된 데이터</h2>
<p>데이터베이스는 데이터를 표(table), 행(row), 열(column)과 같은 형태로 조직하여 구조화된 방식으로 저장한다.</p>
</section>
<section id="데이터-무결성" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="데이터-무결성"><span class="header-section-number">2.2</span> 데이터 무결성</h2>
<p>데이터베이스는 데이터를 정확하고 일관되게 유지하기 위해 다양한 무결성 제약 조건을 적용한다.</p>
</section>
<section id="데이터-접근성" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="데이터-접근성"><span class="header-section-number">2.3</span> 데이터 접근성</h2>
<p>데이터베이스 관리 시스템(DBMS)은 사용자가 데이터를 쉽게 접근하고 검색할 수 있도록 다양한 쿼리 언어(예: SQL)를 제공한다.</p>
</section>
<section id="보안" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="보안"><span class="header-section-number">2.4</span> 보안</h2>
<p>데이터베이스는 데이터에 대한 접근 권한을 제어하여 데이터의 보안을 유지한다.</p>
</section>
<section id="동시성-다중-사용자-지원" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="동시성-다중-사용자-지원"><span class="header-section-number">2.5</span> 동시성 (다중 사용자 지원)</h2>
<p>데이터베이스는 여러 사용자가 동시에 데이터를 접근하고 수정할 수 있도록 지원한다.</p>
</section>
</section>
<section id="database-system은-어떤-경우에-사용해야하나" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Database System은 어떤 경우에 사용해야하나?</h1>
<section id="데이터베이스가-필요한-경우" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="데이터베이스가-필요한-경우"><span class="header-section-number">3.1</span> 데이터베이스가 필요한 경우</h2>
<section id="대량의-데이터-관리가-필요할-때" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1" class="anchored" data-anchor-id="대량의-데이터-관리가-필요할-때"><span class="header-section-number">3.1.1</span> 대량의 데이터 관리가 필요할 때</h3>
<ul>
<li>수천에서 수백만 건 이상의 데이터를 효율적으로 저장하고 검색해야 할 때 데이터베이스가 필요하다.</li>
<li>예시: 대규모 전자상거래 웹사이트의 상품 목록, 고객 정보, 주문 내역 관리.</li>
</ul>
</section>
<section id="데이터-일관성과-무결성-유지를-해야할-때" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2" class="anchored" data-anchor-id="데이터-일관성과-무결성-유지를-해야할-때"><span class="header-section-number">3.1.2</span> 데이터 일관성과 무결성 유지를 해야할 때</h3>
<ul>
<li>데이터를 여러 사용자가 동시에 접근하고 수정하는 환경에서 데이터의 일관성과 무결성을 유지해야 할 때 데이터베이스가 필요하다</li>
<li>예시: 은행 시스템에서 계좌 거래 내역 관리.</li>
</ul>
</section>
<section id="복잡한-쿼리와-데이터-분석을-해야할-때" class="level3" data-number="3.1.3">
<h3 data-number="3.1.3" class="anchored" data-anchor-id="복잡한-쿼리와-데이터-분석을-해야할-때"><span class="header-section-number">3.1.3</span> 복잡한 쿼리와 데이터 분석을 해야할 때</h3>
<ul>
<li>데이터베이스 시스템은 이를 효율적으로 수행할 수 있는 도구와 최적화된 알고리즘을 제공한다.</li>
<li>예시: 마케팅 데이터를 분석하여 고객 행동 패턴을 추출하는 경우.</li>
</ul>
</section>
<section id="데이터-보안-및-접근-제어를-해야할-때" class="level3" data-number="3.1.4">
<h3 data-number="3.1.4" class="anchored" data-anchor-id="데이터-보안-및-접근-제어를-해야할-때"><span class="header-section-number">3.1.4</span> 데이터 보안 및 접근 제어를 해야할 때</h3>
<ul>
<li>민감한 데이터를 저장하고, 사용자별 접근 권한을 관리해야 할 때 데이터베이스가 필요하다.</li>
<li>예시: 의료 기록 시스템에서 환자 정보 관리.</li>
</ul>
</section>
<section id="데이터-백업-및-복구가-필요할-때" class="level3" data-number="3.1.5">
<h3 data-number="3.1.5" class="anchored" data-anchor-id="데이터-백업-및-복구가-필요할-때"><span class="header-section-number">3.1.5</span> 데이터 백업 및 복구가 필요할 때</h3>
<ul>
<li>데이터 손실에 대비하여 정기적인 백업과 복구 기능이 필요할 때 데이터베이스가 유용하다.</li>
<li>예시: 기업의 중요한 문서와 기록 보관.</li>
</ul>
</section>
</section>
<section id="데이터베이스가-필요하지-않은-경우" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="데이터베이스가-필요하지-않은-경우"><span class="header-section-number">3.2</span> 데이터베이스가 필요하지 않은 경우</h2>
<p>사실, 위의 데이터베이스가 필요한 경우에 해당되지 않는 경우 소프트웨어 알고리즘만으로 왠만하면 처리가 가능한 경우</p>
<section id="데이터의-양이-적고-단순히-메모리-내에서-관리할-수-있는-경우" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1" class="anchored" data-anchor-id="데이터의-양이-적고-단순히-메모리-내에서-관리할-수-있는-경우"><span class="header-section-number">3.2.1</span> 데이터의 양이 적고, 단순히 메모리 내에서 관리할 수 있는 경우</h3>
<ul>
<li>간단한 게임의 점수 기록</li>
<li>소규모 개인 프로젝트 데이터 관리.</li>
<li>전자식 개폐장치의 비밀번호 관리
<ul>
<li>Data가 필요하지만 입력받은 번호를 저장해놔야 정답 비밀번호와 비교 가능 하지만 이것 역시 알고리즘 프로그램 회로로 대체 가능. 한명이 한번에 번호를 눌러 정답과 비교. DB가 필요하지 않음</li>
</ul></li>
</ul>
</section>
<section id="데이터-일관성이나-동시-접근에-대한-요구가-낮아-단순한-파일-시스템이나-메모리-구조로-충분한-경우" class="level3" data-number="3.2.2">
<h3 data-number="3.2.2" class="anchored" data-anchor-id="데이터-일관성이나-동시-접근에-대한-요구가-낮아-단순한-파일-시스템이나-메모리-구조로-충분한-경우"><span class="header-section-number">3.2.2</span> 데이터 일관성이나 동시 접근에 대한 요구가 낮아 단순한 파일 시스템이나 메모리 구조로 충분한 경우</h3>
<ul>
<li>개인용 메모 애플리케이션.</li>
</ul>
</section>
<section id="복잡한-쿼리나-데이터-관계가-필요-없는-단순한-데이터-저장-및-검색" class="level3" data-number="3.2.3">
<h3 data-number="3.2.3" class="anchored" data-anchor-id="복잡한-쿼리나-데이터-관계가-필요-없는-단순한-데이터-저장-및-검색"><span class="header-section-number">3.2.3</span> 복잡한 쿼리나 데이터 관계가 필요 없는 단순한 데이터 저장 및 검색</h3>
<ul>
<li>설정 파일이나 캐시 데이터 저장.</li>
</ul>
</section>
<section id="임시로-사용되는-데이터로-지속적인-저장이-필요하지-않은-경우" class="level3" data-number="3.2.4">
<h3 data-number="3.2.4" class="anchored" data-anchor-id="임시로-사용되는-데이터로-지속적인-저장이-필요하지-않은-경우"><span class="header-section-number">3.2.4</span> 임시로 사용되는 데이터로, 지속적인 저장이 필요하지 않은 경우</h3>
<ul>
<li>실시간 데이터 처리 애플리케이션에서의 중간 계산 결과</li>
<li>신호등의 램프 제어: 소규모 Data 필요(신호의 상태를 기억하고 있어야 다음 신호 상태를 결정할 수 있음), 하지만 알고리즘으로 관리할 수 있는 프로그램 회로가 기능 대체 가능. 실질적으론 DB가 필요하지 않음</li>
</ul>
</section>
<section id="데이터-보안이-중요하지-않은-경우" class="level3" data-number="3.2.5">
<h3 data-number="3.2.5" class="anchored" data-anchor-id="데이터-보안이-중요하지-않은-경우"><span class="header-section-number">3.2.5</span> 데이터 보안이 중요하지 않은 경우</h3>
<ul>
<li>데이터 보안이 큰 우려사항이 아니며, 기본적인 접근 제어만 필요한 경우.</li>
<li>공개된 데이터를 사용하는 단순 웹 크롤러.</li>
</ul>
</section>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/database.html</guid>
  <pubDate>Sat, 01 Jul 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Data Modeling</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/introduction.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="motivation" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Motivation</h1>
<p>데이터 플랫폼은 data를 기반으로 플랫폼 생태계를 관리를 가능하게 하며 유저들의 needs관리와 경향 분석을 자동화할 수 있다. 구체적으로, 기업에겐 데이터를 수집, 저장, 처리, 분석 및 배포하여 비즈니스 의사결정 지원, 운영 효율성 향상, 고객 경험 개선, 비용 절감 및 혁신을 촉진하는 통합 시스템으로서 중요한 전략적 자산이 될 수 있다.</p>
<p>데이터 모델링은 이러한 플랫폼의 성공적인 구현과 운영에 필수적이며, 데이터를 효율적으로 구조화하고 관리하여 데이터의 무결성, 일관성 및 성능을 보장한다. 따라서 데이터 모델링과 데이터 플랫폼은 상호 보완적으로 작용하여 데이터 중심의 비즈니스 환경을 구축하고 기업의 경쟁력을 강화할 수 있다.</p>
<p>많은 한국의 기업은 미국의 기업보다 data platform의 이해와 도입이 한 박자 늦지만 data platform구축에 많은 노력을 기울이고 있다. 지금 다니고 있는 회사도 한창 data governance와 통계 플랫폼 구축에 힘을 쏟고 있지만 부서와의 의사소통, 체계, 문서 및 지식 부족으로 인해 상당한 난항을 겪고 있다. 이 블로깅을 통해 지식을 체계화하여 실무적 도움과 의사 소통에 도움이 되었으면 좋겠다.</p>
</section>
<section id="data-modeling" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Data Modeling</h1>
<ul>
<li><strong>데이터 모델링(data modeling)</strong>은 데이터를 구조화하고 체계적으로 조직화하는 과정이다.
<ul>
<li>즉, 데이터베이스 시스템 (Database System)에서 데이터를 어떻게 저장하고, 접근하며, 사용할지를 정의하는 데 중점을 둔다.</li>
</ul></li>
<li>나는 데이터 모델링이 데이터베이스 설계를 포함하는 상위 개념으로 이해하고 있다.</li>
<li>데이터 모델링이 데이터의 구조와 관계를 정의하는 전체 과정을 포괄한다면</li>
<li>데이터 모델링에서 얻은 정보를 바탕으로 데이터베이스 설계를 하여 데이터베이스 시스템의 논리적 및 물리적 구현에 중점을 둔다.</li>
<li>Data modeling과 DB design은 엄밀히 말하면 다르다곤 하지만 실무자들이나 많은 사람들은 혼용하고 있는 것 같아 보인다.</li>
</ul>
</section>
<section id="data-modeling의-단계" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Data Modeling의 단계</h1>
<section id="요구사항-수집-및-분석" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="요구사항-수집-및-분석"><span class="header-section-number">3.1</span> 요구사항 수집 및 분석</h2>
<ul>
<li>사용자의 요구사항을 수집하고 분석하여 어떤 데이터가 필요한지, 어떤 데이터 관계가 있는지를 이해한다.</li>
</ul>
</section>
<section id="개념적-데이터-모델링-conceptual-data-modeling" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="개념적-데이터-모델링-conceptual-data-modeling"><span class="header-section-number">3.2</span> 개념적 데이터 모델링 (Conceptual Data Modeling)</h2>
<ul>
<li>데이터베이스에 저장될 데이터의 개념적 구조를 정의한다.</li>
<li>개념적 모델은 보통 ERD(Entity-Relationship Diagram)와 같은 도구를 사용하여 엔티티(entity), 속성(attribute), 관계(relationship)를 시각적으로 표현한다.</li>
</ul>
</section>
<section id="논리적-데이터-모델링-logical-data-modeling" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="논리적-데이터-모델링-logical-data-modeling"><span class="header-section-number">3.3</span> 논리적 데이터 모델링 (Logical Data Modeling)</h2>
<ul>
<li>개념적 모델을 기반으로 데이터베이스의 논리적 구조를 정의한다.</li>
<li>이 단계에서는 데이터 타입, 관계, 키(key) 등을 포함한 데이터베이스 스키마를 설계한다.</li>
</ul>
</section>
<section id="물리적-데이터-모델링-physical-data-modeling" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="물리적-데이터-모델링-physical-data-modeling"><span class="header-section-number">3.4</span> 물리적 데이터 모델링 (Physical Data Modeling)</h2>
<ul>
<li>논리적 모델을 실제 데이터베이스 관리 시스템(DBMS)에서 구현 가능한 물리적 구조로 변환한다.</li>
<li>테이블, 인덱스, 파티션 등 데이터베이스의 물리적 요소를 설계한다.</li>
</ul>
</section>
<section id="데이터베이스-구현-및-관리" class="level2" data-number="3.5">
<h2 data-number="3.5" class="anchored" data-anchor-id="데이터베이스-구현-및-관리"><span class="header-section-number">3.5</span> 데이터베이스 구현 및 관리</h2>
<ul>
<li>물리적 모델을 실제 데이터베이스로 구현하고, 이를 유지 보수하며, 성능을 최적화한다.</li>
</ul>
<p>앞으로, Data Modeling의 단계를 구체적으로 이해하여 실무에 적용할 수 있는 염감을 얻도록 해보자.</p>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/data_modeling/introduction.html</guid>
  <pubDate>Fri, 30 Jun 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Pathlib Library</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/pathlib.html</link>
  <description><![CDATA[ 




<section id="pathlib" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="pathlib"><span class="header-section-number">1</span> pathlib</h2>
<p><code>pathlib</code>은 산재된 데이터를 체계적으로 관리하고, 데이터 분석이나 엔지니어링 작업을 수행할 때 매우 유용한 도구이다. 파일 시스템에서의 데이터 접근, 조작, 관리를 간결하고 효율적으로 할 수 있게 해주기 때문이다.</p>
<section id="pathlib-기능" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="pathlib-기능"><span class="header-section-number">1.1</span> <code>pathlib</code> 기능</h3>
<ul>
<li>경로 조작: 경로를 쉽게 조합하고, 분해하며, 변경할 수 있다.</li>
<li>파일 시스템 정보 조회: 파일의 존재 유무 확인, 파일 크기 조회, 수정 날짜 조회 등의 정보를 쉽게 얻을 수 있다.</li>
<li>파일 시스템 작업: 파일 또는 디렉토리 생성, 읽기, 쓰기, 이름 변경, 삭제 등의 작업을 할 수 다.</li>
<li>경로 탐색: 특정 패턴이나 조건에 맞는 파일을 경로 내에서 찾을 수 있다.</li>
</ul>
</section>
<section id="응용-상황" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="응용-상황"><span class="header-section-number">1.2</span> 응용 상황</h3>
<ol type="1">
<li>데이터 파일 구조화 및 접근
<ul>
<li>동적 경로 생성: 다양한 데이터 소스나 폴더 구조에 대한 동적 경로를 쉽게 생성할 수 있다. 예를 들어, 날짜별로 구분된 로그 파일을 처리할 때 <code>Path</code> 객체를 사용하여 해당 날짜의 경로를 쉽게 생성할 수 있다.</li>
<li>파일 탐색: 특정 패턴이나 조건에 맞는 파일들을 <code>glob</code> 또는 <code>rglob</code> 메소드를 사용하여 쉽게 찾을 수 있다. 이는 분석 대상 파일을 자동으로 식별하는 데 유용하다.</li>
</ul></li>
<li>데이터 파일 읽기 및 쓰기 작업
<ul>
<li>파일 읽기/쓰기: <code>pathlib</code>을 사용하면 파일을 열고 읽거나 쓰는 작업을 직관적으로 수행할 수 있다. <code>Path</code> 객체의 <code>read_text</code>, <code>write_text</code>, <code>read_bytes</code>, <code>write_bytes</code> 메소드를 활용하여 파일 내용을 쉽게 처리할 수 있다.</li>
</ul></li>
<li>파일 및 디렉토리 관리
<ul>
<li>파일 생성 및 삭제: <code>touch</code> 메소드로 새 파일을 생성하거나, <code>unlink</code> 메소드로 파일을 삭제할 수 있다.</li>
<li>디렉토리 생성 및 삭제: 생성에는 <code>mkdir</code> 메소드를, 삭제에는 <code>rmdir</code> 메소드를 사용할 수 있다.</li>
<li>경로 유효성 검사: 파일이나 디렉토리의 존재 여부를 확인하고, 경로가 파일인지 디렉토리인지 등의 속성을 검사할 수 있다.</li>
</ul></li>
<li>플랫폼 독립적 경로 처리
<ul>
<li>운영 체제 호환성: <code>pathlib</code>은 윈도우, 맥, 리눅스 등 다양한 운영 체제에서 동일하게 작동하므로, 코드의 이식성이 향상된다.</li>
</ul></li>
</ol>
</section>
<section id="example" class="level3" data-number="1.3">
<h3 data-number="1.3" class="anchored" data-anchor-id="example"><span class="header-section-number">1.3</span> Example</h3>
<ul>
<li>동적 경로 생성 예시</li>
</ul>
<p>날짜별 로그 파일이 저장된 디렉토리 구조를 가정하고, 특정 날짜에 해당하는 로그 파일의 경로를 동적으로 생성하는 방법.</p>
<div id="879eccdf" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 현재 날짜를 기준으로 경로 생성</span></span>
<span id="cb1-4">current_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-5">log_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./logs/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 해당 날짜의 로그 디렉토리가 없다면 생성</span></span>
<span id="cb1-8">log_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예시 로그 파일 경로</span></span>
<span id="cb1-11">log_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error.log"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"오늘 날짜의 로그 파일 경로: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>파일 탐색 예시
<ul>
<li><code>glob</code> 메소드를 사용하여 특정 패턴(예: 모든 <code>.txt</code> 파일)에 맞는 파일들을 탐색하는 방법</li>
<li><code>rglob</code>는 현재 디렉토리뿐만 아니라 모든 하위 디렉토리에서도 탐색을 수행</li>
</ul></li>
</ul>
<div id="83467b03" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 현재 디렉토리의 모든 .txt 파일 탐색</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> txt_file <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.txt"</span>):</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found text file: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>txt_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 현재 디렉토리 및 모든 하위 디렉토리의 .txt 파일 탐색</span></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> txt_file <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>).rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.txt"</span>):</span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found text file in current and subdirectories: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>txt_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .csv 파일 탐색</span></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.csv"</span>):</span>
<span id="cb2-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"CSV 파일 처리: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 읽기 및 처리</span></span>
<span id="cb2-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_dir.iterdir():</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> file_path.is_file() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> file_path.suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>:</span>
<span id="cb2-16">        content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_path.read_text()</span>
<span id="cb2-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 내용 처리</span></span>
<span id="cb2-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> 파일의 내용 처리"</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>파일 읽기/쓰기</li>
</ul>
<div id="dce0d4b6" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 텍스트 파일 경로 생성</span></span>
<span id="cb3-2">text_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./example.txt"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 텍스트 파일 쓰기</span></span>
<span id="cb3-5">text_file_path.write_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, pathlib! This is a text file."</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 텍스트 파일 읽기</span></span>
<span id="cb3-8">text_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_file_path.read_text()</span>
<span id="cb3-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text file content:"</span>, text_content)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 바이너리 파일 경로 생성</span></span>
<span id="cb3-12">binary_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.bin"</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 바이너리 파일 쓰기 (예제 데이터로 'Hello, pathlib!' 문자열의 바이트를 사용)</span></span>
<span id="cb3-15">binary_file_path.write_bytes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"Hello, pathlib! This is a binary file."</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 바이너리 파일 읽기</span></span>
<span id="cb3-18">binary_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> binary_file_path.read_bytes()</span>
<span id="cb3-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Binary file content:"</span>, binary_content)</span></code></pre></div>
</details>
</div>
<ul>
<li>파일 생성 및 삭제</li>
</ul>
<div id="8fc0efbc" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새 파일 생성</span></span>
<span id="cb4-2">new_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./new_file.txt"</span>)</span>
<span id="cb4-3">new_file.touch()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일이 존재하지 않으면 생성</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 존재 여부 확인</span></span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_file.exists():</span>
<span id="cb4-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>new_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> exists."</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 삭제</span></span>
<span id="cb4-10">new_file.unlink()</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 존재 여부 재확인</span></span>
<span id="cb4-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> new_file.exists():</span>
<span id="cb4-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>new_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has been deleted."</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>디렉토리 생성 및 삭제</li>
</ul>
<div id="d64d159b" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새 디렉토리 생성</span></span>
<span id="cb5-2">new_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./new_directory"</span>)</span>
<span id="cb5-3">new_dir.mkdir(parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 디렉토리가 존재하지 않으면 생성, 이미 있으면 오류 발생하지 않음</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 디렉토리 존재 여부 확인</span></span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_dir.exists():</span>
<span id="cb5-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>new_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> exists."</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 디렉토리 삭제</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주의: rmdir()는 디렉토리가 비어 있을 때만 사용 가능</span></span>
<span id="cb5-11">new_dir.rmdir()</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 디렉토리 존재 여부 재확인</span></span>
<span id="cb5-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> new_dir.exists():</span>
<span id="cb5-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>new_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has been deleted."</span>)</span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 현재 디렉토리에 데이터 파일 폴더 생성</span></span>
<span id="cb5-18">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.cwd() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_files"</span></span>
<span id="cb5-19">data_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li><code>parents=True</code>는 상위 디렉토리가 없는 경우에도 필요한 모든 상위 디렉토리를 함께 생성하라는 의미이다. 예를 들어, <code>/a/b/c/d</code>와 같은 디렉토리를 만들고 싶지만, <code>/a</code>, <code>/a/b</code>, <code>/a/b/c</code> 디렉토리가 아직 없을 때:
<ul>
<li><code>parents=False</code> (기본값)로 설정하고 <code>/a/b/c/d</code> 디렉토리를 생성하려고 하면, 상위 디렉토리가 없기 때문에 <code>FileNotFoundError</code> 오류가 발생.</li>
<li><code>parents=True</code>로 설정하면, Python은 먼저 <code>/a</code>, 그 다음 <code>/a/b</code>, <code>/a/b/c</code>를 차례로 생성한 후, 마지막으로 <code>/a/b/c/d</code>를 생성한다. 즉, 지정된 경로에 필요한 모든 상위 디렉토리를 자동으로 생성해준다.</li>
</ul></li>
</ul>
<div id="90ed368a" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 상위 디렉토리가 없는 깊은 경로 설정</span></span>
<span id="cb6-2">deep_directory_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./a/b/c/d"</span>)</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모든 필요한 상위 디렉토리와 함께 디렉토리 생성</span></span>
<span id="cb6-4">deep_directory_path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li><p><code>exist_ok=True</code>는 지정된 경로에 디렉토리(폴더)를 생성하는 옵션이다. 이 옵션을 True로 설정하면, 만약 생성하려는 디렉토리가 이미 존재하는 경우에도 오류를 발생시키지 않고, 해당 명령을 무시한다. 즉, 해당 디렉토리의 존재 여부와 상관없이 프로그램이 계속 실행될 수 있도록 한다. <code>exist_ok</code> 매개변수의 기본값은 <code>False</code> 이다. 따라서, <code>exist_ok</code>를 명시적으로 지정하지 않고 디렉토리를 생성하려 할 때 해당 디렉토리가 이미 존재한다면, <code>FileExistsError</code>가 발생 및 프로그램이 중단된다.</p></li>
<li><p>이 옵션들을 사용하면, 스크립트의 안정성을 높이고, 디렉토리가 이미 존재하는 상황에서도 원활하게 코드를 실행할 수 있다.</p></li>
<li><p>경로 유효성 검사</p></li>
</ul>
<div id="7d0a76e1" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 임의의 파일 및 디렉토리 경로</span></span>
<span id="cb7-2">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.txt"</span>)</span>
<span id="cb7-3">dir_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example_dir"</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일 및 디렉토리 존재 여부 검사</span></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> file_path.exists():</span>
<span id="cb7-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> exists."</span>)</span>
<span id="cb7-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist."</span>)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dir_path.exists():</span>
<span id="cb7-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dir_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> exists."</span>)</span>
<span id="cb7-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dir_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist."</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 경로가 파일인지 디렉토리인지 검사</span></span>
<span id="cb7-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> file_path.is_file():</span>
<span id="cb7-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a file."</span>)</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dir_path.is_dir():</span>
<span id="cb7-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dir_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a directory."</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="실무-적용" class="level3" data-number="1.4">
<h3 data-number="1.4" class="anchored" data-anchor-id="실무-적용"><span class="header-section-number">1.4</span> 실무 적용</h3>
<div id="42e4a1de" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">root_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.cwd() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /home/kmkim/pda/dsp-research-strep-a/kkm</span></span>
<span id="cb8-2">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span></span>
<span id="cb8-3">directory_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfx-baseline-subtraction'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pda-raw-sample'</span>]</span>
<span id="cb8-4">product_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GI-B-I'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GI-B-II'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GI-P'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GI-V'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RP1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RP2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RP3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RP4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STI-CA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STI-EA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STI-GU'</span>]</span>
<span id="cb8-5">consumables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'8-strip'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'96-cap'</span>]</span>
<span id="cb8-6">plate_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'002'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'005'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'031'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'032'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'035'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'036'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'041'</span>]</span>
<span id="cb8-7"></span>
<span id="cb8-8">cfx_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-9">raw_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> directory_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> directory_names: </span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> product_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GI-B-I'</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#product_names:</span></span>
<span id="cb8-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> consumable <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'8-strip'</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#consumables:</span></span>
<span id="cb8-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> plate_number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plate_numbers:</span>
<span id="cb8-15">                full_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> directory_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> product_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> consumable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> plate_number</span>
<span id="cb8-16">                processed_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"processed"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1"</span></span>
<span id="cb8-17">                processed_path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-18">                exporting_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  full_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exported_pcrd"</span></span>
<span id="cb8-19">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfx'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> exporting_path: </span>
<span id="cb8-20">                    temp_cfx_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bioradparse.load_pcrdata(exporting_path, datatype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cfx-xl"</span>)</span>
<span id="cb8-21">                    cfx_data.append(temp_cfx_data)</span>
<span id="cb8-22">                temp_raw_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bioradparse.load_pcrdata(exporting_path, datatype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cfx-batch-csv"</span>)</span>
<span id="cb8-23">                raw_data.append(temp_raw_data)</span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#pathlib.Path(f"./data/baseline-subtracted/processed/example1")</span></span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pcrname, pcrdata <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> raw_data.items():</span>
<span id="cb8-27">    bioradparse.save_pcrdata(raw_data, root_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pda-raw-sample"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"processed"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pcrname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.parquet"</span>)</span>
<span id="cb8-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pcrname, pcrdata <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cfx_data.items():</span>
<span id="cb8-29">    bioradparse.save_pcrdata(cfx_data, root_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cfx-baseline-subtraction"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"processed"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pcrname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.parquet"</span>)</span></code></pre></div>
</details>
</div>


</section>
</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/pathlib.html</guid>
  <pubDate>Fri, 30 Jun 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Package Management - 1</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/package_management.html</link>
  <description><![CDATA[ 




<section id="requirements.txt-를-이용한-packages-관리" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="requirements.txt-를-이용한-packages-관리"><span class="header-section-number">1</span> requirements.txt 를 이용한 packages 관리</h2>
<p>여러 projects를 오랫동안 관리하다 보면 다수의 packages를 설치해야하는데 이 와중에 PC 포맷, fork, cloning과 같은 code를 옮겨야하는 일이 생길 수 있다. 이렇게 새로운 환경에서 이전에 관리하던 projects를 재현해야하는데 수 많은 packages를 하나 하나씩 재설치해야하는 것은 여간 번거로운 작업이 아니다.</p>
<ul>
<li><code>pip list</code>를 이용한 pip로 설치된 패키지 조회
<ul>
<li>아래와 같이 package list들이 출력이 된다 (일부 스크린샷함). 이 많은 packages를 하나 하나씩 <code>conda install package_name</code> 실행하여 설치할 순 없다. <img src="kmink3225.netlify.app/images/python/requirements1.PNG" class="img-fluid" alt="pip list 명령어 결과물"></li>
</ul></li>
<li><code>pip freeze &gt; requirements.txt</code> 명령어를 실행하여 requirements.txt 를 만들어 준다. 이 txt 파일 안에는 packages의 이름과 version 정보까지 기록되어 있는 것을 확인할 수 있다.</li>
<li><code>pip install -r requirements.txt</code> 명령어를 실행하여 requirements.txt 에 있는 packages를 한꺼번에 설치할 수 있게 된다.</li>
</ul>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/package_management.html</guid>
  <pubDate>Wed, 31 May 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Airflow Introduction</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<ul>
<li>파이썬을 이용해 워크플로우를 만들고 관리할 수 있는 오픈소스 기반 워크플로우 관리 도구</li>
<li>2014년 에어비앤비에서 만든 워크플로우 관리 솔루션으로 현재는 Apache Open Source 재단에서 관리되고 있는 프로젝트</li>
<li>Airflow는 워크플로우를 DAG을 사용하여 정의하고, 관리하는 프로그램
<ul>
<li>자유도가 크고, 확장성이 좋은 워크플로우 관리 프로그램</li>
</ul></li>
</ul>
<section id="characteristics" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="characteristics"><span class="header-section-number">1.1</span> Characteristics</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div id="fig-workflow" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-workflow-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<svg width="672" height="480" viewbox="0.00 0.00 343.92 169.48" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 165.48)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-165.48 339.92,-165.48 339.92,4 -4,4"></polygon>
<!-- REST API를 사용한 데이터를 받아 전처리 -->
<g id="node1" class="node">
<title>REST API를 사용한 데이터를 받아 전처리</title>
<ellipse fill="none" stroke="black" cx="156.43" cy="-143.48" rx="156.37" ry="18"></ellipse>
<text text-anchor="middle" x="156.43" y="-139.28" font-family="Times,serif" font-size="14.00">REST API를 사용한 데이터를 받아 전처리</text>
</g>
<!-- 기존 DB의 데이터 삭제 (중복 제거) -->
<g id="node2" class="node">
<title>기존 DB의 데이터 삭제 (중복 제거)</title>
<ellipse fill="none" stroke="black" cx="200.45" cy="-86.15" rx="129.73" ry="18"></ellipse>
<text text-anchor="middle" x="200.45" y="-81.95" font-family="Times,serif" font-size="14.00">기존 DB의 데이터 삭제 (중복 제거)</text>
</g>
<!-- REST API를 사용한 데이터를 받아 전처리&#45;&#45;기존 DB의 데이터 삭제 (중복 제거) -->
<g id="edge1" class="edge">
<title>REST API를 사용한 데이터를 받아 전처리--기존 DB의 데이터 삭제 (중복 제거)</title>
<path fill="none" stroke="black" d="M170.36,-125.34C175.5,-118.65 181.32,-111.07 186.46,-104.37"></path>
</g>
<!-- 전처리한 데이터를 DB에 삽입 -->
<g id="node3" class="node">
<title>전처리한 데이터를 DB에 삽입</title>
<ellipse fill="none" stroke="black" cx="224.56" cy="-18" rx="111.23" ry="18"></ellipse>
<text text-anchor="middle" x="224.56" y="-13.8" font-family="Times,serif" font-size="14.00">전처리한 데이터를 DB에 삽입</text>
</g>
<!-- 기존 DB의 데이터 삭제 (중복 제거)&#45;&#45;전처리한 데이터를 DB에 삽입 -->
<g id="edge2" class="edge">
<title>기존 DB의 데이터 삭제 (중복 제거)--전처리한 데이터를 DB에 삽입</title>
<path fill="none" stroke="black" d="M206.91,-67.89C210.37,-58.11 214.62,-46.1 218.08,-36.31"></path>
</g>
</g>
</svg>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-workflow-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Airflow Workflow Simple Example
</figcaption>
</figure>
</div>
</div>
</div>
<ul>
<li>파이썬으로 제작된 도구이며 이용자가 워크플로우 생성시에도 파이썬으로 구현해야 함</li>
<li>하나의 워크플로우는 DAG(Directed Acyclic Graph) 이라 부르며 DAG 안에는 1개 이상의 Task가 존재
<ul>
<li>예를 들어, REST API로부터 데이터를 내려 받아 DB에 insert하려는 과제를 수행하기 위해 Figure&nbsp;1 와 같은 단계들이 필요하다.</li>
<li>각 각의 단계를 task라 하고 각 각 선/후행 단계가 있다. (1번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 2번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 3번 task)</li>
<li>이 tasks의 집합을 DAG이라고 한다.</li>
<li>Task간 선후행 연결이 가능하되 순환되지 않고 방향성을 가짐(=DAG)</li>
</ul></li>
<li>Cron 기반의 스케줄링
<ul>
<li>Linux에서 사용되는 스케쥴링으로 task들이 시작되어야 하는 시작 시간이나 주기를 설정</li>
</ul></li>
<li>모니터링 및 실패 작업에 대한 재실행 기능이 간편</li>
</ul>
<div id="fig-DAG_example" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-DAG_example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="kmink3225.netlify.app/images/airflow/intro_dag-example.PNG" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-DAG_example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: DAG Simple Example
</figcaption>
</figure>
</div>
<ul>
<li>In Figure&nbsp;2, 초록색 테두리의 node는 성공한 task를 의미하고 분홍색 테두리의 node는 실패한 task를 의미한다. 위의 그림에는 없지만 회색 테두리는 queue (준비) 상태를 의미한다. Airflow에는 DAG이 일련의 task로 구성되어 있기 때문에 실행 상태도 성공, 실패 및 준비 상태같은 여러 종류가 있다. 나머지 상태는 뒷 부분에서 차차 다뤄보기로 한다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/task-status.PNG" class="img-fluid figure-img"></p>
<figcaption>Task Status</figcaption>
</figure>
</div>
</section>
<section id="motivation" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="motivation"><span class="header-section-number">1.2</span> Motivation</h2>
<section id="why-to-learn-airflow" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="why-to-learn-airflow"><span class="header-section-number">1.2.1</span> Why to Learn Airflow?</h3>
<div id="fig-comparison" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-comparison-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-comparison" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-workflowDemand" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-workflowDemand-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="kmink3225.netlify.app/images/airflow/intro_airflow-demand.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-workflowDemand-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Orchestrating Task Tools (a.k.a Data Workflows) Demand Comparison
</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-comparison" style="flex-basis: 100.0%;justify-content: flex-start;">
<div id="fig-workflowComputation" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-workflowComputation-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="kmink3225.netlify.app/images/airflow/intro_airflow-comparison.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-workflowComputation-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Orchestrating Task Tools Computation Comparison
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-comparison-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: <a href="https://towardsdatascience.com/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow-b3785dd1ed0c">Airflow Figure Reference: Airflow vs.&nbsp;Luigi vs.&nbsp;Argo vs.&nbsp;MLFlow vs.&nbsp;KubeFlow by Markus Schmitt</a>
</figcaption>
</figure>
</div>
<ul>
<li>Maturity: 성숙도로서 github에서 얼마나 많은 사람들이 관리하고 있는지 즉 community의 활성도를 나타내는 지표. 유료 서비스의 경우 user 가 제작사에게 패치를 요청할 수 있지만 open source에 경우 제작사가 없어 community의 활성도가 중요하다.</li>
<li>Popularity: github starts의 개수</li>
<li>Simplicity: workflow를 얼마나 쉽게 사용할 수 있는지에 대한 난이도로 airflow는 사용하기에 어려운 난이도를 보여준다.</li>
<li>Breadth: 확장성. 즉 얼마나 customizing할 수 있는지 보여주는 척도</li>
</ul>
<p>Figure&nbsp;3 을 보면, Figure&nbsp;3 (a) 에서 볼수 있듯이 최근 들어 airflow의 인기가 급증하는 것을 볼 수 있다. Figure&nbsp;3 (b) 에서 그 이유를 짐작할 수 있는데 airflow가 simplicity가 C 사용하기는 어렵지만 구현할 수 있는 폭 breadth가 높다 (Breadth: A). 즉, 다른 workflows에 비해 복잡한 코딩을 요구하는 만큼 그 자유도가 높다는 것을 짐작할 수 있다.</p>
</section>
</section>
<section id="strength" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="strength"><span class="header-section-number">1.3</span> Strength</h2>
<ul>
<li>파이썬에 익숙하다면 러닝 커브 빠르게 극복 가능</li>
<li>대규모 워크플로우 환경에서 부하 증가시 수평적 확장 가능한 Kubenetes 등 아키텍처 지원</li>
<li>파이썬에서 지원되는 라이브러리 활용하여 다양한 도구 컨트롤 가능 (GCP, AWS등 대다수 클라우드에서 제공하는 서비스)
<ul>
<li>GCP: Google Cloud Platform</li>
<li>AWS: Amazon Web Services</li>
</ul></li>
<li>Airflow에서 제공하는 파이썬 소스 기반으로 원하는 작업을 위한 커스터마이징이 가능 (오퍼레이터, Hook, 센서 등)</li>
</ul>
</section>
<section id="weakness" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="weakness"><span class="header-section-number">1.4</span> Weakness</h2>
<ul>
<li>실시간 워크플로우 관리에 적합치 않음 (최소 분 단위 실행)</li>
<li>워크플로우(DAG) 개수가 많아질 경우 모니터링이 쉽지 않음</li>
<li>워크플로우를 GUI환경에서 만들지 않기에 파이썬에 익숙하지 않다면 다루기 쉽지 않음 협업 환경에서 프로그래밍 표준이 없으면 유지관리가 쉽지 않음</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Environment Setting for Airflow</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="wsl-installation" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> WSL Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">WSL Installation</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Commands</a></li>
</ul>
</section>
<section id="docker-installation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Docker Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Docker Installation</a></li>
<li>docker를 사용하기 전에 <code>sudo service docker start</code> 실행해야 함</li>
<li>docker 설치 확인
<ul>
<li><code>sudo docker run hello-world</code> 하면 다음과 같은 메세지 떠야함<br>
<img src="kmink3225.netlify.app/images/airflow/check_docker_installation.PNG" class="img-fluid" alt="docker 설치 확인"></li>
<li>먼저 docker는 local에서 실행하고자 하는 image를 찾고, 없으면 가장 최신 version의 image를 download 받는다.</li>
<li>하지만, 위의 그림에 있는 메세지와 같이 이미 실행하고자 하는 image가 있어 다운로드 받을 필요가 없으면 image를 찾고 다운로드 받았다는 메세지는 생략되게 된다.</li>
</ul></li>
</ul>
</section>
<section id="airflow-installation" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Airflow Installation</h1>
<ul>
<li>Airflow 설치 방법은 여러가지가 존재하며 그 중 하나가 도커 설치임</li>
<li>도커 컴포즈 (docker compose)를 이용하여 한번에 쉽게 설치 가능
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html">Docker Compose를 이용하여 Airflow 설치 링크</a></li>
<li>docker compose: 여러 개의 도커 컨테이너 설정을 한방에 관리하기 위한 도커 확장 기술로 에어플로우를 설치하기 위한 도커 컨테이너 세팅 내용이 들어있음
<ul>
<li>airflow 자체도 여러개의 docker containers로 구성됨</li>
</ul></li>
<li>Docker Compose를 이용하여 Airflow 설치 링크의 <em>Fetching docker-compose.yaml</em> 부터 시작
<ul>
<li><code>curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.6.1/docker-compose.yaml'</code></li>
<li><code>ls</code>로 <code>docker-compose.yaml</code> 다운로드됐는지 확인</li>
<li><code>vi *</code> 로 <code>docker-compose.yaml</code> 열어보면 주석처리와 airflow의 설정내용들을 확인할 수 있다.</li>
</ul></li>
<li>Setting the right Airflow user
<ul>
<li>directories 만들기: <code>mkdir -p ./dags ./logs ./plugins ./config</code></li>
<li>.env 파일 만들기: <code>echo -e "AIRFLOW_UID=$(id -u)" &gt; .env</code></li>
<li><code>vi .env</code>: <code>AIRFLOW_UID=1000</code> 인 이유는 OS 계정의 uid가 1000이라는 뜻</li>
</ul></li>
<li>Initialize the database
<ul>
<li><code>sudo docker compose up airflow-init</code>: <code>sudo</code> 반드시 앞에 붙여야함. <code>exited with code 0</code>가 떠야 정상적으로 설치 된 것임</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="running-airflow" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Running Airflow</h1>
<ul>
<li>service 띄우기
<ul>
<li><code>sudo docker compose up</code> 실행. <code>sudo</code> 반드시 앞에 붙여야함.</li>
</ul></li>
<li>http 상태가 계속해서 업데이트 되야 airflow가 돌아가고 있는 것임. 계속해서 update되는 http command 닫으면 airflow멈춤. 두번째 터미널 열어서 작업해야함</li>
<li>두 번째 터미널 열고 <code>sudo docker ps</code> 실행하여 container list 상태 확인. 총 6개 올라와야 정상
<ul>
<li>airflow-airflow-worker-1 : scheduler로 부터 부여된 tasks 수행</li>
<li>airflow-airflow-triggerer-1</li>
<li>airflow-airflow-webserver-1</li>
<li>airflow-airflow-scheduler-1 : tasks와 dags을 monitoring</li>
<li>airflow-postgres-1</li>
<li>airflow-redis-1 : for queue service, scheduler에서 worker로 message 전달</li>
</ul></li>
<li>웹 브라우저 창에 <code>localhost:8080</code> 입력하여 airflow service창에 접속
<ul>
<li>default ID/PW: airflow/airflow</li>
<li>웹 브라우저에서 local로 airflow service 접속 원리
<ul>
<li>웹 브라우저는 local PC에 있음</li>
<li>airflow는 WSL안에 docker container로 실행되고 있음</li>
<li>이렇게 2개의 다른 공간이 연결될 수 있는 이유는 WSL은 기본적으로 local PC의 local host IP와 연결이 되어 있음</li>
<li>그래서 웹 브라우저에서 local로 <code>localhost:8080</code> 라고 입력하면 WSL에서 8080 port를 입력하는 것과 같은 효과가 있기 때문에 local 웹브라우저에서 WSL container로 들어갈 수 있는 것임.</li>
<li>sample DAGs이 만들어져 있는 것을 확인 할 수 있음</li>
</ul></li>
<li>Airflow Webserver (or Web Browser) Port 변경
<ul>
<li>Airflow의 default port 는 <code>8080</code>으로 설정되어 있는데 만약 port를 변경하고 싶으면 <code>docker-compose.yaml</code>을 수정해야한다. 다음은 <code>docker-compose.yaml</code>의 airflow webserver 부분을 복붙한 것이다. &lt;변경전 with comments&gt;</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">  airflow-webserver:</span>
<span id="cb1-2">    &lt;&lt;: *airflow-common</span>
<span id="cb1-3">    command: webserver</span>
<span id="cb1-4">    ports:</span>
<span id="cb1-5">      - "8080(local port 변경하고자 하는 부분):8080 (airflow의 healthcheck.test의 port)"</span>
<span id="cb1-6">    healthcheck:</span>
<span id="cb1-7">      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]</span>
<span id="cb1-8">      interval: 10s</span>
<span id="cb1-9">      timeout: 10s</span>
<span id="cb1-10">      retries: 5</span>
<span id="cb1-11">      start_period: 30s</span>
<span id="cb1-12">    restart: always</span>
<span id="cb1-13">    depends_on:</span>
<span id="cb1-14">      &lt;&lt;: *airflow-common-depends-on</span>
<span id="cb1-15">      airflow-init:</span>
<span id="cb1-16">        condition: service_completed_successfully</span>
<span id="cb1-17">    networks:</span>
<span id="cb1-18">      network_custom:</span>
<span id="cb1-19">        ipv4_address: 172.28.0.6</span></code></pre></div>
&lt;변경후&gt; <code>markdown     airflow-webserver:       &lt;&lt;: *airflow-common       command: webserver       ports:         - "8787:8080"       healthcheck:         test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]         interval: 10s         timeout: 10s         retries: 5         start_period: 30s       restart: always       depends_on:         &lt;&lt;: *airflow-common-depends-on         airflow-init:           condition: service_completed_successfully       networks:         network_custom:           ipv4_address: 172.28.0.6</code> 위 처럼 변경하면 되지만 나는 그냥 기본 port인 <code>8080</code>을 사용한다.</li>
</ul></li>
<li>example_bash_operator DAG을 들어가 보면
<ul>
<li>Grid: 수행 이력을 보여주는 tab
<ul>
<li>DAG 이름 example_bash_operator 옆에 pause toggle를 활성화 시키면 unpaused 됨</li>
<li>Auto-regresh toggle 활성화 시키면 DAG이 한번 돌아감</li>
</ul></li>
<li>Graph: DAG을 구성하고 있는 tasks를 보여주는 tab. 각 각의 task가 색 별로 상태를 보여주고 있음</li>
<li>Calendar: 참고할 것</li>
<li>Task Duration: 참고할 것</li>
<li>Task Tries: 참고할 것</li>
<li>Landing Times: 참고할 것</li>
<li>Gantt: 참고할 것</li>
<li>Details: 참고할 것</li>
<li>Code: DAG을 구성하고 있는 python code를 볼 수 있음</li>
<li>Audit Log: 참고할 것</li>
</ul></li>
</ul>
</section>
<section id="airflow-development-environment-setting" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Airflow Development Environment Setting</h1>
<section id="개발-환경-권장-사양" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="개발-환경-권장-사양"><span class="header-section-number">5.1</span> 개발 환경 권장 사양</h2>
<ul>
<li>CPU: 4Core 이상</li>
<li>Memory: 16GB (권장-문제없음) / 8GB (최소-약간 버벅 거림)</li>
<li>WSL에서 다수의 컨테이너 실행시 메모리 점유율 상승할 수 있음
<ul>
<li>airflow service창과 WSL 창 닫고 다시 키면 어느 정도 메로리 점유율 낮아짐</li>
</ul></li>
</ul>
</section>
<section id="개발-환경-workflow" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="개발-환경-workflow"><span class="header-section-number">5.2</span> 개발 환경 workflow</h2>
<ul>
<li>user가 만든 DAG이 airflow까지 전달되는 workflow가 아래와 같이 묘사되어 있다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/development-workflow.PNG" class="img-fluid figure-img"></p>
<figcaption>개발 환경 workflow</figcaption>
</figure>
</div>
<ul>
<li>위의 그림에서 보면 6 containers가 있고 airflow setting 할때 <code>dags</code>, <code>logs</code>, <code>plugins</code>, <code>config</code> directories를 만들었는데 모두 airflow containers에 연결되어 있음
<ul>
<li>mount 의미: directory안에 file을 넣으면 containers가 file을 인식할 수 있음</li>
<li><strong>user가 만든 dag을 dags directory에 넣으면 airflow container가 dags안에 있는 dag을 인식하여 서비스에 띄어줌</strong></li>
</ul></li>
<li>개발환경 세팅의 목표
<ul>
<li>로컬 환경에서 만든 dag을 dags directory에 배포하여 containers가 user가 만든 dag을 인식하여 airflow서비스까지 띄우는 것이 목표</li>
<li><strong>다시 말해서, 그냥 로컬 환경에서 만든 dag을 dags directory에 배포하면 됨</strong></li>
</ul></li>
<li>Actions
<ol type="1">
<li>로컬 컴퓨터에 python interpreter 설치
<ul>
<li><strong>아무 python version을 설치하면 안되고 airflow containers가 쓰고있는 python version과 일치시켜야 함!</strong></li>
</ul></li>
<li>IDE Tool(VScode) 개발환경 설정</li>
<li>Github 레파지토리 생성</li>
<li>로컬 컴퓨터에 Python Airflow Libraries 설치</li>
<li>WSL에 Git 설치 및 git pull이 가능한 환경구성
<ul>
<li>git repository에 DAG을 만들어 push하여 dags directory에 pull이 되어 dag이 들어가게 하면 됨.</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="python-interpreter-installation" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="python-interpreter-installation"><span class="header-section-number">5.3</span> Python Interpreter Installation</h2>
<ul>
<li>Actions
<ol type="1">
<li>컨테이너에서 사용하는 파이썬 버전 확인
<ul>
<li>container안에 들어가기: <code>sudo docker exec -it {container-name or container-id} 명령어</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> <code>sudo docker exec -it airflow-airflow-worker-1 bash</code>: <code>-it</code>는 session이 안 끊어지도록 유지해주는 옵션</li>
<li><code>python -V</code> 실행하여 python version 확인 : 현재 나의 python version은 <code>Python 3.7.16</code></li>
<li><code>ctrl D</code>로 exit</li>
</ul></li>
<li><a href="https://www.python.org/downloads/">파이썬 인터프리터 다운로드</a>
<ul>
<li>보안상의 업데이트 말곤 기능이 같기 때문에 <code>Python 3.7.16</code>대신 <code>Python 3.7.9</code> 설치하면 됨</li>
</ul></li>
<li>로컬 컴퓨터에 파이썬 설치
<ul>
<li>conda에 설치하고 싶으면 <code>conda create -n airflow python=3.7.9</code> or</li>
<li>global 환경에 설치하고 싶으면 <a href="https://www.python.org/downloads/release/python-379/">Windows x86-64 executable installer</a> 다운로드 및 설치</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="vscode-installation" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="vscode-installation"><span class="header-section-number">5.4</span> VScode Installation</h2>
<ul>
<li>VScode란?
<ul>
<li>Microsoft사에서 2015년에 제작, 다양한 언어 개발을 돕는 IDE tool</li>
<li>Visual Studio 라는 IDE 툴과는 엄연히 다른 툴</li>
</ul></li>
<li>Actions
<ol type="1">
<li><a href="https://code.visualstudio.com/download">VScode 다운로드</a>
<ul>
<li>설치 마법사에서 추가 작업 선택란에 code로 열기 작업을 windows탐색기 파일의 상황에 맞는 메뉴에 추가 선택할 것. programming file을 열때 VScode가 디폴트가 되도록함</li>
</ul></li>
<li>VScode 설치, 파이썬 확장팩 설치</li>
<li>프로젝트 생성, 파이썬 가상환경 설정
<ul>
<li>VScode가 file이나 directory단위로 관리하는 IDE tool이라 프로젝트 생성 개념이 없음</li>
<li>windows에 프로젝트 directory하나 만들고 VScode에서 open folder로 열면 그 folder를 최상위 folder로 인식 (project 생성됨)</li>
</ul></li>
<li>python interpreter 설정
<ul>
<li>VScode &gt; Terminal &gt; New Terminal &gt; python version 확인</li>
</ul></li>
</ol></li>
<li>파이썬 가상환경
<ul>
<li>라이브러리 버전 충돌 방지를 위해 설치/사용되는 파이썬 인터프리터 환경을 격리시키는 기술</li>
<li>파이썬은 라이브러리 설치 시점에 따라서도 설치되는 버전이 상이한 경우가 많음</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/virtual-environment.PNG" class="img-fluid figure-img"></p>
<figcaption>가상 환경의 필요성</figcaption>
</figure>
</div>
<ul>
<li>python을 global 환경에 설치할 경우 위의 그림처럼 C,D프로젝트가 동시에 진행될 때 둘 중하나의 library version이 차이가 나면 old version의 library 로 진행되는 프로젝트는 에러가 발생함
<ul>
<li>2개의 다른 프로젝트가 같은 python interpreter를 바라보고 library를 설치하기 때문에 종속성 문제가 생김 (library 충돌 발생)</li>
<li>그래서 다른 가상환경 venv안에 다른 프로젝트를 할당해서 독립적으로 프로젝트를 진행하는게 일반적임</li>
</ul></li>
<li>python 가상환경 만들기
<ul>
<li>conda로 만들 경우 conda 설치 후 만들면 됨. <a href="https://github.com/conda-forge/miniforge">설치 링크</a></li>
<li>python에 있는 가상환경 생성 기능으로 만들 경우 <code>python -m airflow ./venv</code> 실행
<ul>
<li><code>./venv</code> directory에 python 설치하고 version 관리하겠다는 의미</li>
</ul></li>
</ul></li>
<li>VScode가 python 가상환경 참조하도록 설정
<ul>
<li>help&gt;show all commands or <code>ctrl+shift+p</code> 누른후 <code>interpreter</code> 입력하여 가상환경에 있는 python 클릭</li>
</ul></li>
<li>terminal 에서 가상환경 잘 잡혔는지 확인</li>
</ul></li>
</ul>
</section>
<section id="git-environment-setting" class="level2" data-number="5.5">
<h2 data-number="5.5" class="anchored" data-anchor-id="git-environment-setting"><span class="header-section-number">5.5</span> Git Environment Setting</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Git Installation &amp; Environment Setting</a></li>
</ul>
</section>
<section id="airflow-library-installation" class="level2" data-number="5.6">
<h2 data-number="5.6" class="anchored" data-anchor-id="airflow-library-installation"><span class="header-section-number">5.6</span> Airflow Library Installation</h2>
<ul>
<li>Airflow 라이브러리 설치 대상과 설치 이유
<ul>
<li>설치 대상: 로컬 컴퓨터의 파이썬 가상환경(본인의 경우: airflow)</li>
<li>Why? Airflow DAG 개발을 위해 Airflow의 python class files 및 라이브러리들이 많기 때문에 필요</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/Installation/installing-from-pypi.html">Airflow 라이브러리 설치 가이드</a>
<ul>
<li><code>conda activate airflow</code> 가상환경으로 들어감</li>
<li><code>pip install "apache-airflow[celery]==2.6.1" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.1/constraints-3.7.txt"</code></li>
</ul></li>
<li>리눅스에서 파이썬 Airflow 라이브러리 설치시 그 자체로 Airflow 서비스 사용 가능
<ul>
<li>하지만 WSL에서 pip install 명령으로 Airflow를 설치하지 않는 이유?</li>
<li>pip install 로 Airflow 설치시 저사양의 아키텍처로 설치되며 여러 제약이 존재함 (Task를 한번에 1개씩만 실행 가능 등)</li>
<li>그러므로 docker로 설치해야 제약이 없음</li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Operator Baisc (Bash Operator)</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div id="language-tabcontent" class="tab-content">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="dag-basic" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> DAG Basic</h1>
<section id="airflow-dag-생성" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="airflow-dag-생성"><span class="header-section-number">1.1</span> Airflow DAG 생성</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 241.70 263.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 259)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-259 237.7,-259 237.7,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-247 136.43,-247 136.43,-8 8,-8"></polygon>
<text text-anchor="middle" x="72.21" y="-230.4" font-family="Times,serif" font-size="14.00">DAG</text>
</g>
<!-- Bash_Operator -->
<g id="node1" class="node">
<title>Bash_Operator</title>
<polygon fill="none" stroke="black" points="122.47,-214 21.96,-214 21.96,-178 122.47,-178 122.47,-214"></polygon>
<text text-anchor="middle" x="72.21" y="-191.8" font-family="Times,serif" font-size="14.00">Bash_Operator</text>
</g>
<!-- Task1 -->
<g id="node5" class="node">
<title>Task1</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-196" rx="34.77" ry="18"></ellipse>
<text text-anchor="middle" x="199.06" y="-191.8" font-family="Times,serif" font-size="14.00">Task1</text>
</g>
<!-- Bash_Operator&#45;&gt;Task1 -->
<g id="edge1" class="edge">
<title>Bash_Operator-&gt;Task1</title>
<path fill="none" stroke="black" d="M122.56,-196C132.88,-196 143.7,-196 153.82,-196"></path>
<polygon fill="black" stroke="black" points="154.06,-199.5 164.06,-196 154.06,-192.5 154.06,-199.5"></polygon>
</g>
<!-- Python_Operator -->
<g id="node2" class="node">
<title>Python_Operator</title>
<polygon fill="none" stroke="black" points="128.64,-160 15.79,-160 15.79,-124 128.64,-124 128.64,-160"></polygon>
<text text-anchor="middle" x="72.21" y="-137.8" font-family="Times,serif" font-size="14.00">Python_Operator</text>
</g>
<!-- Task2 -->
<g id="node6" class="node">
<title>Task2</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-142" rx="34.77" ry="18"></ellipse>
<text text-anchor="middle" x="199.06" y="-137.8" font-family="Times,serif" font-size="14.00">Task2</text>
</g>
<!-- Python_Operator&#45;&gt;Task2 -->
<g id="edge2" class="edge">
<title>Python_Operator-&gt;Task2</title>
<path fill="none" stroke="black" d="M128.7,-142C137.22,-142 145.91,-142 154.13,-142"></path>
<polygon fill="black" stroke="black" points="154.25,-145.5 164.25,-142 154.25,-138.5 154.25,-145.5"></polygon>
</g>
<!-- S3_Operator -->
<g id="node3" class="node">
<title>S3_Operator</title>
<polygon fill="none" stroke="black" points="115.75,-106 28.67,-106 28.67,-70 115.75,-70 115.75,-106"></polygon>
<text text-anchor="middle" x="72.21" y="-83.8" font-family="Times,serif" font-size="14.00">S3_Operator</text>
</g>
<!-- Task3 -->
<g id="node7" class="node">
<title>Task3</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-88" rx="34.77" ry="18"></ellipse>
<text text-anchor="middle" x="199.06" y="-83.8" font-family="Times,serif" font-size="14.00">Task3</text>
</g>
<!-- S3_Operator&#45;&gt;Task3 -->
<g id="edge3" class="edge">
<title>S3_Operator-&gt;Task3</title>
<path fill="none" stroke="black" d="M115.83,-88C128.19,-88 141.71,-88 154.15,-88"></path>
<polygon fill="black" stroke="black" points="154.3,-91.5 164.3,-88 154.3,-84.5 154.3,-91.5"></polygon>
</g>
<!-- GCS_Operator -->
<g id="node4" class="node">
<title>GCS_Operator</title>
<polygon fill="none" stroke="black" points="122.2,-52 22.23,-52 22.23,-16 122.2,-16 122.2,-52"></polygon>
<text text-anchor="middle" x="72.21" y="-29.8" font-family="Times,serif" font-size="14.00">GCS_Operator</text>
</g>
<!-- Task4 -->
<g id="node8" class="node">
<title>Task4</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-34" rx="34.77" ry="18"></ellipse>
<text text-anchor="middle" x="199.06" y="-29.8" font-family="Times,serif" font-size="14.00">Task4</text>
</g>
<!-- GCS_Operator&#45;&gt;Task4 -->
<g id="edge4" class="edge">
<title>GCS_Operator-&gt;Task4</title>
<path fill="none" stroke="black" d="M122.56,-34C132.88,-34 143.7,-34 153.82,-34"></path>
<polygon fill="black" stroke="black" points="154.06,-37.5 164.06,-34 154.06,-30.5 154.06,-37.5"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li><p>workflow = DAG</p></li>
<li><p>Opeartor</p>
<ul>
<li>특정 행위를 할 수 있는 기능을 모아 놓은 클래스 또는 설계도</li>
</ul></li>
<li><p>Task</p>
<ul>
<li>operator가 객체화(instantiation)되어 DAG에서 실행 가능한 object</li>
<li>방향성을 갖고 순환되지 않음 (DAG)</li>
</ul></li>
<li><p>Bash Operator</p>
<ul>
<li>Linux에서 shell script 명령을 수행하는 operator</li>
</ul></li>
<li><p>Python Operator</p>
<ul>
<li>python 함수를 실행하는 operator</li>
</ul></li>
<li><p>S3 Operator</p>
<ul>
<li>AWS의 S3 solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>GCS Operator</p>
<ul>
<li>GCP의 GCS solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>operators을 사용하여 dags을 작성하여 git을 통해 배포한다.</p></li>
<li><p>dag 작성 및 배포</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">  from __future__ import annotations</span>
<span id="cb1-2"></span>
<span id="cb1-3">  import datetime # python에는 datatime이라는 data type이 있음</span>
<span id="cb1-4">  import pendulum # datetime data type을 처리하는 library</span>
<span id="cb1-5"></span>
<span id="cb1-6">  from airflow import DAG</span>
<span id="cb1-7">  from airflow.operators.bash import BashOperator</span>
<span id="cb1-8">  from airflow.operators.empty import EmptyOperator</span>
<span id="cb1-9"></span>
<span id="cb1-10">  with DAG(</span>
<span id="cb1-11">      dag_id="dags_bash_operator", </span>
<span id="cb1-12">      # airflow service web 상에서 보여지는 이름, python file명과는 무관하지만 </span>
<span id="cb1-13">      # 실무에서는 일반적으로 python 파일명과 dag_id는 일치시키는 것이 다수의 dags 관리에 편리하다.</span>
<span id="cb1-14">      schedule="0 0 * * *", # "분 시 일 월 요일", cron schedule로서 매일 0분 0시에 실행</span>
<span id="cb1-15">      start_date=pendulum.datetime(2023, 6, 9, tz="Asia/Seoul"), #dags이 언제 실행될지 설정</span>
<span id="cb1-16">      # UTC: 세계 표준시로 한국 보다 9시간이 느림. Asia/Seoul로 변경해야 지정한 날짜에 0분 0시에 실행될 수 있다.</span>
<span id="cb1-17">      catchup=False, # start_date를 현재보다 과거로 설정하게 될 경우 </span>
<span id="cb1-18">      # catchup=True면 과거 부터 현재까지 소급해서 실행. </span>
<span id="cb1-19">      # 시간 순서대로 실행하는게 아니라 병렬로 한번에 실행하기 때문에 메모리를 많이 잡아먹을 수 있음. </span>
<span id="cb1-20">      # 그래서 보통 False로 처리. catchup=False면 현재부터만 실행</span>
<span id="cb1-21">      # dagrun_timeout=datetime.timedelta(minutes=60), # dag이 60분 이상 구동시 실패가 되도록 설정</span>
<span id="cb1-22">      # tags=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"example", "example2"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, #airflow service web browser상 dag의 tag를 의미. 즉 dag id 바로 밑 파란색 박스를 의미. tag를 누르면 같은 tag를 가진 dags들만 filtering돼서 선택됨 </span>
<span id="cb1-23">      ## dags 이 수 백개가 될 때 tag로 filtering 하면 용이함 </span>
<span id="cb1-24">      # params={"example_key": "example_value"}, # as dag: 이하 tasks를 정의할 때, </span>
<span id="cb1-25">      ## tasks에 공통 passing parameters가 있을 때 씀</span>
<span id="cb1-26">  ) as dag:</span>
<span id="cb1-27">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">START how to_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-28">      bash_task1 = BashOperator(</span>
<span id="cb1-29">          task_id="bash_task1", # airflow web service의 dag graph에 표시될 task명</span>
<span id="cb1-30">          # task역시 task object name (bash_task1)과 task_id(bash_task1)를 일치시키는 것이 좋음</span>
<span id="cb1-31">          bash_command="echo this task works well!",</span>
<span id="cb1-32">          # bash_command 이하는 shell script를 적어주면 됨</span>
<span id="cb1-33">      )</span>
<span id="cb1-34">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">END how to_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-35">      bash_task2 = BashOperator(</span>
<span id="cb1-36">          task_id="bash_task2",  </span>
<span id="cb1-37">          bash_command="echo $HOSTNAME", # $HOSTNAME: HOSTNAME 환경변수 호출</span>
<span id="cb1-38">          # WSL terminal 이름이 출력된다.</span>
<span id="cb1-39">      )</span>
<span id="cb1-40">      bash_task1 &gt;&gt; bash_task2 # 수행될 tasks의 관계 설정</span></code></pre></div></li>
<li><p>배포된 dags을 airflow containers과 연결 시키기 위해 <code>docker-compose.yaml</code> 실행</p>
<ul>
<li><code>vi docker-compose.yaml</code> 실행 후 <code>docker-compose.yaml</code> 안에서 <code>Volumns</code> 항목이 wsl의 directory와 container directory를 연결(mount)해주는 요소</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">Volumes</span>
<span id="cb2-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb2-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb2-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div>
<ul>
<li><p>위와 같이 Volumns 항목이 뜨는데 <code>:</code>을 기준으로 왼쪽이 WSL directories(volumns), 오른쪽이 Docker container directories(volumns)</p></li>
<li><p>다른 WSL창을 열어 <code>echo ${AIRFLOW_PROJ_DIR:-.}</code> 실행하면 <code>AIRFLOW_PROJ_DIR</code>에 값이 없기 때문에 <code>.</code> 출력됨</p>
<ul>
<li><code>AIRFLOW_PROJ_DIR:-.</code> : shell script문법으로 <code>AIRFLOW_PROJ_DIR</code>에 값이 있으면 출력하고 없으면 <code>.</code>을 출력하라는 의미</li>
<li><code>echo AIRFLOW_PROJ_DIR</code>: 아무것도 출력 안됨</li>
</ul></li>
<li><p><code>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</code>는 <code>./dags</code>를 <code>/opt/airflow/dags</code>에 연결시키라는 의미</p>
<ul>
<li><code>./</code>: <code>docker-compose.yaml</code>이 위치하고있는 현재 directory를 의미</li>
</ul></li>
<li><p>배포된 dags를 자동으로 docker container에 연동시키기 위해 <code>Volumns</code>을 다음과 같이 편집</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">  volumes:</span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb3-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb3-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div>
<ul>
<li>directory hierarchy에 따라 위의 volumes path를 다르게 설정해야한다. docker service web browse(i.e.&nbsp;localhost:8080) 껏다 켜가면서 확인하면서 설정</li>
</ul></li>
<li><p>새로운 dags 배포할 때마다 airflow service 껐다가 켜야 한다.</p></li>
</ul></li>
<li><p>airflow service 껐다 켜서 잘 반영됐는지 확인</p>
<ul>
<li>docker가 설치된 wsl directory이동 먼저 할 것</li>
<li>airflow service 끄기: <code>sudo docker compose down</code></li>
<li>airflow service 켜기: <code>sudo docker compose up</code></li>
</ul></li>
<li><p>airflow web service상에서 dags이 잘 mount 되었는지 확인</p>
<ul>
<li>기본적으로 dags은 airflow web service상에 올라올 때 unpaused 상태로 올라옴</li>
<li>하지만 schedule이 걸려있는 dags은 unpaused상태에서 한번 돌고 올라옴</li>
<li>dag을 클릭하면 긴 녹색 막대기를 누르면 수행된 schedule내용이 나오고</li>
<li>각 각의 task에 대응되는 녹색 네모 박스를 누르면 결과들을 조회할 수 있다.
<ul>
<li>네모 박스를 누르고 log (audit log 아님)를 누르면 결과가 자세히 조회된다.</li>
<li><code>bash_task2</code> 의 <code>bash_command="echo $HOSTNAME"</code> 의 결과값으로 조회된 값은 docker worker container id 를 의미한다.
<ul>
<li>하지만 본인의 경우, airflow web service에서 <code>794f3b56824a</code>가 출력된 것을 확인했고</li>
<li><code>sudo docker ps</code>로 container ID를 확인한 결과 <code>airflow-airflow-worker-1</code> 의 <code>32092b201878</code> 로 달랐다.</li>
</ul></li>
<li>실제 worker container로 들어가 <code>echo $HOSTNAME</code> 실행하면 worker container id 출력되어야 함
<ul>
<li>worker container로 들어가기: <code>sudo docker exec -it container-name bash</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 본인의 경우: <code>sudo docker exec -it airflow-airflow-worker-1 bash</code> 이 과정이 dag을 돌린과정과 같은 mechanism임</li>
<li><code>echo $HOSTNAME</code> 실행 : <code>32092b201878</code> 출력됨 (어쨌든 airflow web service상의 <code>794f3b56824a</code>와 달랐음)</li>
<li><code>sudo docker exec -it 794f3b56824a bash</code> 결과 Error response from daemon: No such container: 794f3b56824a 라는 에러메세지 뜸</li>
</ul></li>
<li>즉, worker container가 실제 <code>task</code>를 처리하는 것을 볼 수 있었다.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="subject-of-task-performance" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="subject-of-task-performance"><span class="header-section-number">1.2</span> Subject of Task Performance</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 453.00 367.20" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 363.2)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-363.2 449,-363.2 449,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-351.2 437,-351.2 437,-8 8,-8"></polygon>
<text text-anchor="middle" x="222.5" y="-334.6" font-family="Times,serif" font-size="14.00">Task Process</text>
</g>
<!-- Scheduler -->
<g id="node1" class="node">
<title>Scheduler</title>
<polygon fill="none" stroke="black" points="238.98,-318.4 167.02,-318.4 167.02,-282.4 238.98,-282.4 238.98,-318.4"></polygon>
<text text-anchor="middle" x="203" y="-296.2" font-family="Times,serif" font-size="14.00">Scheduler</text>
</g>
<!-- Scheduler&#45;&gt;Scheduler -->
<g id="edge3" class="edge">
<title>Scheduler-&gt;Scheduler</title>
<path fill="none" stroke="black" d="M239.08,-308.61C249.21,-308.25 256.99,-305.51 256.99,-300.4 256.99,-297.2 253.95,-294.94 249.2,-293.6"></path>
<polygon fill="black" stroke="black" points="249.47,-290.1 239.08,-292.19 248.5,-297.03 249.47,-290.1"></polygon>
<text text-anchor="middle" x="306.55" y="-296.2" font-family="Times,serif" font-size="14.00">3.check start time</text>
</g>
<!-- DAG_file -->
<g id="node2" class="node">
<title>DAG_file</title>
<polygon fill="none" stroke="black" points="122.99,-229.6 51.01,-229.6 51.01,-193.6 122.99,-193.6 122.99,-229.6"></polygon>
<text text-anchor="middle" x="87" y="-207.4" font-family="Times,serif" font-size="14.00">DAG_file</text>
</g>
<!-- Scheduler&#45;&gt;DAG_file -->
<g id="edge1" class="edge">
<title>Scheduler-&gt;DAG_file</title>
<path fill="none" stroke="black" d="M174.11,-282.39C165.32,-276.91 155.74,-270.64 147.29,-264.4 135.6,-255.79 123.34,-245.51 112.95,-236.38"></path>
<polygon fill="black" stroke="black" points="115.21,-233.71 105.41,-229.68 110.56,-238.94 115.21,-233.71"></polygon>
<text text-anchor="middle" x="172.86" y="-251.8" font-family="Times,serif" font-size="14.00">1.parsing</text>
</g>
<!-- Queue -->
<g id="node4" class="node">
<title>Queue</title>
<polygon fill="none" stroke="black" points="230,-229.6 176,-229.6 176,-193.6 230,-193.6 230,-229.6"></polygon>
<text text-anchor="middle" x="203" y="-207.4" font-family="Times,serif" font-size="14.00">Queue</text>
</g>
<!-- Scheduler&#45;&gt;Queue -->
<g id="edge4" class="edge">
<title>Scheduler-&gt;Queue</title>
<path fill="none" stroke="black" d="M203,-282.25C203,-270.12 203,-253.62 203,-239.72"></path>
<polygon fill="black" stroke="black" points="206.5,-239.71 203,-229.71 199.5,-239.71 206.5,-239.71"></polygon>
</g>
<!-- Meta_DB -->
<g id="node5" class="node">
<title>Meta_DB</title>
<polygon fill="none" stroke="black" points="309.71,-52 238.29,-52 238.29,-16 309.71,-16 309.71,-52"></polygon>
<text text-anchor="middle" x="274" y="-29.8" font-family="Times,serif" font-size="14.00">Meta_DB</text>
</g>
<!-- Scheduler&#45;&gt;Meta_DB -->
<g id="edge2" class="edge">
<title>Scheduler-&gt;Meta_DB</title>
<path fill="none" stroke="black" d="M221.58,-282.05C244.31,-259.7 282.19,-218.59 302,-175.6 321.9,-132.43 339.89,-112.7 319,-70 317.09,-66.1 314.52,-62.51 311.56,-59.23"></path>
<polygon fill="black" stroke="black" points="313.76,-56.5 304.09,-52.17 308.95,-61.59 313.76,-56.5"></polygon>
<text text-anchor="middle" x="362.49" y="-163" font-family="Times,serif" font-size="14.00">2.save information</text>
</g>
<!-- Worker -->
<g id="node3" class="node">
<title>Worker</title>
<polygon fill="yellow" stroke="black" points="232.25,-140.8 173.75,-140.8 173.75,-104.8 232.25,-104.8 232.25,-140.8"></polygon>
<text text-anchor="middle" x="203" y="-118.6" font-family="Times,serif" font-size="14.00">Worker</text>
</g>
<!-- DAG_file&#45;&gt;Worker -->
<g id="edge6" class="edge">
<title>DAG_file-&gt;Worker</title>
<path fill="none" stroke="black" d="M64.45,-193.49C53.53,-183.12 44.48,-169.82 53.22,-158.8 66.74,-141.76 123.73,-132.23 163.37,-127.56"></path>
<polygon fill="black" stroke="black" points="163.99,-131.01 173.54,-126.42 163.21,-124.05 163.99,-131.01"></polygon>
<text text-anchor="middle" x="125.89" y="-163" font-family="Times,serif" font-size="14.00">5.Processing after reading</text>
</g>
<!-- Worker&#45;&gt;Meta_DB -->
<g id="edge7" class="edge">
<title>Worker-&gt;Meta_DB</title>
<path fill="none" stroke="black" d="M208.23,-104.72C212.09,-93.99 218.13,-80.28 226.46,-70 229.76,-65.92 233.64,-62.08 237.74,-58.53"></path>
<polygon fill="black" stroke="black" points="240.16,-61.08 245.79,-52.11 235.79,-55.61 240.16,-61.08"></polygon>
<text text-anchor="middle" x="272.27" y="-74.2" font-family="Times,serif" font-size="14.00">6.Results update</text>
</g>
<!-- Queue&#45;&gt;Worker -->
<g id="edge5" class="edge">
<title>Queue-&gt;Worker</title>
<path fill="none" stroke="black" d="M203,-193.45C203,-181.32 203,-164.82 203,-150.92"></path>
<polygon fill="black" stroke="black" points="206.5,-150.91 203,-140.91 199.5,-150.91 206.5,-150.91"></polygon>
<text text-anchor="middle" x="251.99" y="-163" font-family="Times,serif" font-size="14.00">4.start instruction</text>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>scheduler
<ul>
<li>airflow에서 brain역할
<ol type="1">
<li>parsing: a user가 만든 dag 파일을 읽어들여 문법적 오류 여부와 tasks 간의 관계를 분석</li>
<li>save information: DAG Parsing 후 DB에 정보저장 (tasks, task relations, schedule, etc.)</li>
<li>check start time: DAG 시작 실행 시간 확인</li>
<li>start instruction: DAG 시작 실행 시간마다 worker에 실행 지시</li>
</ol>
<ul>
<li>scheduler와 workder 사이에 queue 상태가 있을 수 있음</li>
</ul></li>
</ul></li>
<li>worker (Worker Container)
<ul>
<li>airflow 처리 주체 (subject)
<ol start="5" type="1">
<li>Processing after reading: scheduler가 시킨 DAG 파일을 찾아 읽고 처리</li>
<li>Results update: 처리가 되기 전/후를 Meta DB에 update함</li>
</ol></li>
</ul></li>
</ul>
</section>
</section>
<section id="cron-schedule" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Cron Schedule</h1>
<section id="cron-scheduling" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="cron-scheduling"><span class="header-section-number">2.1</span> Cron Scheduling</h2>
<ul>
<li>task가 실행되어야 하는 시간(주기)을 정하기 위한 다섯개의 필드로 구성된 문자열</li>
<li>Cron을 이용하면 왠만한 scheduling 모두 가능</li>
</ul>
<p><code>{minutes} {hour} {day} {month} {weekday}</code></p>
<table class="caption-top table">
<colgroup>
<col style="width: 13%">
<col style="width: 27%">
<col style="width: 59%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Number</th>
<th style="text-align: center;">Special Characters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">*</td>
<td>모든 값</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">-</td>
<td>범위 지정</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">,</td>
<td>여러 값 지정</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">/</td>
<td>증가값 지정. staring-value/ending-value</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">L</td>
<td>마지막 값 (일, 요일에만 설정 가능) <br> * 일에 L 입력시 해당 월의 마지막 일 의미 <br> ※ 요일에 L 입력시 토요일 의미</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">#</td>
<td>몇 번째 요일인지 지정</td>
</tr>
</tbody>
</table>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 33%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Cron schedule</th>
<th>Description</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">15 2 * * *</td>
<td>매일 02시 15분에 도는 daily batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 * * * *</td>
<td>매시 정각에 도는 시간 단위 batch</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 1 * *</td>
<td>매월 1일 0시 0분 도는 monthly batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 * * 1</td>
<td>매주 월요일 1시 10분에 도는 weekly batch</td>
<td>0: 일요일, 1: 월요일, 2: 화요일, 3:수요일, 4: 목요일, 5: 금요일, 6: 토요일</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 9-18 * * *</td>
<td>매일 9시부터 18시까지 정각마다 도는 daily batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="even">
<td style="text-align: left;">0 1 1,2,3 * *</td>
<td>매월 1일, 2일 3일만 1시에 도는 monthly batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="odd">
<td style="text-align: left;">*/30 * * *</td>
<td>삼십분마다 (0분, 30분)</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10-59/30 * * * *</td>
<td>10분부터 삼십분마다 (10분, 40분에 도는 작업)</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 1-5</td>
<td>평일만 01시 10분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 */2 * * *</td>
<td>2시간 마다 (0시, 02시, 04시 …)</td>
<td>1-23/2: 1시부터 2시간 마다</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 */2 * *</td>
<td>짝수일 0시 0분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 L * *</td>
<td>매월 마지막 일 01시 10분에 도는 montly batch</td>
<td>빈번하게 사용되는 schedule</td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 6#3</td>
<td>매월 세 번째 토요일 01시 10분 도는 montly batch</td>
<td></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="task-dependenciesconnection" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task Dependencies(Connection)</h1>
<section id="task-connection-methods" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="task-connection-methods"><span class="header-section-number">3.1</span> Task Connection Methods</h2>
<ul>
<li>Task 연결 방법 종류
<ul>
<li>&gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</li>
<li>함수 사용하기</li>
</ul></li>
<li>복잡한 Task 는 어떻게 연결하는가?</li>
</ul>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 454.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 450,-205 450,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 438,-193 438,-8 8,-8"></polygon>
<text text-anchor="middle" x="223" y="-176.4" font-family="Times,serif" font-size="14.00">Task Connection</text>
</g>
<!-- task1 -->
<g id="node1" class="node">
<title>task1</title>
<polygon fill="none" stroke="black" points="70,-133 16,-133 16,-97 70,-97 70,-133"></polygon>
<text text-anchor="middle" x="43" y="-110.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- task2 -->
<g id="node2" class="node">
<title>task2</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon>
<text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task2</text>
</g>
<!-- task1&#45;&gt;task2 -->
<g id="edge2" class="edge">
<title>task1-&gt;task2</title>
<path fill="none" stroke="black" d="M70.4,-106.9C78.48,-104.42 87.51,-101.65 96.1,-99.01"></path>
<polygon fill="black" stroke="black" points="97.39,-102.28 105.92,-96 95.33,-95.59 97.39,-102.28"></polygon>
</g>
<!-- task3 -->
<g id="node3" class="node">
<title>task3</title>
<polygon fill="none" stroke="black" points="160,-160 106,-160 106,-124 160,-124 160,-160"></polygon>
<text text-anchor="middle" x="133" y="-137.8" font-family="Times,serif" font-size="14.00">task3</text>
</g>
<!-- task1&#45;&gt;task3 -->
<g id="edge1" class="edge">
<title>task1-&gt;task3</title>
<path fill="none" stroke="black" d="M70.4,-123.1C78.48,-125.58 87.51,-128.35 96.1,-130.99"></path>
<polygon fill="black" stroke="black" points="95.33,-134.41 105.92,-134 97.39,-127.72 95.33,-134.41"></polygon>
</g>
<!-- task4 -->
<g id="node4" class="node">
<title>task4</title>
<polygon fill="none" stroke="black" points="250,-106 196,-106 196,-70 250,-70 250,-106"></polygon>
<text text-anchor="middle" x="223" y="-83.8" font-family="Times,serif" font-size="14.00">task4</text>
</g>
<!-- task2&#45;&gt;task4 -->
<g id="edge3" class="edge">
<title>task2-&gt;task4</title>
<path fill="none" stroke="black" d="M160.4,-88C168.39,-88 177.31,-88 185.82,-88"></path>
<polygon fill="black" stroke="black" points="185.92,-91.5 195.92,-88 185.92,-84.5 185.92,-91.5"></polygon>
</g>
<!-- task3&#45;&gt;task4 -->
<g id="edge4" class="edge">
<title>task3-&gt;task4</title>
<path fill="none" stroke="black" d="M160.4,-125.8C168.83,-120.63 178.29,-114.82 187.22,-109.34"></path>
<polygon fill="black" stroke="black" points="189.23,-112.22 195.92,-104 185.57,-106.25 189.23,-112.22"></polygon>
</g>
<!-- task6 -->
<g id="node6" class="node">
<title>task6</title>
<polygon fill="none" stroke="black" points="340,-79 286,-79 286,-43 340,-43 340,-79"></polygon>
<text text-anchor="middle" x="313" y="-56.8" font-family="Times,serif" font-size="14.00">task6</text>
</g>
<!-- task4&#45;&gt;task6 -->
<g id="edge6" class="edge">
<title>task4-&gt;task6</title>
<path fill="none" stroke="black" d="M250.4,-79.9C258.48,-77.42 267.51,-74.65 276.1,-72.01"></path>
<polygon fill="black" stroke="black" points="277.39,-75.28 285.92,-69 275.33,-68.59 277.39,-75.28"></polygon>
</g>
<!-- task5 -->
<g id="node5" class="node">
<title>task5</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon>
<text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task5</text>
</g>
<!-- task5&#45;&gt;task4 -->
<g id="edge5" class="edge">
<title>task5-&gt;task4</title>
<path fill="none" stroke="black" d="M160.4,-50.2C168.83,-55.37 178.29,-61.18 187.22,-66.66"></path>
<polygon fill="black" stroke="black" points="185.57,-69.75 195.92,-72 189.23,-63.78 185.57,-69.75"></polygon>
</g>
<!-- task8 -->
<g id="node8" class="node">
<title>task8</title>
<polygon fill="none" stroke="black" points="430,-79 376,-79 376,-43 430,-43 430,-79"></polygon>
<text text-anchor="middle" x="403" y="-56.8" font-family="Times,serif" font-size="14.00">task8</text>
</g>
<!-- task6&#45;&gt;task8 -->
<g id="edge8" class="edge">
<title>task6-&gt;task8</title>
<path fill="none" stroke="black" d="M340.4,-61C348.39,-61 357.31,-61 365.82,-61"></path>
<polygon fill="black" stroke="black" points="365.92,-64.5 375.92,-61 365.92,-57.5 365.92,-64.5"></polygon>
</g>
<!-- task7 -->
<g id="node7" class="node">
<title>task7</title>
<polygon fill="none" stroke="black" points="250,-52 196,-52 196,-16 250,-16 250,-52"></polygon>
<text text-anchor="middle" x="223" y="-29.8" font-family="Times,serif" font-size="14.00">task7</text>
</g>
<!-- task7&#45;&gt;task6 -->
<g id="edge7" class="edge">
<title>task7-&gt;task6</title>
<path fill="none" stroke="black" d="M250.4,-42.1C258.48,-44.58 267.51,-47.35 276.1,-49.99"></path>
<polygon fill="black" stroke="black" points="275.33,-53.41 285.92,-53 277.39,-46.72 275.33,-53.41"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<section id="사용하기-airflow-공식-추천방식" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1" class="anchored" data-anchor-id="사용하기-airflow-공식-추천방식"><span class="header-section-number">3.1.1</span> &gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</h3>
<ul>
<li>방법1 : 모든 경우의 수에 대해서 연결 가능하지만 가독성 떨어짐</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">task1 &gt;&gt; task2</span>
<span id="cb4-2">task1 &gt;&gt; task3</span>
<span id="cb4-3">task2 &gt;&gt; task4</span>
<span id="cb4-4">task3 &gt;&gt; task4</span>
<span id="cb4-5">task5 &gt;&gt; task4</span>
<span id="cb4-6">task4 &gt;&gt; task6</span>
<span id="cb4-7">task7 &gt;&gt; task6</span>
<span id="cb4-8">task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법2: 같은 레벨의 tasks는 list로 묶어 준다. 가독성이 높지만 구현이 안되는 경우 있을 수 있음</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb5-2">task5 &gt;&gt; task4</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법3: 역방향은 &lt;&lt;를 이용 (권장 하지 않음)</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4 &lt;&lt; task5</span>
<span id="cb6-2">task4 &gt;&gt; task 6 &lt;&lt; task7</span>
<span id="cb6-3">task6 &gt;&gt; task8</span></code></pre></div>
<section id="example" class="level4" data-number="3.1.1.1">
<h4 data-number="3.1.1.1" class="anchored" data-anchor-id="example"><span class="header-section-number">3.1.1.1</span> Example</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"></span>
<span id="cb7-2">from airflow import DAG</span>
<span id="cb7-3">import pendulum</span>
<span id="cb7-4">import datetime</span>
<span id="cb7-5">from airflow.operators.empty import EmptyOperator</span>
<span id="cb7-6">#EmptyOperator는 어떤 연산도 하지 않는 class</span>
<span id="cb7-7"></span>
<span id="cb7-8">with DAG(</span>
<span id="cb7-9">    dag_id="dags_task_connection",</span>
<span id="cb7-10">    schedule=None,</span>
<span id="cb7-11">    start_date=pendulum.datetime(2023,3,1, tz="Asia/Seoul"),</span>
<span id="cb7-12">    catchup=False</span>
<span id="cb7-13">) as dag:</span>
<span id="cb7-14">    # 8개의 instances: task1~task8</span>
<span id="cb7-15">    task1=EmptyOperator(</span>
<span id="cb7-16">        task_id='task1'</span>
<span id="cb7-17">    )</span>
<span id="cb7-18">    task2=EmptyOperator(</span>
<span id="cb7-19">        task_id='task2'</span>
<span id="cb7-20">    )</span>
<span id="cb7-21">    task3=EmptyOperator(</span>
<span id="cb7-22">        task_id='task3'</span>
<span id="cb7-23">    )</span>
<span id="cb7-24">    task4=EmptyOperator(</span>
<span id="cb7-25">        task_id='task4'</span>
<span id="cb7-26">    )</span>
<span id="cb7-27">    task5=EmptyOperator(</span>
<span id="cb7-28">        task_id='task5'</span>
<span id="cb7-29">    )</span>
<span id="cb7-30">    task6=EmptyOperator(</span>
<span id="cb7-31">        task_id='task6'</span>
<span id="cb7-32">    )</span>
<span id="cb7-33">    task7=EmptyOperator(</span>
<span id="cb7-34">        task_id='task7'</span>
<span id="cb7-35">    )</span>
<span id="cb7-36">    task8=EmptyOperator(</span>
<span id="cb7-37">        task_id='task8'</span>
<span id="cb7-38">    )</span>
<span id="cb7-39">  </span>
<span id="cb7-40">  task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb7-41">  task5 &gt;&gt; task4</span>
<span id="cb7-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
</section>
</section>
<section id="함수-사용하기" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2" class="anchored" data-anchor-id="함수-사용하기"><span class="header-section-number">3.1.2</span> 함수 사용하기</h3>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html">Reference: Airflow Official Document</a>
<ul>
<li>Content/Core Concepts/DAGs 참고</li>
<li>DAGs에 대한 숙련도가 올라가면 이 링크를 참고하면 매우 유용
<ul>
<li>DAG을 어떤 상황에서 어떻게 짜야하는지에 대한 guidance가 자세히 적혀 있음</li>
<li>예를 들어, dag을 생성하는 방법 (dag declaration)에는 with 문을 사용하는 방법과 standard constructor (표준 생성자)를 사용하는 방법이 있음
<ol type="1">
<li>with statement</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">import datetime</span>
<span id="cb8-2"></span>
<span id="cb8-3">from airflow import DAG</span>
<span id="cb8-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb8-5"></span>
<span id="cb8-6">with DAG(</span>
<span id="cb8-7">    dag_id="my_dag_name",</span>
<span id="cb8-8">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb8-9">    schedule="@daily",</span>
<span id="cb8-10">):</span>
<span id="cb8-11">EmptyOperator(task_id="task")</span></code></pre></div>
<ol start="2" type="1">
<li>standard constructor (class)</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">import datetime</span>
<span id="cb9-2"></span>
<span id="cb9-3">from airflow import DAG</span>
<span id="cb9-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb9-5"></span>
<span id="cb9-6">#class 생성</span>
<span id="cb9-7">my_dag = DAG( </span>
<span id="cb9-8">    dag_id="my_dag_name",</span>
<span id="cb9-9">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb9-10">    schedule="@daily",</span>
<span id="cb9-11">)</span>
<span id="cb9-12">EmptyOperator(task_id="task", dag=my_dag)</span></code></pre></div>
<ol start="3" type="1">
<li>python의 decorator기능 활용 (dag decorator to turn a function into a DAG generator)</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">import datetime</span>
<span id="cb10-2"></span>
<span id="cb10-3">from airflow.decorators import dag</span>
<span id="cb10-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb10-5"></span>
<span id="cb10-6"></span>
<span id="cb10-7">@dag(start_date=datetime.datetime(2021, 1, 1), schedule="@daily")</span>
<span id="cb10-8">def generate_dag():</span>
<span id="cb10-9">    EmptyOperator(task_id="task")</span>
<span id="cb10-10"></span>
<span id="cb10-11"></span>
<span id="cb10-12">generate_dag()</span></code></pre></div></li>
</ul></li>
</ul></li>
<li>task dependencies 설정을 위한 emplicit methods.
<ul>
<li><code>set_upstream</code> and <code>set_downstream</code></li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">first_task.set_downstream(second_task, third_task)</span>
<span id="cb11-2">third_task.set_upstream(fourth_task)</span></code></pre></div>
<ul>
<li><code>cross_downstream</code></li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow.models.baseoperator import cross_downstream</span>
<span id="cb12-2"></span>
<span id="cb12-3">#Replaces</span>
<span id="cb12-4">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op3</span>
<span id="cb12-5">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op4</span>
<span id="cb12-6">cross_downstream(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op3, op4</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span></code></pre></div>
<ul>
<li><code>chain</code></li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow.models.baseoperator import chain</span>
<span id="cb13-2"></span>
<span id="cb13-3">#Replaces op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span>
<span id="cb13-4">chain(op1, op2, op3, op4)</span>
<span id="cb13-5"></span>
<span id="cb13-6">#You can also do it dynamically</span>
<span id="cb13-7">chain(*<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">EmptyOperator(task_id='op' + i) for i in range(1, 6)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">#or</span>
<span id="cb13-10"></span>
<span id="cb13-11">from airflow.models.baseoperator import chain</span>
<span id="cb13-12"></span>
<span id="cb13-13">#Replaces</span>
<span id="cb13-14">#op1 &gt;&gt; op2 &gt;&gt; op4 &gt;&gt; op6</span>
<span id="cb13-15">#op1 &gt;&gt; op3 &gt;&gt; op5 &gt;&gt; op6</span>
<span id="cb13-16">chain(op1, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op2, op3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op4, op5</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, op6)</span></code></pre></div></li>
</ul>
</section>
</section>
</section>
<section id="external-customized-script-operation" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> External Customized Script Operation</h1>
<ul>
<li>외부 script file such as <code>*.py</code> and <code>*.sh</code> 은 docker가 인식할 수 있도록 docker의 plugins directory안에 넣어줘야 실행된다.</li>
</ul>
<section id="what-is-shell-script" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="what-is-shell-script"><span class="header-section-number">4.1</span> What is Shell Script ?</h2>
<ul>
<li>Unix/Linux Shell 명령어로 적혀진 파일로 인터프리터에 의해 한 줄씩 처리된다.
<ul>
<li>interpreter: CPU가 programming 언어를 처리하는데 크게 compiling 방식과 interpreting 방식 2가지 방식이 있다.
<ul>
<li>compiling
<ul>
<li>programming language를 목적 코드인 2진수로 처리한다음 읽음</li>
<li>compile 할 때 연산 시간은 다소 소요되지만 한 번 compile 된 script는 실행 속도가 매우 빠름</li>
<li>C, Java</li>
</ul></li>
<li>interpreting: compiling없이 한줄씩 읽는 방식
<ul>
<li>compiling방식에 비해 실행 속도가 느림</li>
<li>python, shell</li>
</ul></li>
</ul></li>
</ul></li>
<li>bashOperator를 이용하여 shell script 처리</li>
<li>Echo, mkdir, cd, cp, tar, touch 등의 기본적인 쉘 명령어를 입력하여 작성하며 변수를 입력받거나 For 문, if 문 그리고 함수도 사용 가능</li>
<li>확장자가 없어도 동작하지만 주로 파일명에 .sh 확장자를 붙인다.</li>
</ul>
</section>
<section id="why-to-need-shell-script" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="why-to-need-shell-script"><span class="header-section-number">4.2</span> Why to Need Shell Script?</h2>
<ul>
<li>bashOperator를 이용하다면 bashOperator안에 shell 명령어들을 써서 넣어도 동작은 하지만</li>
<li>쉘 명령어를 이용하여 <strong>복잡한 로직을 처리하는 경우</strong> shell script를 이용하는 것이 좋다
<ul>
<li>예를들어, sftp (source sever)를 통해 csv나 json같은 파일을 받은 후 전처리하여 DB에 Insert &amp; tar.gz으로 압축하고 싶을때, 이렇게 복잡한 tasks를 bashOperator에 모두 기입하기 보다는 script를 짜서 bashOperator에서 호출하는 방식이 가독성이나 유지보수 측면에서 더 효율적이다.</li>
</ul></li>
<li><strong>쉘 명령어 재사용을 위한 경우</strong>
<ul>
<li>위의 예시를 server 100대에 대하여 반복 수행할 때 logic이 같으면 shell script를 100번 호출하는 것이 더 간편</li>
<li>sftp: 접속할 때 IP, Port, account, pw 가 필요한데 이런 것을 변수화 시키고 DB전처리 로직을 shell script에 짜 놓으면 됨.</li>
</ul></li>
</ul>
</section>
<section id="worker-컨테이너가-외부-스크립트shell를-수행하려면" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="worker-컨테이너가-외부-스크립트shell를-수행하려면"><span class="header-section-number">4.3</span> Worker 컨테이너가 외부 스크립트(shell)를 수행하려면?</h2>
<ul>
<li><p>문제점</p>
<ul>
<li>컨테이너는 외부의 파일을 인식할 수 없다. shell script를 wsl directory 어딘가에 넣으면 container가 인식을 못함.</li>
<li>컨테이너 안에 파일을 만들어주면 컨테이너 재시작시 파일이 사라진다. docker에서 이미지를 띄우는 것을 container를 만들었다라고 하는데 container 재 실행시 초기화 되어 실행된다. (docker의 특징). 그래서 컨테이너 안에 shell script 파일 넣어도 재시작시 삭제가 됨.</li>
</ul></li>
<li><p>해결방법</p>
<p><img src="kmink3225.netlify.app/images/airflow/worker-container-shell-operation.PNG" class="img-fluid"></p>
<ul>
<li>빨간 네모박스의 plugins에 shell script를 저장한다. airflow document에서는 customized python and shell script를 plugins에 저장하는 것을 권장</li>
</ul></li>
<li><p>example</p></li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">cd github-repository/plugins/shell</span>
<span id="cb14-2">vi select_fruit.sh #i 누르면 편집가능하고 편집 후 esc+wq! 입력하고 enter치면 저장하고 나감</span>
<span id="cb14-3">chmod +x select_fruit.sh #실행 권한을 부여</span>
<span id="cb14-4">./select_fruit.sh kmkim # ./test2.sh 는 test2.sh을 실행한다는 의미 출력물: kmkim 출력됨</span>
<span id="cb14-5">git add -A</span>
<span id="cb14-6">git commit -m "shell script example"</span>
<span id="cb14-7">git push</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode select_fruit.sh code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># echo $1 #첫 번째 인수 출력</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FRUIT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> APPLE <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Apple!"</span></span>
<span id="cb15-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> ORANGE <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Orange!"</span></span>
<span id="cb15-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> Grape <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Grape!"</span></span>
<span id="cb15-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> </span>
<span id="cb15-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected other Fruit!"</span></span>
<span id="cb15-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<ul>
<li>container에서 github repository에 있는 plugins/shell에 있는 shell script 인식하게 하기
<ul>
<li><p><code>vi docker-compose.yaml</code> 에서 67line 수정</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">volumes:</span></span>
<span id="cb16-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb16-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb16-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb16-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div></li>
</ul></li>
<li>select_fruit.sh 실행 권한 부여</li>
</ul>
<p>아래와 같이 6번의 task 수행 실패가 발생했는데 처음엔 volumne의 path 설정이 잘못 됐는지 알고 계속 <code>docker-compose.yaml</code>을 살펴봤다. 하지만 이상이 없는 것을 확인하고 task의 log를 확인해 봤는데 다음과 같은 error가 뜬것을 확인할 수 있었다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/external_script_operation.PNG" class="img-fluid figure-img"></p>
<figcaption>execution error</figcaption>
</figure>
</div>
<p><code>/bin/bash: line 1: /opt/***/plugins/shell/select_fruit.sh: Permission denied</code></p>
<p>이럴 땐 다음과 같이 실행권한을 부여하게 되면 해결된다.</p>
<p><code>(airflow) kmkim@K100230201051:~/airflow/plugins/shell$ chmod +x select_fruit.sh</code></p>
</section>
</section>
<section id="email-operator" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Email Operator</h1>
<ul>
<li><p>이메일 전송해주는 오퍼레이터</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">email_t1 = EmailOperator(</span>
<span id="cb17-2">  task_id='email_t1',</span>
<span id="cb17-3">  to='hjkim_sun@naver.com',</span>
<span id="cb17-4">  subject='Airflow 처리결과',</span>
<span id="cb17-5">  html_content='정상 처리되었습니다.'</span>
<span id="cb17-6">)</span></code></pre></div></li>
<li><p>구글 메일 서버 사용</p></li>
</ul>
<section id="presetting" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="presetting"><span class="header-section-number">5.1</span> Presetting</h2>
<section id="google-settings" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="google-settings"><span class="header-section-number">5.1.1</span> Google Settings</h3>
<ul>
<li>이메일 전송을 위해 사전 셋팅 작업 필요(Google)
<ul>
<li>google mail server사용</li>
<li>gmail &gt;&gt; settings(설정) &gt;&gt; See all settings (모든 설정 보기) &gt;&gt; Forwarding and POP/IMAP (전달 및 POP/IMAP) &gt;&gt; IMAP access (IMAP 접근): Enable IMAP (IMAP 사용)</li>
<li>Manage Your Google Acccount (구글 계정 관리) &gt;&gt; Security (보안) &gt;&gt; 2-Step Verification (2단계 인증) &gt;&gt; App Passwords: 앱비밀번호 setting &gt;&gt; select app: Mail , Select device: Windows Computer &gt;&gt; Generate app pasword message window popped up</li>
</ul></li>
</ul>
</section>
<section id="airflow-settings" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="airflow-settings"><span class="header-section-number">5.1.2</span> Airflow Settings</h3>
<ul>
<li>사전 설정 작업 (airflow)
<ul>
<li>docker-compose.yaml 편집 (environment 항목에 추가)</li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 띄어쓰기 주의</span></span>
<span id="cb18-2">AIRFLOW__SMTP__SMTP_HOST: 'smtp.gmail.com'  </span>
<span id="cb18-3">AIRFLOW__SMTP__SMTP_USER: '{gmail 계정}'</span>
<span id="cb18-4">AIRFLOW__SMTP__SMTP_PASSWORD: '{앱비밀번호}'</span>
<span id="cb18-5">AIRFLOW__SMTP__SMTP_PORT: 587</span>
<span id="cb18-6">AIRFLOW__SMTP__SMTP_MAIL_FROM: '{gmail 계정}' # 이메일을 누가 보내는 것으로 할건지 정함</span></code></pre></div></li>
</ul>
</section>
</section>
<section id="emailoperator-작성" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="emailoperator-작성"><span class="header-section-number">5.2</span> EmailOperator 작성</h2>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"></span>
<span id="cb19-2">from airflow import DAG</span>
<span id="cb19-3">import pendulum</span>
<span id="cb19-4">import datetime</span>
<span id="cb19-5">from airflow.operators.email import EmailOperator</span>
<span id="cb19-6"></span>
<span id="cb19-7">with DAG(</span>
<span id="cb19-8">    dag_id="dags_email_operator",</span>
<span id="cb19-9">    schedule="0 8 1 * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb19-10">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb19-11">    catchup=False</span>
<span id="cb19-12">) as dag:</span>
<span id="cb19-13">    sending_email_task=EmailOperator(</span>
<span id="cb19-14">        task_id='sending_email_task',</span>
<span id="cb19-15">        to='sdf@naver.com',</span>
<span id="cb19-16">        cc=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'sdf2@gmail.com', 'sdf3@gmail.com'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb19-17">        subject='Airflow Test',</span>
<span id="cb19-18">        html_content= """</span>
<span id="cb19-19">            this is a test for airflow.&lt;br/&gt;&lt;br/&gt;</span>
<span id="cb19-20">            </span>
<span id="cb19-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            {{ ds }}&lt;br/&gt;</span></span>
<span id="cb19-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>
</div>

</ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
