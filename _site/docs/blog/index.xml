<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kwangmin Kim</title>
<link>kk3225.netlify.app/docs/blog/</link>
<atom:link href="kk3225.netlify.app/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>blog</description>
<generator>quarto-1.4.543</generator>
<lastBuildDate>Mon, 29 Sep 2025 05:37:01 GMT</lastBuildDate>
<item>
  <title>OpenAI API 키 발급 및 설정</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/01-OpenAI-APIKey.html</link>
  <description><![CDATA[ 




<section id="openai-api-키-발급-및-설정" class="level2">
<h2 class="anchored" data-anchor-id="openai-api-키-발급-및-설정">OpenAI API 키 발급 및 설정</h2>
<ol type="1">
<li>OpenAI API 키 발급</li>
</ol>
<ul>
<li><a href="https://wikidocs.net/233342">OpenAI API 키 발급방법</a> 글을 참고해 주세요.</li>
</ul>
<ol type="1">
<li><code>.env</code> 파일 설정</li>
</ol>
<ul>
<li><p>프로젝트 루트 디렉토리에 <code>.env</code> 파일을 생성합니다.</p></li>
<li><p>파일에 API 키를 다음 형식으로 저장합니다: <code>OPENAI_API_KEY</code> 에 발급받은 API KEY 를 입력합니다.</p></li>
<li><p><code>.env</code> 파일에 발급한 API KEY 를 입력합니다.</p></li>
</ul>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangChain 업데이트</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -r https://raw.githubusercontent.com/teddylee777/langchain-kr/main/requirements.txt</span></span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb2-5">load_dotenv()</span></code></pre></div>
</div>
<p>API Key 가 잘 설정되었는지 확인합니다.</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[API KEY]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>os<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>][:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
</div>
<p>설치된 LangChain 버전을 확인합니다.</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> importlib.metadata <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> version</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[LangChain 관련 패키지 버전]"</span>)</span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> package_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain"</span>,</span>
<span id="cb4-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-core"</span>,</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-experimental"</span>,</span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-community"</span>,</span>
<span id="cb4-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-openai"</span>,</span>
<span id="cb4-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-teddynote"</span>,</span>
<span id="cb4-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-huggingface"</span>,</span>
<span id="cb4-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-google-genai"</span>,</span>
<span id="cb4-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-anthropic"</span>,</span>
<span id="cb4-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-cohere"</span>,</span>
<span id="cb4-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-chroma"</span>,</span>
<span id="cb4-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-elasticsearch"</span>,</span>
<span id="cb4-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-upstage"</span>,</span>
<span id="cb4-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-cohere"</span>,</span>
<span id="cb4-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-milvus"</span>,</span>
<span id="cb4-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"langchain-text-splitters"</span>,</span>
<span id="cb4-21">]:</span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb4-23">        package_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> version(package_name)</span>
<span id="cb4-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>package_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>package_version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb4-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>package_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: 설치되지 않음"</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/01-OpenAI-APIKey.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>ChatOpenAI</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/02-OpenAI-LLM.html</link>
  <description><![CDATA[ 




<div id="3bf28f9e" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="93ac45ce" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .env 파일에 LANGCHAIN_API_KEY를 입력합니다.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-7">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH01-Basic"</span>)</span></code></pre></div>
</div>
<section id="chatopenai" class="level2">
<h2 class="anchored" data-anchor-id="chatopenai">ChatOpenAI</h2>
<p>OpenAI 사의 채팅 전용 Large Language Model(llm) 입니다.</p>
<p>객체를 생성할 때 다음을 옵션 값을 지정할 수 있습니다. 옵션에 대한 상세 설명은 다음과 같습니다.</p>
<p><code>temperature</code></p>
<ul>
<li>사용할 샘플링 온도는 0과 2 사이에서 선택합니다. 0.8과 같은 높은 값은 출력을 더 무작위하게 만들고, 0.2와 같은 낮은 값은 출력을 더 집중되고 결정론적으로 만듭니다.</li>
</ul>
<p><code>max_tokens</code></p>
<ul>
<li>채팅 완성에서 생성할 토큰의 최대 개수입니다.</li>
</ul>
<p><code>model_name</code>: 적용 가능한 모델 리스트 - <code>gpt-4.1</code> - <code>gpt-4.1-mini</code> - <code>gpt-4.1-nano</code> - <code>gpt-4.1</code> - <code>gpt-4.1-mini</code> - <code>o1-mini</code>, <code>o3</code>, <code>o4-mini</code>: tier5 계정 이상만 사용 가능. $1,000 이상 충전해야 tier5 계정이 됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/images/gpt-models3.png" class="img-fluid figure-img"></p>
<figcaption>gpt-models.png</figcaption>
</figure>
</div>
<ul>
<li>링크: https://platform.openai.com/docs/models</li>
</ul>
<div id="5fc161c2" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 객체 생성</span></span>
<span id="cb3-4">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb3-5">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 창의성 (0.0 ~ 2.0)</span></span>
<span id="cb3-6">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델명</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의내용</span></span>
<span id="cb3-10">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 수도는 어디인가요?"</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의</span></span>
<span id="cb3-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[답변]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>llm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>invoke(question)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<section id="답변의-형식ai-message" class="level3">
<h3 class="anchored" data-anchor-id="답변의-형식ai-message">답변의 형식(AI Message)</h3>
<div id="2af58a9a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의내용</span></span>
<span id="cb4-2">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 수도는 어디인가요?"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의</span></span>
<span id="cb4-5">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.invoke(question)</span></code></pre></div>
</div>
<div id="24ecdeb9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">response</span></code></pre></div>
</div>
<div id="ffd49c11" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">response.content</span></code></pre></div>
</div>
<div id="4df69214" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">response.response_metadata</span></code></pre></div>
</div>
</section>
<section id="logprob-활성화" class="level3">
<h3 class="anchored" data-anchor-id="logprob-활성화">LogProb 활성화</h3>
<p>주어진 텍스트에 대한 모델의 <strong>토큰 확률의 로그 값</strong> 을 의미합니다. 토큰이란 문장을 구성하는 개별 단어나 문자 등의 요소를 의미하고, 확률은 <strong>모델이 그 토큰을 예측할 확률</strong>을 나타냅니다.</p>
<div id="fe733438" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 객체 생성</span></span>
<span id="cb8-2">llm_with_logprob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb8-3">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 창의성 (0.0 ~ 2.0)</span></span>
<span id="cb8-4">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최대 토큰수</span></span>
<span id="cb8-5">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델명</span></span>
<span id="cb8-6">).bind(logprobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="8ae2d627" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의내용</span></span>
<span id="cb9-2">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 수도는 어디인가요?"</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의</span></span>
<span id="cb9-5">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm_with_logprob.invoke(question)</span></code></pre></div>
</div>
<div id="e6b0b9f7" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb10-2">response.response_metadata</span></code></pre></div>
</div>
</section>
<section id="스트리밍-출력" class="level3">
<h3 class="anchored" data-anchor-id="스트리밍-출력">스트리밍 출력</h3>
<p>스트리밍 옵션은 질의에 대한 답변을 실시간으로 받을 때 유용합니다.</p>
<div id="1bbc5d03" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트림 방식으로 질의</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># answer 에 스트리밍 답변의 결과를 받습니다.</span></span>
<span id="cb11-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 아름다운 관광지 10곳과 주소를 알려주세요!"</span>)</span></code></pre></div>
</div>
<div id="87a90e66" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 방식으로 각 토큰을 출력합니다. (실시간 출력)</span></span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> answer:</span>
<span id="cb12-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token.content, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="c6f079b9" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트림 방식으로 질의</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># answer 에 스트리밍 답변의 결과를 받습니다.</span></span>
<span id="cb13-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 아름다운 관광지 10곳과 주소를 알려주세요!"</span>)</span>
<span id="cb13-6">stream_response(answer)</span></code></pre></div>
</div>
</section>
</section>
<section id="프롬프트-캐싱" class="level2">
<h2 class="anchored" data-anchor-id="프롬프트-캐싱">프롬프트 캐싱</h2>
<ul>
<li>참고 링크: https://platform.openai.com/docs/guides/prompt-caching</li>
</ul>
<p>프롬프트 캐싱 기능을 활용하면 반복하여 동일하게 입력으로 들어가는 토큰에 대한 비용을 아낄 수 있습니다.</p>
<p>다만, 캐싱에 활용할 토큰은 고정된 PREFIX 를 주는 것이 권장됩니다.</p>
<p>아래의 예시에서는 <code>&lt;PROMPT_CACHING&gt;</code> 부분에 고정된 토큰을 주어 캐싱을 활용하는 방법을 설명합니다.</p>
<div id="b8b23cdc" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb14-2"></span>
<span id="cb14-3">very_long_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">당신은 매우 친절한 AI 어시스턴트 입니다. </span></span>
<span id="cb14-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">당신의 임무는 주어진 질문에 대해 친절하게 답변하는 것입니다.</span></span>
<span id="cb14-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">아래는 사용자의 질문에 답변할 때 참고할 수 있는 정보입니다.</span></span>
<span id="cb14-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">주어진 정보를 참고하여 답변해 주세요.</span></span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;WANT_TO_CACHE_HERE&gt;</span></span>
<span id="cb14-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#참고:</span></span>
<span id="cb14-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">**Prompt Caching**</span></span>
<span id="cb14-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Model prompts often contain repetitive content, like system prompts and common instructions. OpenAI routes API requests to servers that recently processed the same prompt, making it cheaper and faster than processing a prompt from scratch. This can reduce latency by up to 80% and cost by 50</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">or long prompts. Prompt Caching works automatically on all your API requests (no code changes required) and has no additional fees associated with it.</span></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Prompt Caching is enabled for the following models:</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">gpt-4.1 (excludes gpt-4.1-2024-05-13 and chatgpt-4.1-latest)</span></span>
<span id="cb14-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">gpt-4.1-mini</span></span>
<span id="cb14-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o1-preview</span></span>
<span id="cb14-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o1-mini</span></span>
<span id="cb14-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This guide describes how prompt caching works in detail, so that you can optimize your prompts for lower latency and cost.</span></span>
<span id="cb14-21"></span>
<span id="cb14-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Structuring prompts</span></span>
<span id="cb14-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cache hits are only possible for exact prefix matches within a prompt. To realize caching benefits, place static content like instructions and examples at the beginning of your prompt, and put variable content, such as user-specific information, at the end. This also applies to images and tools, which must be identical between requests.</span></span>
<span id="cb14-24"></span>
<span id="cb14-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">How it works</span></span>
<span id="cb14-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Caching is enabled automatically for prompts that are 1024 tokens or longer. When you make an API request, the following steps occur:</span></span>
<span id="cb14-27"></span>
<span id="cb14-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cache Lookup: The system checks if the initial portion (prefix) of your prompt is stored in the cache.</span></span>
<span id="cb14-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cache Hit: If a matching prefix is found, the system uses the cached result. This significantly decreases latency and reduces costs.</span></span>
<span id="cb14-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cache Miss: If no matching prefix is found, the system processes your full prompt. After processing, the prefix of your prompt is cached for future requests.</span></span>
<span id="cb14-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cached prefixes generally remain active for 5 to 10 minutes of inactivity. However, during off-peak periods, caches may persist for up to one hour.</span></span>
<span id="cb14-32"></span>
<span id="cb14-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Requirements</span></span>
<span id="cb14-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Caching is available for prompts containing 1024 tokens or more, with cache hits occurring in increments of 128 tokens. Therefore, the number of cached tokens in a request will always fall within the following sequence: 1024, 1152, 1280, 1408, and so on, depending on the prompt's length.</span></span>
<span id="cb14-35"></span>
<span id="cb14-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">All requests, including those with fewer than 1024 tokens, will display a cached_tokens field of the usage.prompt_tokens_details chat completions object indicating how many of the prompt tokens were a cache hit. For requests under 1024 tokens, cached_tokens will be zero.</span></span>
<span id="cb14-37"></span>
<span id="cb14-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">What can be cached</span></span>
<span id="cb14-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Messages: The complete messages array, encompassing system, user, and assistant interactions.</span></span>
<span id="cb14-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Images: Images included in user messages, either as links or as base64-encoded data, as well as multiple images can be sent. Ensure the detail parameter is set identically, as it impacts image tokenization.</span></span>
<span id="cb14-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Tool use: Both the messages array and the list of available tools can be cached, contributing to the minimum 1024 token requirement.</span></span>
<span id="cb14-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Structured outputs: The structured output schema serves as a prefix to the system message and can be cached.</span></span>
<span id="cb14-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Best practices</span></span>
<span id="cb14-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Structure prompts with static or repeated content at the beginning and dynamic content at the end.</span></span>
<span id="cb14-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Monitor metrics such as cache hit rates, latency, and the percentage of tokens cached to optimize your prompt and caching strategy.</span></span>
<span id="cb14-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">To increase cache hits, use longer prompts and make API requests during off-peak hours, as cache evictions are more frequent during peak times.</span></span>
<span id="cb14-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Prompts that haven't been used recently are automatically removed from the cache. To minimize evictions, maintain a consistent stream of requests with the same prompt prefix.</span></span>
<span id="cb14-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Frequently asked questions</span></span>
<span id="cb14-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">How is data privacy maintained for caches?</span></span>
<span id="cb14-50"></span>
<span id="cb14-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Prompt caches are not shared between organizations. Only members of the same organization can access caches of identical prompts.</span></span>
<span id="cb14-52"></span>
<span id="cb14-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Does Prompt Caching affect output token generation or the final response of the API?</span></span>
<span id="cb14-54"></span>
<span id="cb14-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Prompt Caching does not influence the generation of output tokens or the final response provided by the API. Regardless of whether caching is used, the output generated will be identical. This is because only the prompt itself is cached, while the actual response is computed anew each time based on the cached prompt. </span></span>
<span id="cb14-56"></span>
<span id="cb14-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Is there a way to manually clear the cache?</span></span>
<span id="cb14-58"></span>
<span id="cb14-59"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Manual cache clearing is not currently available. Prompts that have not been encountered recently are automatically cleared from the cache. Typical cache evictions occur after 5-10 minutes of inactivity, though sometimes lasting up to a maximum of one hour during off-peak periods.</span></span>
<span id="cb14-60"></span>
<span id="cb14-61"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Will I be expected to pay extra for writing to Prompt Caching?</span></span>
<span id="cb14-62"></span>
<span id="cb14-63"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">No. Caching happens automatically, with no explicit action needed or extra cost paid to use the caching feature.</span></span>
<span id="cb14-64"></span>
<span id="cb14-65"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Do cached prompts contribute to TPM rate limits?</span></span>
<span id="cb14-66"></span>
<span id="cb14-67"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Yes, as caching does not affect rate limits.</span></span>
<span id="cb14-68"></span>
<span id="cb14-69"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Is discounting for Prompt Caching available on Scale Tier and the Batch API?</span></span>
<span id="cb14-70"></span>
<span id="cb14-71"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Discounting for Prompt Caching is not available on the Batch API but is available on Scale Tier. With Scale Tier, any tokens that are spilled over to the shared API will also be eligible for caching.</span></span>
<span id="cb14-72"></span>
<span id="cb14-73"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Does Prompt Caching work on Zero Data Retention requests?</span></span>
<span id="cb14-74"></span>
<span id="cb14-75"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Yes, Prompt Caching is compliant with existing Zero Data Retention policies.</span></span>
<span id="cb14-76"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/WANT_TO_CACHE_HERE&gt;</span></span>
<span id="cb14-77"></span>
<span id="cb14-78"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Question:</span></span>
<span id="cb14-79"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb14-80"></span>
<span id="cb14-81"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<div id="5a62903d" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_openai_callback</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> get_openai_callback() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cb:</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 요청</span></span>
<span id="cb15-5">    answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.invoke(</span>
<span id="cb15-6">        very_long_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"프롬프트 캐싱 기능에 대해 2문장으로 설명하세요"</span>)</span>
<span id="cb15-7">    )</span>
<span id="cb15-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cb)</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐싱된 토큰 출력</span></span>
<span id="cb15-10">    cached_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> answer.response_metadata[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_usage"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt_tokens_details"</span>][</span>
<span id="cb15-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cached_tokens"</span></span>
<span id="cb15-12">    ]</span>
<span id="cb15-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"캐싱된 토큰: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cached_tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="4babc2f6" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> get_openai_callback() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cb:</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 요청</span></span>
<span id="cb16-3">    answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.invoke(</span>
<span id="cb16-4">        very_long_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"프롬프트 캐싱 기능에 대해 2문장으로 설명하세요"</span>)</span>
<span id="cb16-5">    )</span>
<span id="cb16-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cb)</span>
<span id="cb16-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐싱된 토큰 출력</span></span>
<span id="cb16-8">    cached_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> answer.response_metadata[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_usage"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt_tokens_details"</span>][</span>
<span id="cb16-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cached_tokens"</span></span>
<span id="cb16-10">    ]</span>
<span id="cb16-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"캐싱된 토큰: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cached_tokens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
</section>
<section id="멀티모달-모델이미지-인식" class="level2">
<h2 class="anchored" data-anchor-id="멀티모달-모델이미지-인식">멀티모달 모델(이미지 인식)</h2>
<p>멀티모달은 여러 가지 형태의 정보(모달)를 통합하여 처리하는 기술이나 접근 방식을 의미합니다. 이는 다음과 같은 다양한 데이터 유형을 포함할 수 있습니다.</p>
<ul>
<li>텍스트: 문서, 책, 웹 페이지 등의 글자로 된 정보</li>
<li>이미지: 사진, 그래픽, 그림 등 시각적 정보</li>
<li>오디오: 음성, 음악, 소리 효과 등의 청각적 정보</li>
<li>비디오: 동영상 클립, 실시간 스트리밍 등 시각적 및 청각적 정보의 결합</li>
</ul>
<p><code>gpt-4.1</code> 모델은 이미지 인식 기능(Vision) 이 추가되어 있는 모델입니다.</p>
<div id="a859058d" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultiModal</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 객체 생성</span></span>
<span id="cb17-5">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb17-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 창의성 (0.0 ~ 2.0)</span></span>
<span id="cb17-7">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델명</span></span>
<span id="cb17-8">)</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 멀티모달 객체 생성</span></span>
<span id="cb17-11">multimodal_llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiModal(llm)</span></code></pre></div>
</div>
<div id="0c16ef3c" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 샘플 이미지 주소(웹사이트로 부터 바로 인식)</span></span>
<span id="cb18-2">IMAGE_URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://t3.ftcdn.net/jpg/03/77/33/96/360_F_377339633_Rtv9I77sSmSNcev8bEcnVxTHrXB4nRJ5.jpg"</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이미지 파일로 부터 질의</span></span>
<span id="cb18-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multimodal_llm.stream(IMAGE_URL)</span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 방식으로 각 토큰을 출력합니다. (실시간 출력)</span></span>
<span id="cb18-7">stream_response(answer)</span></code></pre></div>
</div>
<div id="006ec2bf" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로컬 PC 에 저장되어 있는 이미지의 경로 입력</span></span>
<span id="cb19-2">IMAGE_PATH_FROM_FILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./images/sample-image.png"</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이미지 파일로 부터 질의(스트림 방식)</span></span>
<span id="cb19-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multimodal_llm.stream(IMAGE_PATH_FROM_FILE)</span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 방식으로 각 토큰을 출력합니다. (실시간 출력)</span></span>
<span id="cb19-7">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="system-user-프롬프트-수정" class="level2">
<h2 class="anchored" data-anchor-id="system-user-프롬프트-수정">System, User 프롬프트 수정</h2>
<div id="4be092af" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""당신은 표(재무제표) 를 해석하는 금융 AI 어시스턴트 입니다. </span></span>
<span id="cb20-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">당신의 임무는 주어진 테이블 형식의 재무제표를 바탕으로 흥미로운 사실을 정리하여 친절하게 답변하는 것입니다."""</span></span>
<span id="cb20-3"></span>
<span id="cb20-4">user_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""당신에게 주어진 표는 회사의 재무제표 입니다. 흥미로운 사실을 정리하여 답변하세요."""</span></span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 멀티모달 객체 생성</span></span>
<span id="cb20-7">multimodal_llm_with_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiModal(</span>
<span id="cb20-8">    llm, system_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt, user_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user_prompt</span>
<span id="cb20-9">)</span></code></pre></div>
</div>
<div id="51735d05" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로컬 PC 에 저장되어 있는 이미지의 경로 입력</span></span>
<span id="cb21-2">IMAGE_PATH_FROM_FILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://storage.googleapis.com/static.fastcampus.co.kr/prod/uploads/202212/080345-661/kwon-01.png"</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이미지 파일로 부터 질의(스트림 방식)</span></span>
<span id="cb21-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multimodal_llm_with_prompt.stream(IMAGE_PATH_FROM_FILE)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 방식으로 각 토큰을 출력합니다. (실시간 출력)</span></span>
<span id="cb21-8">stream_response(answer)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/02-OpenAI-LLM.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>기본 예시: 프롬프트 + 모델 + 출력 파서</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/03-LCEL.html</link>
  <description><![CDATA[ 




<section id="기본-예시-프롬프트-모델-출력-파서" class="level2">
<h2 class="anchored" data-anchor-id="기본-예시-프롬프트-모델-출력-파서">기본 예시: 프롬프트 + 모델 + 출력 파서</h2>
<p>가장 기본적이고 일반적인 사용 사례는 prompt 템플릿과 모델을 함께 연결하는 것입니다. 이것이 어떻게 작동하는지 보기 위해, 각 나라별 수도를 물어보는 Chain을 생성해 보겠습니다.</p>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH01-Basic"</span>)</span></code></pre></div>
</div>
</section>
<section id="프롬프트-템플릿의-활용" class="level2">
<h2 class="anchored" data-anchor-id="프롬프트-템플릿의-활용">프롬프트 템플릿의 활용</h2>
<p><code>PromptTemplate</code></p>
<ul>
<li>사용자의 입력 변수를 사용하여 완전한 프롬프트 문자열을 만드는 데 사용되는 템플릿입니다</li>
<li>사용법
<ul>
<li><code>template</code>: 템플릿 문자열입니다. 이 문자열 내에서 중괄호 <code>{}</code>는 변수를 나타냅니다.</li>
<li><code>input_variables</code>: 중괄호 안에 들어갈 변수의 이름을 리스트로 정의합니다.</li>
</ul></li>
</ul>
<p><code>input_variables</code></p>
<ul>
<li>input_variables는 PromptTemplate에서 사용되는 변수의 이름을 정의하는 리스트입니다.</li>
</ul>
<div id="cell-4" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span></code></pre></div>
</div>
<p><code>from_template()</code> 메소드를 사용하여 PromptTemplate 객체 생성</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># template 정의</span></span>
<span id="cb4-2">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 어디인가요?"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from_template 메소드를 이용하여 PromptTemplate 객체 생성</span></span>
<span id="cb4-5">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(template)</span>
<span id="cb4-6">prompt_template</span></code></pre></div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 생성</span></span>
<span id="cb5-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt_template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span>
<span id="cb5-3">prompt</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 생성</span></span>
<span id="cb6-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt_template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>)</span>
<span id="cb6-3">prompt</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb7-2"></span>
<span id="cb7-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb7-4">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>,</span>
<span id="cb7-5">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb7-6">)</span></code></pre></div>
</div>
</section>
<section id="chain-생성" class="level2">
<h2 class="anchored" data-anchor-id="chain-생성">Chain 생성</h2>
<section id="lcellangchain-expression-language" class="level3">
<h3 class="anchored" data-anchor-id="lcellangchain-expression-language">LCEL(LangChain Expression Language)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/images/lcel.png" class="img-fluid figure-img"></p>
<figcaption>lcel.png</figcaption>
</figure>
</div>
<p>여기서 우리는 LCEL을 사용하여 다양한 구성 요소를 단일 체인으로 결합합니다</p>
<pre><code>chain = prompt | model | output_parser</code></pre>
<p><code>|</code> 기호는 <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">unix 파이프 연산자</a>와 유사하며, 서로 다른 구성 요소를 연결하고 한 구성 요소의 출력을 다음 구성 요소의 입력으로 전달합니다.</p>
<p>이 체인에서 사용자 입력은 프롬프트 템플릿으로 전달되고, 그런 다음 프롬프트 템플릿 출력은 모델로 전달됩니다. 각 구성 요소를 개별적으로 살펴보면 무슨 일이 일어나고 있는지 이해할 수 있습니다.</p>
<div id="cell-11" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 를 PromptTemplate 객체로 생성합니다.</span></span>
<span id="cb9-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{topic}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 에 대해 쉽게 설명해주세요."</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model</span></code></pre></div>
</div>
</section>
<section id="invoke-호출" class="level3">
<h3 class="anchored" data-anchor-id="invoke-호출">invoke() 호출</h3>
<ul>
<li>python 딕셔너리 형태로 입력값을 전달합니다.(키: 값)</li>
<li>invoke() 함수 호출 시, 입력값을 전달합니다.</li>
</ul>
<div id="cell-13" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input 딕셔너리에 주제를 '인공지능 모델의 학습 원리'으로 설정합니다.</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"인공지능 모델의 학습 원리"</span>}</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 객체와 model 객체를 파이프(|) 연산자로 연결하고 invoke 메서드를 사용하여 input을 전달합니다.</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이를 통해 AI 모델이 생성한 메시지를 반환합니다.</span></span>
<span id="cb11-3">chain.invoke(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span></code></pre></div>
</div>
<p>아래는 스트리밍을 출력하는 예시 입니다.</p>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위한 요청</span></span>
<span id="cb12-2">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb12-4">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="출력파서output-parser" class="level3">
<h3 class="anchored" data-anchor-id="출력파서output-parser">출력파서(Output Parser)</h3>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrOutputParser</span>
<span id="cb13-2"></span>
<span id="cb13-3">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StrOutputParser()</span></code></pre></div>
</div>
<p>Chain 에 출력파서를 추가합니다.</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트, 모델, 출력 파서를 연결하여 처리 체인을 구성합니다.</span></span>
<span id="cb14-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 객체의 invoke 메서드를 사용하여 input을 전달합니다.</span></span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"인공지능 모델의 학습 원리"</span>}</span>
<span id="cb15-3">chain.invoke(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span></code></pre></div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위한 요청</span></span>
<span id="cb16-2">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb16-4">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="템플릿을-변경하여-적용" class="level3">
<h3 class="anchored" data-anchor-id="템플릿을-변경하여-적용">템플릿을 변경하여 적용</h3>
<ul>
<li>아래의 프롬프트 내용을 얼마든지 <strong>변경</strong> 하여 테스트 해볼 수 있습니다.</li>
<li><code>model_name</code> 역시 변경하여 테스트가 가능합니다.</li>
</ul>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">당신은 영어를 가르치는 10년차 영어 선생님입니다. 주어진 상황에 맞는 영어 회화를 작성해 주세요.</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">양식은 [FORMAT]을 참고하여 작성해 주세요.</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#상황:</span></span>
<span id="cb17-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#FORMAT:</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 영어 회화:</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 한글 해석:</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 이용하여 프롬프트를 생성합니다.</span></span>
<span id="cb17-14">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(template)</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 챗모델을 초기화합니다.</span></span>
<span id="cb17-17">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-nano"</span>)</span>
<span id="cb17-18"></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 문자열 출력 파서를 초기화합니다.</span></span>
<span id="cb17-20">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StrOutputParser()</span></code></pre></div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 구성합니다.</span></span>
<span id="cb18-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span></code></pre></div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 완성된 Chain을 실행하여 답변을 얻습니다.</span></span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"저는 식당에 가서 음식을 주문하고 싶어요"</span>}))</span></code></pre></div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 완성된 Chain을 실행하여 답변을 얻습니다.</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위한 요청</span></span>
<span id="cb20-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"저는 식당에 가서 음식을 주문하고 싶어요"</span>})</span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb20-5">stream_response(answer)</span></code></pre></div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이번에는 question 을 '미국에서 피자 주문'으로 설정하여 실행합니다.</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위한 요청</span></span>
<span id="cb21-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국에서 피자 주문"</span>})</span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb21-5">stream_response(answer)</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/03-LCEL.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>LCEL 인터페이스</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/04-LCEL-Advanced.html</link>
  <description><![CDATA[ 




<section id="lcel-인터페이스" class="level2">
<h2 class="anchored" data-anchor-id="lcel-인터페이스">LCEL 인터페이스</h2>
<p>사용자 정의 체인을 가능한 쉽게 만들 수 있도록, <a href="https://api.python.langchain.com/en/stable/runnables/langchain_core.runnables.base.Runnable.html#langchain_core.runnables.base.Runnable"><code>Runnable</code></a> 프로토콜을 구현했습니다.</p>
<p><code>Runnable</code> 프로토콜은 대부분의 컴포넌트에 구현되어 있습니다.</p>
<p>이는 표준 인터페이스로, 사용자 정의 체인을 정의하고 표준 방식으로 호출하는 것을 쉽게 만듭니다. 표준 인터페이스에는 다음이 포함됩니다.</p>
<ul>
<li><code>stream</code>: 응답의 청크를 스트리밍합니다.</li>
<li><code>invoke</code>: 입력에 대해 체인을 호출합니다.</li>
<li><code>batch</code>: 입력 목록에 대해 체인을 호출합니다.</li>
</ul>
<p>비동기 메소드도 있습니다.</p>
<ul>
<li><code>astream</code>: 비동기적으로 응답의 청크를 스트리밍합니다.</li>
<li><code>ainvoke</code>: 비동기적으로 입력에 대해 체인을 호출합니다.</li>
<li><code>abatch</code>: 비동기적으로 입력 목록에 대해 체인을 호출합니다.</li>
<li><code>astream_log</code>: 최종 응답뿐만 아니라 발생하는 중간 단계를 스트리밍합니다.</li>
</ul>
<div id="b5a5ffc2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="a4ccea96" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH01-Basic"</span>)</span></code></pre></div>
</div>
<p>LCEL 문법을 사용하여 chain 을 생성합니다.</p>
<div id="735d72ca" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrOutputParser</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 모델을 인스턴스화합니다.</span></span>
<span id="cb3-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI()</span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주어진 토픽에 대한 농담을 요청하는 프롬프트 템플릿을 생성합니다.</span></span>
<span id="cb3-8">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{topic}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 에 대하여 3문장으로 설명해줘."</span>)</span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트와 모델을 연결하여 대화 체인을 생성합니다.</span></span>
<span id="cb3-10">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span></code></pre></div>
</div>
</section>
<section id="stream-실시간-출력" class="level2">
<h2 class="anchored" data-anchor-id="stream-실시간-출력">stream: 실시간 출력</h2>
<p>이 함수는 <code>chain.stream</code> 메서드를 사용하여 주어진 토픽에 대한 데이터 스트림을 생성하고, 이 스트림을 반복하여 각 데이터의 내용(<code>content</code>)을 즉시 출력합니다. <code>end=""</code> 인자는 출력 후 줄바꿈을 하지 않도록 설정하며, <code>flush=True</code> 인자는 출력 버퍼를 즉시 비우도록 합니다.</p>
<div id="f6304f90" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain.stream 메서드를 사용하여 '멀티모달' 토픽에 대한 스트림을 생성하고 반복합니다.</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"멀티모달"</span>}):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트림에서 받은 데이터의 내용을 출력합니다. 줄바꿈 없이 이어서 출력하고, 버퍼를 즉시 비웁니다.</span></span>
<span id="cb4-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="invoke-호출" class="level2">
<h2 class="anchored" data-anchor-id="invoke-호출">invoke: 호출</h2>
<p><code>chain</code> 객체의 <code>invoke</code> 메서드는 주제를 인자로 받아 해당 주제에 대한 처리를 수행합니다.</p>
<div id="6fb8bf06" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 객체의 invoke 메서드를 호출하고, 'ChatGPT'라는 주제로 딕셔너리를 전달합니다.</span></span>
<span id="cb5-2">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ChatGPT"</span>})</span></code></pre></div>
</div>
</section>
<section id="batch-배치단위-실행" class="level2">
<h2 class="anchored" data-anchor-id="batch-배치단위-실행">batch: 배치(단위 실행)</h2>
<p>함수 <code>chain.batch</code>는 여러 개의 딕셔너리를 포함하는 리스트를 인자로 받아, 각 딕셔너리에 있는 <code>topic</code> 키의 값을 사용하여 일괄 처리를 수행합니다.</p>
<div id="687d223d" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주어진 토픽 리스트를 batch 처리하는 함수 호출</span></span>
<span id="cb6-2">chain.batch([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ChatGPT"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Instagram"</span>}])</span></code></pre></div>
</div>
<p><code>max_concurrency</code> 매개변수를 사용하여 동시 요청 수를 설정할 수 있습니다</p>
<p><code>config</code> 딕셔너리는 <code>max_concurrency</code> 키를 통해 동시에 처리할 수 있는 최대 작업 수를 설정합니다. 여기서는 최대 3개의 작업을 동시에 처리하도록 설정되어 있습니다.</p>
<div id="2d5398d9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">chain.batch(</span>
<span id="cb7-2">    [</span>
<span id="cb7-3">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ChatGPT"</span>},</span>
<span id="cb7-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Instagram"</span>},</span>
<span id="cb7-5">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"멀티모달"</span>},</span>
<span id="cb7-6">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"프로그래밍"</span>},</span>
<span id="cb7-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"머신러닝"</span>},</span>
<span id="cb7-8">    ],</span>
<span id="cb7-9">    config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_concurrency"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>},</span>
<span id="cb7-10">)</span></code></pre></div>
</div>
</section>
<section id="async-stream-비동기-스트림" class="level2">
<h2 class="anchored" data-anchor-id="async-stream-비동기-스트림">async stream: 비동기 스트림</h2>
<p>함수 <code>chain.astream</code>은 비동기 스트림을 생성하며, 주어진 토픽에 대한 메시지를 비동기적으로 처리합니다.</p>
<p>비동기 for 루프(<code>async for</code>)를 사용하여 스트림에서 메시지를 순차적으로 받아오고, <code>print</code> 함수를 통해 메시지의 내용(<code>s.content</code>)을 즉시 출력합니다. <code>end=""</code>는 출력 후 줄바꿈을 하지 않도록 설정하며, <code>flush=True</code>는 출력 버퍼를 강제로 비워 즉시 출력되도록 합니다.</p>
<div id="3f8a9e91" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 비동기 스트림을 사용하여 'YouTube' 토픽의 메시지를 처리합니다.</span></span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chain.astream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YouTube"</span>}):</span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 메시지 내용을 출력합니다. 줄바꿈 없이 바로 출력하고 버퍼를 비웁니다.</span></span>
<span id="cb8-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="async-invoke-비동기-호출" class="level2">
<h2 class="anchored" data-anchor-id="async-invoke-비동기-호출">async invoke: 비동기 호출</h2>
<p><code>chain</code> 객체의 <code>ainvoke</code> 메서드는 비동기적으로 주어진 인자를 사용하여 작업을 수행합니다. 여기서는 <code>topic</code>이라는 키와 <code>NVDA</code>(엔비디아의 티커) 라는 값을 가진 딕셔너리를 인자로 전달하고 있습니다. 이 메서드는 특정 토픽에 대한 처리를 비동기적으로 요청하는 데 사용될 수 있습니다.</p>
<div id="2038557a" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 비동기 체인 객체의 'ainvoke' 메서드를 호출하여 'NVDA' 토픽을 처리합니다.</span></span>
<span id="cb9-2">my_process <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.ainvoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NVDA"</span>})</span></code></pre></div>
</div>
<div id="ea8077cb" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 비동기로 처리되는 프로세스가 완료될 때까지 기다립니다.</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> my_process</span></code></pre></div>
</div>
</section>
<section id="async-batch-비동기-배치" class="level2">
<h2 class="anchored" data-anchor-id="async-batch-비동기-배치">async batch: 비동기 배치</h2>
<p>함수 <code>abatch</code>는 비동기적으로 일련의 작업을 일괄 처리합니다.</p>
<p>이 예시에서는 <code>chain</code> 객체의 <code>abatch</code> 메서드를 사용하여 <code>topic</code> 에 대한 작업을 비동기적으로 처리하고 있습니다.</p>
<p><code>await</code> 키워드는 해당 비동기 작업이 완료될 때까지 기다리는 데 사용됩니다.</p>
<div id="53a00116" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주어진 토픽에 대해 비동기적으로 일괄 처리를 수행합니다.</span></span>
<span id="cb11-2">my_abatch_process <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.abatch(</span>
<span id="cb11-3">    [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YouTube"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Instagram"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topic"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Facebook"</span>}]</span>
<span id="cb11-4">)</span></code></pre></div>
</div>
<div id="8823211b" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 비동기로 처리되는 일괄 처리 프로세스가 완료될 때까지 기다립니다.</span></span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> my_abatch_process</span></code></pre></div>
</div>
</section>
<section id="parallel-병렬성" class="level2">
<h2 class="anchored" data-anchor-id="parallel-병렬성">Parallel: 병렬성</h2>
<p>LangChain Expression Language가 병렬 요청을 지원하는 방법을 살펴봅시다. 예를 들어, <code>RunnableParallel</code>을 사용할 때, 각 요소를 병렬로 실행합니다.</p>
<p><code>langchain_core.runnables</code> 모듈의 <code>RunnableParallel</code> 클래스를 사용하여 두 가지 작업을 병렬로 실행하는 예시를 보여줍니다.</p>
<p><code>ChatPromptTemplate.from_template</code> 메서드를 사용하여 주어진 <code>country</code>에 대한 <strong>수도</strong> 와 <strong>면적</strong> 을 구하는 두 개의 체인(<code>chain1</code>, <code>chain2</code>)을 만듭니다.</p>
<p>이 체인들은 각각 <code>model</code>과 파이프(<code>|</code>) 연산자를 통해 연결됩니다. 마지막으로, <code>RunnableParallel</code> 클래스를 사용하여 이 두 체인을 <code>capital</code>와 <code>area</code>이라는 키로 결합하여 동시에 실행할 수 있는 <code>combined</code> 객체를 생성합니다.</p>
<div id="c2b42d05" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.runnables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RunnableParallel</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {country} 의 수도를 물어보는 체인을 생성합니다.</span></span>
<span id="cb13-4">chain1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb13-5">    PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 의 수도는 어디야?"</span>)</span>
<span id="cb13-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model</span>
<span id="cb13-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span>
<span id="cb13-8">)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {country} 의 면적을 물어보는 체인을 생성합니다.</span></span>
<span id="cb13-11">chain2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb13-12">    PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 의 면적은 얼마야?"</span>)</span>
<span id="cb13-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model</span>
<span id="cb13-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span>
<span id="cb13-15">)</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위의 2개 체인을 동시에 생성하는 병렬 실행 체인을 생성합니다.</span></span>
<span id="cb13-18">combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunnableParallel(capital<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chain1, area<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chain2)</span></code></pre></div>
</div>
<p><code>chain1.invoke()</code> 함수는 <code>chain1</code> 객체의 <code>invoke</code> 메서드를 호출합니다.</p>
<p>이때, <code>country</code>이라는 키에 <code>대한민국</code>라는 값을 가진 딕셔너리를 인자로 전달합니다.</p>
<div id="f04dbce0" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain1 를 실행합니다.</span></span>
<span id="cb14-2">chain1.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>})</span></code></pre></div>
</div>
<p>이번에는 <code>chain2.invoke()</code> 를 호출합니다. <code>country</code> 키에 다른 국가인 <code>미국</code> 을 전달합니다.</p>
<div id="5b055566" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain2 를 실행합니다.</span></span>
<span id="cb15-2">chain2.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>})</span></code></pre></div>
</div>
<p><code>combined</code> 객체의 <code>invoke</code> 메서드는 주어진 <code>country</code>에 대한 처리를 수행합니다.</p>
<p>이 예제에서는 <code>대한민국</code>라는 주제를 <code>invoke</code> 메서드에 전달하여 실행합니다.</p>
<div id="6fa82d78" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 병렬 실행 체인을 실행합니다.</span></span>
<span id="cb16-2">combined.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>})</span></code></pre></div>
</div>
<section id="배치에서의-병렬-처리" class="level3">
<h3 class="anchored" data-anchor-id="배치에서의-병렬-처리">배치에서의 병렬 처리</h3>
<p>병렬 처리는 다른 실행 가능한 코드와 결합될 수 있습니다. 배치와 병렬 처리를 사용해 보도록 합시다.</p>
<p><code>chain1.batch</code> 함수는 여러 개의 딕셔너리를 포함하는 리스트를 인자로 받아, 각 딕셔너리에 있는 “topic” 키에 해당하는 값을 처리합니다. 이 예시에서는 “대한민국”와 “미국”라는 두 개의 토픽을 배치 처리하고 있습니다.</p>
<div id="0754e0ae" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 배치 처리를 수행합니다.</span></span>
<span id="cb17-2">chain1.batch([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>}])</span></code></pre></div>
</div>
<p><code>chain2.batch</code> 함수는 여러 개의 딕셔너리를 리스트 형태로 받아, 일괄 처리(batch)를 수행합니다.</p>
<p>이 예시에서는 <code>대한민국</code>와 <code>미국</code>라는 두 가지 국가에 대한 처리를 요청합니다.</p>
<div id="1f076b08" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 배치 처리를 수행합니다.</span></span>
<span id="cb18-2">chain2.batch([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>}])</span></code></pre></div>
</div>
<p><code>combined.batch</code> 함수는 주어진 데이터를 배치로 처리하는 데 사용됩니다. 이 예시에서는 두 개의 딕셔너리 객체를 포함하는 리스트를 인자로 받아 각각 <code>대한민국</code>와 <code>미국</code> 두 나라에 대한 데이터를 배치 처리합니다.</p>
<div id="aeec745e" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주어진 데이터를 배치로 처리합니다.</span></span>
<span id="cb19-2">combined.batch([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>}])</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/04-LCEL-Advanced.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>데이터를 효과적으로 전달하는 방법</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/05-Runnable.html</link>
  <description><![CDATA[ 




<div id="cell-0" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .env 파일을 읽어서 환경변수로 설정</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 토큰 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH01-Basic"</span>)</span></code></pre></div>
</div>
<section id="데이터를-효과적으로-전달하는-방법" class="level2">
<h2 class="anchored" data-anchor-id="데이터를-효과적으로-전달하는-방법">데이터를 효과적으로 전달하는 방법</h2>
<ul>
<li><code>RunnablePassthrough</code> 는 입력을 변경하지 않거나 추가 키를 더하여 전달할 수 있습니다.</li>
<li><code>RunnablePassthrough()</code> 가 단독으로 호출되면, 단순히 입력을 받아 그대로 전달합니다.</li>
<li><code>RunnablePassthrough.assign(...)</code> 방식으로 호출되면, 입력을 받아 assign 함수에 전달된 추가 인수를 추가합니다.</li>
</ul>
<section id="runnablepassthrough" class="level3">
<h3 class="anchored" data-anchor-id="runnablepassthrough">RunnablePassthrough</h3>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 와 llm 을 생성합니다.</span></span>
<span id="cb3-6">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{num}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 의 10배는?"</span>)</span>
<span id="cb3-7">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 생성합니다.</span></span>
<span id="cb3-10">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<p>chain 을 <code>invoke()</code> 하여 실행할 때는 입력 데이터의 타입이 딕셔너리여야 합니다.</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행합니다.</span></span>
<span id="cb4-2">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>})</span></code></pre></div>
</div>
<p>하지만, langchain 라이브러리가 업데이트 되면서 1개의 변수만 템플릿에 포함하고 있다면, 값만 전달하는 것도 가능합니다.</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행합니다.</span></span>
<span id="cb5-2">chain.invoke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>아래는 <code>RunnablePassthrough</code> 를 사용한 예제입니다.</p>
<p><code>RunnablePassthrough</code> 는 <code>runnable</code> 객체이며, <code>runnable</code> 객체는 <code>invoke()</code> 메소드를 사용하여 별도 실행이 가능합니다.</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.runnables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RunnablePassthrough</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># runnable</span></span>
<span id="cb6-4">RunnablePassthrough().invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>})</span></code></pre></div>
</div>
<p>아래는 <code>RunnablePassthrough</code> 로 체인을 구성하는 예제입니다.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">runnable_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: RunnablePassthrough()} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ChatOpenAI()</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dict 값이 RunnablePassthrough() 로 변경되었습니다.</span></span>
<span id="cb7-4">runnable_chain.invoke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>다음은 <code>RunnablePassthrough.assign()</code> 을 사용하는 경우와 비교한 결과입니다.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">RunnablePassthrough().invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>
</div>
<p><code>RunnablePassthrough.assign()</code></p>
<ul>
<li>입력 값으로 들어온 값의 key/value 쌍과 새롭게 할당된 key/value 쌍을 합칩니다.</li>
</ul>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 키: num, 할당(assign) 키: new_num</span></span>
<span id="cb9-2">(RunnablePassthrough.assign(new_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)).invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>
</div>
</section>
</section>
<section id="runnableparallel" class="level2">
<h2 class="anchored" data-anchor-id="runnableparallel">RunnableParallel</h2>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.runnables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RunnableParallel</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RunnableParallel 인스턴스를 생성합니다. 이 인스턴스는 여러 Runnable 인스턴스를 병렬로 실행할 수 있습니다.</span></span>
<span id="cb10-4">runnable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunnableParallel(</span>
<span id="cb10-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RunnablePassthrough 인스턴스를 'passed' 키워드 인자로 전달합니다. 이는 입력된 데이터를 그대로 통과시키는 역할을 합니다.</span></span>
<span id="cb10-6">    passed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RunnablePassthrough(),</span>
<span id="cb10-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'extra' 키워드 인자로 RunnablePassthrough.assign을 사용하여, 'mult' 람다 함수를 할당합니다. 이 함수는 입력된 딕셔너리의 'num' 키에 해당하는 값을 3배로 증가시킵니다.</span></span>
<span id="cb10-8">    extra<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RunnablePassthrough.assign(mult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'modified' 키워드 인자로 람다 함수를 전달합니다. 이 함수는 입력된 딕셔너리의 'num' 키에 해당하는 값에 1을 더합니다.</span></span>
<span id="cb10-10">    modified<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># runnable 인스턴스에 {'num': 1} 딕셔너리를 입력으로 전달하여 invoke 메소드를 호출합니다.</span></span>
<span id="cb10-14">runnable.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>
</div>
<p>Chain 도 RunnableParallel 적용할 수 있습니다.</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">chain1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb11-2">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: RunnablePassthrough()}</span>
<span id="cb11-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 의 수도는?"</span>)</span>
<span id="cb11-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ChatOpenAI()</span>
<span id="cb11-5">)</span>
<span id="cb11-6">chain2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb11-7">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: RunnablePassthrough()}</span>
<span id="cb11-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 의 면적은?"</span>)</span>
<span id="cb11-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ChatOpenAI()</span>
<span id="cb11-10">)</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">combined_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RunnableParallel(capital<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chain1, area<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chain2)</span>
<span id="cb12-2">combined_chain.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span></code></pre></div>
</div>
</section>
<section id="runnablelambda" class="level2">
<h2 class="anchored" data-anchor-id="runnablelambda">RunnableLambda</h2>
<p>RunnableLambda 를 사용하여 사용자 정의 함수를 맵핑할 수 있습니다.</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrOutputParser</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb13-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb13-5"></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_today(a):</span>
<span id="cb13-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오늘 날짜를 가져오기</span></span>
<span id="cb13-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> datetime.today().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%b-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-10"></span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오늘 날짜를 출력</span></span>
<span id="cb13-13">get_today(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.runnables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RunnableLambda, RunnablePassthrough</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 와 llm 을 생성합니다.</span></span>
<span id="cb14-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb14-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{today}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 가 생일인 유명인 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{n}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 명을 나열하세요. 생년월일을 표기해 주세요."</span></span>
<span id="cb14-6">)</span>
<span id="cb14-7">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>)</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 생성합니다.</span></span>
<span id="cb14-10">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb14-11">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"today"</span>: RunnableLambda(get_today), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: RunnablePassthrough()}</span>
<span id="cb14-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> prompt</span>
<span id="cb14-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span>
<span id="cb14-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span>
<span id="cb14-15">)</span></code></pre></div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력</span></span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(chain.invoke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
</div>
<p><code>itemgetter</code> 를 사용하여 특정 키를 추출합니다.</p>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itemgetter</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.runnables <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RunnableLambda</span>
<span id="cb16-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb16-6"></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 문장의 길이를 반환하는 함수입니다.</span></span>
<span id="cb16-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> length_function(text):</span>
<span id="cb16-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text)</span>
<span id="cb16-11"></span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 두 문장의 길이를 곱한 값을 반환하는 함수입니다.</span></span>
<span id="cb16-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _multiple_length_function(text1, text2):</span>
<span id="cb16-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text2)</span>
<span id="cb16-16"></span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># _multiple_length_function 함수를 사용하여 두 문장의 길이를 곱한 값을 반환하는 함수입니다.</span></span>
<span id="cb16-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> multiple_length_function(_dict):</span>
<span id="cb16-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _multiple_length_function(_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text1"</span>], _dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text2"</span>])</span>
<span id="cb16-21"></span>
<span id="cb16-22"></span>
<span id="cb16-23">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{a}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{b}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 는 무엇인가요?"</span>)</span>
<span id="cb16-24">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI()</span>
<span id="cb16-25"></span>
<span id="cb16-26">chain1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model</span>
<span id="cb16-27"></span>
<span id="cb16-28">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-29">    {</span>
<span id="cb16-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: itemgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word1"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> RunnableLambda(length_function),</span>
<span id="cb16-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text1"</span>: itemgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word1"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text2"</span>: itemgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word2"</span>)}</span>
<span id="cb16-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> RunnableLambda(multiple_length_function),</span>
<span id="cb16-33">    }</span>
<span id="cb16-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> prompt</span>
<span id="cb16-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model</span>
<span id="cb16-36">)</span></code></pre></div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>})</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/01-Basic/05-Runnable.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>PromptTemplate</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/01-PromptTemplate.html</link>
  <description><![CDATA[ 




<section id="prompttemplate" class="level2">
<h2 class="anchored" data-anchor-id="prompttemplate">PromptTemplate</h2>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH02-Prompt"</span>)</span></code></pre></div>
</div>
<p>LLM 객체를 정의합니다.</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"></span>
<span id="cb3-3">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI()</span></code></pre></div>
</div>
<section id="방법-1.-from_template-메소드를-사용하여-prompttemplate-객체-생성" class="level3">
<h3 class="anchored" data-anchor-id="방법-1.-from_template-메소드를-사용하여-prompttemplate-객체-생성">방법 1. from_template() 메소드를 사용하여 PromptTemplate 객체 생성</h3>
<ul>
<li>치환될 변수를 <code>{ 변수 }</code> 로 묶어서 템플릿을 정의합니다.</li>
</ul>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># template 정의. {country}는 변수로, 이후에 값이 들어갈 자리를 의미</span></span>
<span id="cb4-4">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 어디인가요?"</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from_template 메소드를 이용하여 PromptTemplate 객체 생성</span></span>
<span id="cb4-7">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(template)</span>
<span id="cb4-8">prompt</span></code></pre></div>
</div>
<p><code>country</code> 변수에 값을 넣어서 문장을 생성할 수 있습니다.</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 생성. format 메소드를 이용하여 변수에 값을 넣어줌</span></span>
<span id="cb5-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span>
<span id="cb5-3">prompt</span></code></pre></div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># template 정의</span></span>
<span id="cb6-2">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 어디인가요?"</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from_template 메소드를 이용하여 PromptTemplate 객체 생성</span></span>
<span id="cb6-5">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(template)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 생성</span></span>
<span id="cb6-8">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># country 변수에 입력된 값이 자동으로 치환되어 수행됨</span></span>
<span id="cb7-2">chain.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>).content</span></code></pre></div>
</div>
</section>
<section id="방법-2.-prompttemplate-객체-생성과-동시에-prompt-생성" class="level3">
<h3 class="anchored" data-anchor-id="방법-2.-prompttemplate-객체-생성과-동시에-prompt-생성">방법 2. PromptTemplate 객체 생성과 동시에 prompt 생성</h3>
<p>추가 유효성 검사를 위해 <code>input_variables</code> 를 명시적으로 지정하세요.</p>
<p>이러한 변수는 인스턴스화 중에 템플릿 문자열에 있는 변수와 비교하여 불일치하는 경우 예외를 발생시킵니다.</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># template 정의</span></span>
<span id="cb8-2">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 어디인가요?"</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PromptTemplate 객체를 활용하여 prompt_template 생성</span></span>
<span id="cb8-5">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb8-6">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>template,</span>
<span id="cb8-7">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>],</span>
<span id="cb8-8">)</span>
<span id="cb8-9"></span>
<span id="cb8-10">prompt</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 생성</span></span>
<span id="cb9-2">prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span></code></pre></div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># template 정의</span></span>
<span id="cb10-2">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country1}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">과 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country2}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 각각 어디인가요?"</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PromptTemplate 객체를 활용하여 prompt_template 생성</span></span>
<span id="cb10-5">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb10-6">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>template,</span>
<span id="cb10-7">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country1"</span>],</span>
<span id="cb10-8">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb10-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"미국"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dictionary 형태로 partial_variables를 전달</span></span>
<span id="cb10-10">    },</span>
<span id="cb10-11">)</span>
<span id="cb10-12"></span>
<span id="cb10-13">prompt</span></code></pre></div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span></code></pre></div>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">prompt_partial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.partial(country2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"캐나다"</span>)</span>
<span id="cb12-2">prompt_partial</span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">prompt_partial.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt_partial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">chain.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>).content</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"호주"</span>}).content</span></code></pre></div>
</div>
</section>
<section id="partial_variables-부분-변수-채움" class="level3">
<h3 class="anchored" data-anchor-id="partial_variables-부분-변수-채움"><code>partial_variables</code>: 부분 변수 채움</h3>
<p><code>partial</code>을 사용하는 일반적인 용도는 함수를 부분적으로 사용하는 것입니다. 이 사용 사례는 <strong>항상 공통된 방식으로 가져오고 싶은 변수</strong> 가 있는 경우입니다.</p>
<p>대표적인 예가 <strong>날짜나 시간</strong> 입니다.</p>
<p>항상 현재 날짜가 표시되기를 원하는 프롬프트가 있다고 가정해 보겠습니다. 프롬프트에 하드 코딩할 수도 없고, 다른 입력 변수와 함께 전달하는 것도 번거롭습니다. 이 경우 항상 현재 <strong>날짜를 반환하는 함수</strong> 를 사용하여 프롬프트를 부분적으로 변경할 수 있으면 매우 편리합니다.</p>
<p>다음의 코드는 오늘 날짜를 구하는 파이썬 코드입니다.</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오늘 날짜를 출력</span></span>
<span id="cb17-4">datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%B </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 날짜를 반환하는 함수 정의</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_today():</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%B </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb19-2">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"오늘의 날짜는 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{today}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 입니다. 오늘이 생일인 유명인 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{n}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">명을 나열해 주세요. 생년월일을 표기해주세요."</span>,</span>
<span id="cb19-3">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>],</span>
<span id="cb19-4">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb19-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"today"</span>: get_today  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dictionary 형태로 partial_variables를 전달</span></span>
<span id="cb19-6">    },</span>
<span id="cb19-7">)</span></code></pre></div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt 생성</span></span>
<span id="cb20-2">prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 생성합니다.</span></span>
<span id="cb21-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행 후 결과를 확인합니다.</span></span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(chain.invoke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).content)</span></code></pre></div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행 후 결과를 확인합니다.</span></span>
<span id="cb23-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"today"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jan 02"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}).content)</span></code></pre></div>
</div>
</section>
</section>
<section id="파일로부터-template-읽어오기" class="level2">
<h2 class="anchored" data-anchor-id="파일로부터-template-읽어오기">파일로부터 template 읽어오기</h2>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_prompt</span>
<span id="cb24-2"></span>
<span id="cb24-3">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_prompt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts/fruit_color.yaml"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb24-4">prompt</span></code></pre></div>
</div>
<p>Window 사용자 중 이전의 코드가 오류가 나는 경우 아래의 코드로 실행하세요(인코딩 설정)</p>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_prompt</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Windows 사용자 only: 인코딩을 cp949로 설정</span></span>
<span id="cb25-4">load_prompt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts/fruit_color.yaml"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span></code></pre></div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(fruit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사과"</span>)</span></code></pre></div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">prompt2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_prompt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts/capital.yaml"</span>)</span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prompt2.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>))</span></code></pre></div>
</div>
</section>
<section id="chatprompttemplate" class="level2">
<h2 class="anchored" data-anchor-id="chatprompttemplate">ChatPromptTemplate</h2>
<p><code>ChatPromptTemplate</code> 은 대화목록을 프롬프트로 주입하고자 할 때 활용할 수 있습니다.</p>
<p>메시지는 튜플(tuple) 형식으로 구성하며, (<code>role</code>, <code>message</code>) 로 구성하여 리스트로 생성할 수 있습니다.</p>
<p><strong>role</strong> - <code>"system"</code>: 시스템 설정 메시지 입니다. 주로 전역설정과 관련된 프롬프트입니다. - <code>"human"</code> : 사용자 입력 메시지 입니다. - <code>"ai"</code>: AI 의 답변 메시지입니다.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb28-2"></span>
<span id="cb28-3">chat_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 수도는 어디인가요?"</span>)</span>
<span id="cb28-4">chat_prompt</span></code></pre></div>
</div>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">chat_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국"</span>)</span></code></pre></div>
</div>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb30-2"></span>
<span id="cb30-3">chat_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb30-4">    [</span>
<span id="cb30-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># role, message</span></span>
<span id="cb30-6">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 친절한 AI 어시스턴트입니다. 당신의 이름은 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 입니다."</span>),</span>
<span id="cb30-7">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"반가워요!"</span>),</span>
<span id="cb30-8">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"안녕하세요! 무엇을 도와드릴까요?"</span>),</span>
<span id="cb30-9">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{user_input}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb30-10">    ]</span>
<span id="cb30-11">)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 챗 message 를 생성합니다.</span></span>
<span id="cb30-14">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_template.format_messages(</span>
<span id="cb30-15">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"테디"</span>, user_input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신의 이름은 무엇입니까?"</span></span>
<span id="cb30-16">)</span>
<span id="cb30-17">messages</span></code></pre></div>
</div>
<p>생성한 메시지를 바로 주입하여 결과를 받을 수 있습니다.</p>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">llm.invoke(messages).content</span></code></pre></div>
</div>
<p>이번에는 체인을 생성해 보겠습니다.</p>
<div id="cell-45" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-46" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Teddy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신의 이름은 무엇입니까?"</span>}).content</span></code></pre></div>
</div>
</section>
<section id="messageplaceholder" class="level2">
<h2 class="anchored" data-anchor-id="messageplaceholder">MessagePlaceholder</h2>
<p>또한 LangChain은 포맷하는 동안 렌더링할 메시지를 완전히 제어할 수 있는 <code>MessagePlaceholder</code> 를 제공합니다.</p>
<p>메시지 프롬프트 템플릿에 어떤 역할을 사용해야 할지 확실하지 않거나 서식 지정 중에 메시지 목록을 삽입하려는 경우 유용할 수 있습니다.</p>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrOutputParser</span>
<span id="cb34-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate, MessagesPlaceholder</span>
<span id="cb34-3"></span>
<span id="cb34-4">chat_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb34-5">    [</span>
<span id="cb34-6">        (</span>
<span id="cb34-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb34-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 요약 전문 AI 어시스턴트입니다. 당신의 임무는 주요 키워드로 대화를 요약하는 것입니다."</span>,</span>
<span id="cb34-9">        ),</span>
<span id="cb34-10">        MessagesPlaceholder(variable_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conversation"</span>),</span>
<span id="cb34-11">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"지금까지의 대화를 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{word_count}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 단어로 요약합니다."</span>),</span>
<span id="cb34-12">    ]</span>
<span id="cb34-13">)</span>
<span id="cb34-14">chat_prompt</span></code></pre></div>
</div>
<p><code>conversation</code> 대화목록을 나중에 추가하고자 할 때 <code>MessagesPlaceholder</code> 를 사용할 수 있습니다.</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">formatted_chat_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb35-2">    word_count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb35-3">    conversation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb35-4">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"안녕하세요! 저는 오늘 새로 입사한 테디 입니다. 만나서 반갑습니다."</span>),</span>
<span id="cb35-5">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"반가워요! 앞으로 잘 부탁 드립니다."</span>),</span>
<span id="cb35-6">    ],</span>
<span id="cb35-7">)</span>
<span id="cb35-8"></span>
<span id="cb35-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(formatted_chat_prompt)</span></code></pre></div>
</div>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 생성</span></span>
<span id="cb36-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span></code></pre></div>
</div>
<div id="cell-52" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 실행 및 결과확인</span></span>
<span id="cb37-2">chain.invoke(</span>
<span id="cb37-3">    {</span>
<span id="cb37-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word_count"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb37-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conversation"</span>: [</span>
<span id="cb37-6">            (</span>
<span id="cb37-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>,</span>
<span id="cb37-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"안녕하세요! 저는 오늘 새로 입사한 테디 입니다. 만나서 반갑습니다."</span>,</span>
<span id="cb37-9">            ),</span>
<span id="cb37-10">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"반가워요! 앞으로 잘 부탁 드립니다."</span>),</span>
<span id="cb37-11">        ],</span>
<span id="cb37-12">    }</span>
<span id="cb37-13">)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/01-PromptTemplate.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>FewShotPromptTemplate</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/02-FewShotTemplates.html</link>
  <description><![CDATA[ 




<div id="cell-0" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -qU langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH02-Prompt"</span>)</span></code></pre></div>
</div>
<section id="fewshotprompttemplate" class="level2">
<h2 class="anchored" data-anchor-id="fewshotprompttemplate">FewShotPromptTemplate</h2>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 객체 생성</span></span>
<span id="cb3-5">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb3-6">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 창의성</span></span>
<span id="cb3-7">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델명</span></span>
<span id="cb3-8">)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의내용</span></span>
<span id="cb3-11">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 수도는 뭐야?"</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의</span></span>
<span id="cb3-14">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.stream(question)</span>
<span id="cb3-15">stream_response(answer)</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts.few_shot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FewShotPromptTemplate</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrOutputParser</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6">examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-7">    {</span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"스티브 잡스와 아인슈타인 중 누가 더 오래 살았나요?"</span>,</span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""이 질문에 추가 질문이 필요한가요: 예.</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 스티브 잡스는 몇 살에 사망했나요?</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 스티브 잡스는 56세에 사망했습니다.</span></span>
<span id="cb4-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 아인슈타인은 몇 살에 사망했나요?</span></span>
<span id="cb4-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 아인슈타인은 76세에 사망했습니다.</span></span>
<span id="cb4-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">최종 답변은: 아인슈타인</span></span>
<span id="cb4-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb4-16">    },</span>
<span id="cb4-17">    {</span>
<span id="cb4-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"네이버의 창립자는 언제 태어났나요?"</span>,</span>
<span id="cb4-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""이 질문에 추가 질문이 필요한가요: 예.</span></span>
<span id="cb4-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 네이버의 창립자는 누구인가요?</span></span>
<span id="cb4-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 네이버는 이해진에 의해 창립되었습니다.</span></span>
<span id="cb4-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 이해진은 언제 태어났나요?</span></span>
<span id="cb4-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 이해진은 1967년 6월 22일에 태어났습니다.</span></span>
<span id="cb4-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">최종 답변은: 1967년 6월 22일</span></span>
<span id="cb4-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb4-26">    },</span>
<span id="cb4-27">    {</span>
<span id="cb4-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"율곡 이이의 어머니가 태어난 해의 통치하던 왕은 누구인가요?"</span>,</span>
<span id="cb4-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""이 질문에 추가 질문이 필요한가요: 예.</span></span>
<span id="cb4-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 율곡 이이의 어머니는 누구인가요?</span></span>
<span id="cb4-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 율곡 이이의 어머니는 신사임당입니다.</span></span>
<span id="cb4-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 신사임당은 언제 태어났나요?</span></span>
<span id="cb4-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 신사임당은 1504년에 태어났습니다.</span></span>
<span id="cb4-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 1504년에 조선을 통치한 왕은 누구인가요?</span></span>
<span id="cb4-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 1504년에 조선을 통치한 왕은 연산군입니다.</span></span>
<span id="cb4-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">최종 답변은: 연산군</span></span>
<span id="cb4-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb4-38">    },</span>
<span id="cb4-39">    {</span>
<span id="cb4-40">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"올드보이와 기생충의 감독이 같은 나라 출신인가요?"</span>,</span>
<span id="cb4-41">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""이 질문에 추가 질문이 필요한가요: 예.</span></span>
<span id="cb4-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 올드보이의 감독은 누구인가요?</span></span>
<span id="cb4-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 올드보이의 감독은 박찬욱입니다.</span></span>
<span id="cb4-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 박찬욱은 어느 나라 출신인가요?</span></span>
<span id="cb4-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 박찬욱은 대한민국 출신입니다.</span></span>
<span id="cb4-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 기생충의 감독은 누구인가요?</span></span>
<span id="cb4-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 기생충의 감독은 봉준호입니다.</span></span>
<span id="cb4-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">추가 질문: 봉준호는 어느 나라 출신인가요?</span></span>
<span id="cb4-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">중간 답변: 봉준호는 대한민국 출신입니다.</span></span>
<span id="cb4-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">최종 답변은: 예</span></span>
<span id="cb4-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb4-52">    },</span>
<span id="cb4-53">]</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">example_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb5-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{answer}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-3">)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(example_prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>examples[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
</div>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotPromptTemplate(</span>
<span id="cb6-2">    examples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>examples,</span>
<span id="cb6-3">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,</span>
<span id="cb6-4">    suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:"</span>,</span>
<span id="cb6-5">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],</span>
<span id="cb6-6">)</span>
<span id="cb6-7"></span>
<span id="cb6-8">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google이 창립된 연도에 Bill Gates의 나이는 몇 살인가요?"</span></span>
<span id="cb6-9">final_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>question)</span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(final_prompt)</span></code></pre></div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb7-2">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.stream(final_prompt)</span>
<span id="cb7-3">stream_response(answer)</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotPromptTemplate(</span>
<span id="cb8-2">    examples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>examples,</span>
<span id="cb8-3">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,</span>
<span id="cb8-4">    suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:"</span>,</span>
<span id="cb8-5">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],</span>
<span id="cb8-6">)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 생성</span></span>
<span id="cb8-9">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> StrOutputParser()</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb8-12">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(</span>
<span id="cb8-13">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google이 창립된 연도에 Bill Gates의 나이는 몇 살인가요?"</span>}</span>
<span id="cb8-14">)</span>
<span id="cb8-15">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="example-selector" class="level2">
<h2 class="anchored" data-anchor-id="example-selector">Example Selector</h2>
<p>예제가 많은 경우 프롬프트에 포함할 예제를 선택해야 할 수도 있습니다. Example Selector 는 이 작업을 담당하는 클래스입니다.</p>
<ul>
<li><a href="https://api.python.langchain.com/en/latest/core/example_selectors.html">API 문서</a></li>
</ul>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.example_selectors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb9-2">    MaxMarginalRelevanceExampleSelector,</span>
<span id="cb9-3">    SemanticSimilarityExampleSelector,</span>
<span id="cb9-4">)</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIEmbeddings</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_chroma <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chroma</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vector DB 생성 (저장소 이름, 임베딩 클래스)</span></span>
<span id="cb9-9">chroma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chroma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example_selector"</span>, OpenAIEmbeddings())</span>
<span id="cb9-10"></span>
<span id="cb9-11">example_selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SemanticSimilarityExampleSelector.from_examples(</span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 선택 가능한 예시 목록이 있습니다.</span></span>
<span id="cb9-13">    examples,</span>
<span id="cb9-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 의미적 유사성을 측정하는 데 사용되는 임베딩을 생성하는 임베딩 클래스가 있습니다.</span></span>
<span id="cb9-15">    OpenAIEmbeddings(),</span>
<span id="cb9-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 임베딩을 저장하고 유사성 검색을 수행하는 데 사용되는 VectorStore 클래스가 있습니다.</span></span>
<span id="cb9-17">    Chroma,</span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이것은 생성할 예시의 수입니다.</span></span>
<span id="cb9-19">    k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-20">)</span>
<span id="cb9-21"></span>
<span id="cb9-22">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google이 창립된 연도에 Bill Gates의 나이는 몇 살인가요?"</span></span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력과 가장 유사한 예시를 선택합니다.</span></span>
<span id="cb9-25">selected_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_selector.select_examples({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question})</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"입력에 가장 유사한 예시:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>question<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> selected_examples:</span>
<span id="cb9-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'answer:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotPromptTemplate(</span>
<span id="cb10-2">    example_selector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_selector,</span>
<span id="cb10-3">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,</span>
<span id="cb10-4">    suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:"</span>,</span>
<span id="cb10-5">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],</span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google이 창립된 연도에 Bill Gates의 나이는 몇 살인가요?"</span></span>
<span id="cb10-9">example_selector_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>question)</span>
<span id="cb10-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(example_selector_prompt)</span></code></pre></div>
</div>
<p>이번에는 ExampleSelector 를 사용하여 FewShotPromptTemplate 을 생성합니다.</p>
<div id="cell-13" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotPromptTemplate(</span>
<span id="cb11-2">    example_selector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_selector,</span>
<span id="cb11-3">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,</span>
<span id="cb11-4">    suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer:"</span>,</span>
<span id="cb11-5">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],</span>
<span id="cb11-6">)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 생성</span></span>
<span id="cb11-9">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb12-2">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(</span>
<span id="cb12-3">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google이 창립된 연도에 Bill Gates의 나이는 몇 살인가요?"</span>}</span>
<span id="cb12-4">)</span>
<span id="cb12-5">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="fewshotchatmessageprompttemplate" class="level2">
<h2 class="anchored" data-anchor-id="fewshotchatmessageprompttemplate">FewShotChatMessagePromptTemplate</h2>
<div id="cell-16" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-2">    {</span>
<span id="cb13-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 회의록 작성 전문가 입니다. 주어진 정보를 바탕으로 회의록을 작성해 주세요"</span>,</span>
<span id="cb13-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023년 12월 25일, XYZ 회사의 마케팅 전략 회의가 오후 3시에 시작되었다. 회의에는 마케팅 팀장인 김수진, 디지털 마케팅 담당자인 박지민, 소셜 미디어 관리자인 이준호가 참석했다. 회의의 주요 목적은 2024년 상반기 마케팅 전략을 수립하고, 새로운 소셜 미디어 캠페인에 대한 아이디어를 논의하는 것이었다. 팀장인 김수진은 최근 시장 동향에 대한 간략한 개요를 제공했으며, 이어서 각 팀원이 자신의 분야에서의 전략적 아이디어를 발표했다."</span>,</span>
<span id="cb13-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">회의록: XYZ 회사 마케팅 전략 회의</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">일시: 2023년 12월 25일</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">장소: XYZ 회사 회의실</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">참석자: 김수진 (마케팅 팀장), 박지민 (디지털 마케팅 담당자), 이준호 (소셜 미디어 관리자)</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. 개회</span></span>
<span id="cb13-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 회의는 김수진 팀장의 개회사로 시작됨.</span></span>
<span id="cb13-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 회의의 목적은 2024년 상반기 마케팅 전략 수립 및 새로운 소셜 미디어 캠페인 아이디어 논의.</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. 시장 동향 개요 (김수진)</span></span>
<span id="cb13-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 김수진 팀장은 최근 시장 동향에 대한 분석을 제시.</span></span>
<span id="cb13-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 소비자 행동 변화와 경쟁사 전략에 대한 통찰 공유.</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. 디지털 마케팅 전략 (박지민)</span></span>
<span id="cb13-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 박지민은 디지털 마케팅 전략에 대해 발표.</span></span>
<span id="cb13-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 온라인 광고와 SEO 최적화 방안에 중점을 둠.</span></span>
<span id="cb13-22"></span>
<span id="cb13-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4. 소셜 미디어 캠페인 (이준호)</span></span>
<span id="cb13-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 이준호는 새로운 소셜 미디어 캠페인에 대한 아이디어를 제안.</span></span>
<span id="cb13-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 인플루언서 마케팅과 콘텐츠 전략에 대한 계획을 설명함.</span></span>
<span id="cb13-26"></span>
<span id="cb13-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5. 종합 논의</span></span>
<span id="cb13-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 팀원들 간의 아이디어 공유 및 토론.</span></span>
<span id="cb13-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 각 전략에 대한 예산 및 자원 배분에 대해 논의.</span></span>
<span id="cb13-30"></span>
<span id="cb13-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6. 마무리</span></span>
<span id="cb13-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 다음 회의 날짜 및 시간 확정.</span></span>
<span id="cb13-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   - 회의록 정리 및 배포는 박지민 담당.</span></span>
<span id="cb13-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb13-35">    },</span>
<span id="cb13-36">    {</span>
<span id="cb13-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 요약 전문가 입니다. 다음 주어진 정보를 바탕으로 내용을 요약해 주세요"</span>,</span>
<span id="cb13-38">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"이 문서는 '지속 가능한 도시 개발을 위한 전략'에 대한 20페이지 분량의 보고서입니다. 보고서는 지속 가능한 도시 개발의 중요성, 현재 도시화의 문제점, 그리고 도시 개발을 지속 가능하게 만들기 위한 다양한 전략을 포괄적으로 다루고 있습니다. 이 보고서는 또한 성공적인 지속 가능한 도시 개발 사례를 여러 국가에서 소개하고, 이러한 사례들을 통해 얻은 교훈을 요약하고 있습니다."</span>,</span>
<span id="cb13-39">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">문서 요약: 지속 가능한 도시 개발을 위한 전략 보고서</span></span>
<span id="cb13-41"></span>
<span id="cb13-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 중요성: 지속 가능한 도시 개발이 필수적인 이유와 그에 따른 사회적, 경제적, 환경적 이익을 강조.</span></span>
<span id="cb13-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 현 문제점: 현재의 도시화 과정에서 발생하는 주요 문제점들, 예를 들어 환경 오염, 자원 고갈, 불평등 증가 등을 분석.</span></span>
<span id="cb13-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 전략: 지속 가능한 도시 개발을 달성하기 위한 다양한 전략 제시. 이에는 친환경 건축, 대중교통 개선, 에너지 효율성 증대, 지역사회 참여 강화 등이 포함됨.</span></span>
<span id="cb13-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 사례 연구: 전 세계 여러 도시의 성공적인 지속 가능한 개발 사례를 소개. 예를 들어, 덴마크의 코펜하겐, 일본의 요코하마 등의 사례를 통해 실현 가능한 전략들을 설명.</span></span>
<span id="cb13-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- 교훈: 이러한 사례들에서 얻은 주요 교훈을 요약. 강조된 교훈에는 다각적 접근의 중요성, 지역사회와의 협력, 장기적 계획의 필요성 등이 포함됨.</span></span>
<span id="cb13-47"></span>
<span id="cb13-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">이 보고서는 지속 가능한 도시 개발이 어떻게 현실적이고 효과적인 형태로 이루어질 수 있는지에 대한 심도 있는 분석을 제공합니다.</span></span>
<span id="cb13-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>,</span>
<span id="cb13-50">    },</span>
<span id="cb13-51">    {</span>
<span id="cb13-52">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 문장 교정 전문가 입니다. 다음 주어진 문장을 교정해 주세요"</span>,</span>
<span id="cb13-53">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"우리 회사는 새로운 마케팅 전략을 도입하려고 한다. 이를 통해 고객과의 소통이 더 효과적이 될 것이다."</span>,</span>
<span id="cb13-54">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"본 회사는 새로운 마케팅 전략을 도입함으로써, 고객과의 소통을 보다 효과적으로 개선할 수 있을 것으로 기대된다."</span>,</span>
<span id="cb13-55">    },</span>
<span id="cb13-56">]</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate, FewShotChatMessagePromptTemplate</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.example_selectors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb14-3">    SemanticSimilarityExampleSelector,</span>
<span id="cb14-4">)</span>
<span id="cb14-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIEmbeddings</span>
<span id="cb14-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_chroma <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chroma</span>
<span id="cb14-7"></span>
<span id="cb14-8">chroma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chroma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fewshot_chat"</span>, OpenAIEmbeddings())</span>
<span id="cb14-9"></span>
<span id="cb14-10">example_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb14-11">    [</span>
<span id="cb14-12">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instruction}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{input}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb14-13">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{answer}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb14-14">    ]</span>
<span id="cb14-15">)</span>
<span id="cb14-16"></span>
<span id="cb14-17">example_selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SemanticSimilarityExampleSelector.from_examples(</span>
<span id="cb14-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 선택 가능한 예시 목록이 있습니다.</span></span>
<span id="cb14-19">    examples,</span>
<span id="cb14-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 의미적 유사성을 측정하는 데 사용되는 임베딩을 생성하는 임베딩 클래스가 있습니다.</span></span>
<span id="cb14-21">    OpenAIEmbeddings(),</span>
<span id="cb14-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 여기에는 임베딩을 저장하고 유사성 검색을 수행하는 데 사용되는 VectorStore 클래스가 있습니다.</span></span>
<span id="cb14-23">    chroma,</span>
<span id="cb14-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이것은 생성할 예시의 수입니다.</span></span>
<span id="cb14-25">    k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-26">)</span>
<span id="cb14-27"></span>
<span id="cb14-28">few_shot_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotChatMessagePromptTemplate(</span>
<span id="cb14-29">    example_selector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_selector,</span>
<span id="cb14-30">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,</span>
<span id="cb14-31">)</span></code></pre></div>
</div>
<p>fewshot 예제와 example selector를 사용하여 유사한 예제 1개를 선택합니다.</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"회의록을 작성해 주세요"</span>,</span>
<span id="cb15-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023년 12월 26일, ABC 기술 회사의 제품 개발 팀은 새로운 모바일 애플리케이션 프로젝트에 대한 주간 진행 상황 회의를 가졌다. 이 회의에는 프로젝트 매니저인 최현수, 주요 개발자인 황지연, UI/UX 디자이너인 김태영이 참석했다. 회의의 주요 목적은 프로젝트의 현재 진행 상황을 검토하고, 다가오는 마일스톤에 대한 계획을 수립하는 것이었다. 각 팀원은 자신의 작업 영역에 대한 업데이트를 제공했고, 팀은 다음 주까지의 목표를 설정했다."</span>,</span>
<span id="cb15-4">}</span>
<span id="cb15-5"></span>
<span id="cb15-6">example_selector.select_examples(question)</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">final_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb16-2">    [</span>
<span id="cb16-3">        (</span>
<span id="cb16-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb16-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>,</span>
<span id="cb16-6">        ),</span>
<span id="cb16-7">        few_shot_prompt,</span>
<span id="cb16-8">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instruction}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{input}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb16-9">    ]</span>
<span id="cb16-10">)</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 생성</span></span>
<span id="cb17-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실행 및 결과 출력</span></span>
<span id="cb17-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(question)</span>
<span id="cb17-6">stream_response(answer)</span></code></pre></div>
</div>
<section id="example-selector-의-유사도-검색-문제-해결" class="level3">
<h3 class="anchored" data-anchor-id="example-selector-의-유사도-검색-문제-해결">Example Selector 의 유사도 검색 문제 해결</h3>
<p>유사도 계산시 <code>instruction</code> 과 <code>input</code> 을 사용하고 있습니다. 하지만, <code>instruction</code> 만 사용하여 검색시 제대로된 유사도 결과가 나오지 않습니다.</p>
<p>이를 해결하기 위해 커스텀 유사도 계산을 위한 클래스를 정의합니다.</p>
<p>아래는 잘못 검색된 결과의 예시입니다.</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"회의록을 작성해 주세요"</span>,</span>
<span id="cb18-3">}</span>
<span id="cb18-4"></span>
<span id="cb18-5">example_selector.select_examples(question)</span></code></pre></div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 커스텀 하지 않은 기본 예제 선택기를 사용했을 때 결과</span></span>
<span id="cb19-2">example_selector.select_examples({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"다음 문장을 요약해 주세요"</span>})</span></code></pre></div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CustomExampleSelector</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 커스텀 예제 선택기 생성</span></span>
<span id="cb20-4">custom_selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomExampleSelector(examples, OpenAIEmbeddings())</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 커스텀 예제 선택기를 사용했을 때 결과</span></span>
<span id="cb20-7">custom_selector.select_examples({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"다음 문장을 회의록 작성해 주세요"</span>})</span></code></pre></div>
</div>
<div id="cell-28" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">example_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb21-2">    [</span>
<span id="cb21-3">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instruction}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{input}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb21-4">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{answer}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb21-5">    ]</span>
<span id="cb21-6">)</span>
<span id="cb21-7"></span>
<span id="cb21-8">custom_fewshot_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FewShotChatMessagePromptTemplate(</span>
<span id="cb21-9">    example_selector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_selector,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 커스텀 예제 선택기 사용</span></span>
<span id="cb21-10">    example_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example_prompt,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예제 프롬프트 사용</span></span>
<span id="cb21-11">)</span>
<span id="cb21-12"></span>
<span id="cb21-13">custom_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb21-14">    [</span>
<span id="cb21-15">        (</span>
<span id="cb21-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb21-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>,</span>
<span id="cb21-18">        ),</span>
<span id="cb21-19">        custom_fewshot_prompt,</span>
<span id="cb21-20">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instruction}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{input}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb21-21">    ]</span>
<span id="cb21-22">)</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 생성합니다.</span></span>
<span id="cb22-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> custom_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb23-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"회의록을 작성해 주세요"</span>,</span>
<span id="cb23-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023년 12월 26일, ABC 기술 회사의 제품 개발 팀은 새로운 모바일 애플리케이션 프로젝트에 대한 주간 진행 상황 회의를 가졌다. 이 회의에는 프로젝트 매니저인 최현수, 주요 개발자인 황지연, UI/UX 디자이너인 김태영이 참석했다. 회의의 주요 목적은 프로젝트의 현재 진행 상황을 검토하고, 다가오는 마일스톤에 대한 계획을 수립하는 것이었다. 각 팀원은 자신의 작업 영역에 대한 업데이트를 제공했고, 팀은 다음 주까지의 목표를 설정했다."</span>,</span>
<span id="cb23-4">}</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실행 및 결과 출력</span></span>
<span id="cb23-7">stream_response(chain.stream(question))</span></code></pre></div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb24-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"문서를 요약해 주세요"</span>,</span>
<span id="cb24-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"이 문서는 '2023년 글로벌 경제 전망'에 관한 30페이지에 달하는 상세한 보고서입니다. 보고서는 세계 경제의 현재 상태, 주요 국가들의 경제 성장률, 글로벌 무역 동향, 그리고 다가오는 해에 대한 경제 예측을 다룹니다. 이 보고서는 또한 다양한 경제적, 정치적, 환경적 요인들이 세계 경제에 미칠 영향을 분석하고 있습니다."</span>,</span>
<span id="cb24-4">}</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실행 및 결과 출력</span></span>
<span id="cb24-7">stream_response(chain.stream(question))</span></code></pre></div>
</div>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"문장을 교정해 주세요"</span>,</span>
<span id="cb25-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"회사는 올해 매출이 증가할 것으로 예상한다. 새로운 전략이 잘 작동하고 있다."</span>,</span>
<span id="cb25-4">}</span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실행 및 결과 출력</span></span>
<span id="cb25-7">stream_response(chain.stream(question))</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/02-FewShotTemplates.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/03-LangChain-Hub.html</link>
  <description><![CDATA[ 




<p>다음은 LangChain Hub 에서 프롬프트를 받아서 실행하는 예제입니다.</p>
<p>아래 주소에서 LangChain Hub 프롬프트를 확인할 수 있습니다.</p>
<p>받아오는 방법은 프롬프트 repo 의 아이디 값을 가져 올 수 있고, commit id 를 붙여서 특정 버전에 대한 프롬프트를 받아올 수도 있습니다.</p>
<section id="hub로부터-prompt-받아오기" class="level2">
<h2 class="anchored" data-anchor-id="hub로부터-prompt-받아오기">Hub로부터 Prompt 받아오기</h2>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 가장 최신 버전의 프롬프트를 가져옵니다.</span></span>
<span id="cb1-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.pull(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlm/rag-prompt"</span>)</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 내용 출력</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prompt)</span></code></pre></div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 특정 버전의 프롬프트를 가져오려면 버전 해시를 지정하세요</span></span>
<span id="cb3-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.pull(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlm/rag-prompt:50442af1"</span>)</span>
<span id="cb3-3">prompt</span></code></pre></div>
</div>
</section>
<section id="prompt-hub-에-자신의-프롬프트-등록" class="level2">
<h2 class="anchored" data-anchor-id="prompt-hub-에-자신의-프롬프트-등록">Prompt Hub 에 자신의 프롬프트 등록</h2>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb4-2"></span>
<span id="cb4-3"></span>
<span id="cb4-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"주어진 내용을 바탕으로 다음 문장을 요약하세요. 답변은 반드시 한글로 작성하세요</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CONTEXT: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SUMMARY:"</span></span>
<span id="cb4-6">)</span>
<span id="cb4-7">prompt</span></code></pre></div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트를 허브에 업로드합니다.</span></span>
<span id="cb5-4">hub.push(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teddynote/simple-summary-korean"</span>, prompt)</span></code></pre></div>
</div>
<p>다음은 Hub 에 성공적으로 업로드 된 후 출력입니다.</p>
<p><code>아이디/프롬프트명/해시</code></p>
<blockquote class="blockquote">
<p>출력: ‘https://smith.langchain.com/hub/teddynote/simple-summary-korean/0e296563’</p>
</blockquote>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트를 허브로부터 가져옵니다.</span></span>
<span id="cb6-4">pulled_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.pull(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teddynote/simple-summary-korean"</span>)</span></code></pre></div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 내용 출력</span></span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pulled_prompt)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/03-LangChain-Hub.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/04-Personal-Prompts.html</link>
  <description><![CDATA[ 




<div id="cell-0" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<p>LangChain 아이디를 입력합니다.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Owner 지정</span></span>
<span id="cb2-2">PROMPT_OWNER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teddynote"</span></span></code></pre></div>
</div>
<section id="요약-stuff-documents" class="level2">
<h2 class="anchored" data-anchor-id="요약-stuff-documents">요약: Stuff Documents</h2>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"></span>
<span id="cb3-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"summary-stuff-documents"</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb3-7">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Please summarize the sentence according to the following REQUEST.</span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">REQUEST:</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Summarize the main points in bullet points.</span></span>
<span id="cb3-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Each summarized sentence must start with an emoji that fits the meaning of the each sentence.</span></span>
<span id="cb3-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. Use various emojis to make the summary more interesting.</span></span>
<span id="cb3-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4. DO NOT include any unnecessary information.</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CONTEXT:</span></span>
<span id="cb3-15"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SUMMARY:"</span></span>
<span id="cb3-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-19">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(prompt_template)</span>
<span id="cb3-20">prompt</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="map-prompt" class="level2">
<h2 class="anchored" data-anchor-id="map-prompt">Map Prompt</h2>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb5-3"></span>
<span id="cb5-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map-prompt"</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb5-7">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful expert journalist in extracting the main themes from a GIVEN DOCUMENTS below.</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please provide a comprehensive summary of the GIVEN DOCUMENTS in numbered list format. </span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The summary should cover all the key points and main ideas presented in the original text, while also condensing the information into a concise and easy-to-understand format. </span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please ensure that the summary includes relevant details and examples that support the main ideas, while avoiding any unnecessary information or repetition. </span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">The length of the summary should be appropriate for the length and complexity of the original text, providing a clear and accurate overview without omitting any important information.</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GIVEN DOCUMENTS:</span></span>
<span id="cb5-14"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{docs}</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FORMAT:</span></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. main theme 1</span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. main theme 2</span></span>
<span id="cb5-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. main theme 3</span></span>
<span id="cb5-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CAUTION:</span></span>
<span id="cb5-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- DO NOT list more than 5 main themes.</span></span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Helpful Answer:</span></span>
<span id="cb5-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-27">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(prompt_template)</span>
<span id="cb5-28">prompt</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="reduce-prompt" class="level2">
<h2 class="anchored" data-anchor-id="reduce-prompt">Reduce Prompt</h2>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb7-3"></span>
<span id="cb7-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reduce-prompt"</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb7-7">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful expert in summary writing.</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are given numbered lists of summaries.</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Extract top 10 most important insights from the summaries.</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Then, write a summary of the insights in KOREAN.</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LIST OF SUMMARIES:</span></span>
<span id="cb7-13"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{doc_summaries}</span></span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Helpful Answer:</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-17">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(prompt_template)</span>
<span id="cb7-18">prompt</span></code></pre></div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb9-3"></span>
<span id="cb9-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain-of-density-reduce-korean"</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb9-7">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful expert in summary writing. You are given lists of summaries.</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please sum up previously summarized sentences according to the following REQUEST.</span></span>
<span id="cb9-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">REQUEST:</span></span>
<span id="cb9-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Summarize the main points in bullet points in KOREAN.</span></span>
<span id="cb9-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Each summarized sentence must start with an emoji that fits the meaning of the each sentence.</span></span>
<span id="cb9-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. Use various emojis to make the summary more interesting.</span></span>
<span id="cb9-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4. MOST IMPORTANT points should be organized at the top of the list.</span></span>
<span id="cb9-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5. DO NOT include any unnecessary information.</span></span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LIST OF SUMMARIES:</span></span>
<span id="cb9-17"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{doc_summaries}</span></span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Helpful Answer: """</span></span>
<span id="cb9-20">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(prompt_template)</span>
<span id="cb9-21">prompt</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="metadata-tagger" class="level2">
<h2 class="anchored" data-anchor-id="metadata-tagger">Metadata Tagger</h2>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb11-3"></span>
<span id="cb11-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata-tagger"</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb11-7">prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Given the following product review, conduct a comprehensive analysis to extract key aspects mentioned by the customer, with a focus on evaluating the product's design and distinguishing between positive aspects and areas for improvement. </span></span>
<span id="cb11-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Identify primary features or attributes of the product that the customer appreciated or highlighted, specifically looking for mentions related to the feel of the keys, sound produced by the keys, overall user experience, charging aspect, and the design of the product, etc. </span></span>
<span id="cb11-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Assess the overall tone of the review (positive, neutral, or negative) based on the sentiment expressed about these attributes. </span></span>
<span id="cb11-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Additionally, provide a detailed evaluation of the design, outline the positive aspects that the customer enjoyed, and note any areas of improvement or disappointment mentioned. </span></span>
<span id="cb11-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Extract the customer's rating of the product on a scale of 1 to 5, as indicated at the beginning of the review. </span></span>
<span id="cb11-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Summarize your findings in a structured JSON format, including an array of keywords, evaluations for design, satisfaction points, improvement areas, the assessed tone, and the numerical rating. </span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">INPUT:</span></span>
<span id="cb11-15"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{input}</span></span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-18">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(prompt_template)</span>
<span id="cb11-19">prompt</span></code></pre></div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="chain-of-density-요약" class="level2">
<h2 class="anchored" data-anchor-id="chain-of-density-요약">Chain of Density 요약</h2>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb13-3"></span>
<span id="cb13-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain-of-density-korean"</span></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb13-7">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Article: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ARTICLE}</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will generate increasingly concise, entity-dense summaries of the above article. </span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Repeat the following 2 steps 5 times. </span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Step 1. Identify 1-3 informative entities (";" delimited) from the article which are missing from the previously generated summary. </span></span>
<span id="cb13-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Step 2. Write a new, denser summary of identical length which covers every entity and detail from the previous summary plus the missing entities. </span></span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A missing entity is:</span></span>
<span id="cb13-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- relevant to the main story, </span></span>
<span id="cb13-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- specific yet concise (100 words or fewer), </span></span>
<span id="cb13-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- novel (not in the previous summary), </span></span>
<span id="cb13-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- faithful (present in the article), </span></span>
<span id="cb13-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- anywhere (can be located anywhere in the article).</span></span>
<span id="cb13-22"></span>
<span id="cb13-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Guidelines:</span></span>
<span id="cb13-24"></span>
<span id="cb13-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The first summary should be long (8-10 sentences, ~200 words) yet highly non-specific, containing little information beyond the entities marked as missing. Use overly verbose language and fillers (e.g., "this article discusses") to reach ~200 words.</span></span>
<span id="cb13-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make every word count: rewrite the previous summary to improve flow and make space for additional entities.</span></span>
<span id="cb13-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make space with fusion, compression, and removal of uninformative phrases like "the article discusses".</span></span>
<span id="cb13-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The summaries should become highly dense and concise yet self-contained, i.e., easily understood without the article. </span></span>
<span id="cb13-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Missing entities can appear anywhere in the new summary.</span></span>
<span id="cb13-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Never drop entities from the previous summary. If space cannot be made, add fewer new entities. </span></span>
<span id="cb13-31"></span>
<span id="cb13-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Remember, use the exact same number of words for each summary.</span></span>
<span id="cb13-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer in JSON. The JSON should be a list (length 5) of dictionaries whose keys are "Missing_Entities" and "Denser_Summary".</span></span>
<span id="cb13-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Use only KOREAN language to reply."""</span></span>
<span id="cb13-35">)</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="chain-of-density-korean---2" class="level2">
<h2 class="anchored" data-anchor-id="chain-of-density-korean---2">Chain of Density (Korean) - 2</h2>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb15-3"></span>
<span id="cb15-4">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain-of-density-map-korean"</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 요약문을 작성하기 위한 프롬프트 정의 (직접 프롬프트를 작성하는 경우)</span></span>
<span id="cb15-7">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_template(</span>
<span id="cb15-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Article: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ARTICLE}</span></span>
<span id="cb15-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You will generate increasingly concise, entity-dense summaries of the above article. </span></span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Repeat the following 2 steps 3 times. </span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Step 1. Identify 1-3 informative entities (";" delimited) from the article which are missing from the previously generated summary. </span></span>
<span id="cb15-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Step 2. Write a new, denser summary of identical length which covers every entity and detail from the previous summary plus the missing entities. </span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A missing entity is:</span></span>
<span id="cb15-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- relevant to the main story, </span></span>
<span id="cb15-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- specific yet concise (100 words or fewer), </span></span>
<span id="cb15-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- novel (not in the previous summary), </span></span>
<span id="cb15-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- faithful (present in the article), </span></span>
<span id="cb15-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- anywhere (can be located anywhere in the article).</span></span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Guidelines:</span></span>
<span id="cb15-24"></span>
<span id="cb15-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The first summary should be long (8-10 sentences, ~200 words) yet highly non-specific, containing little information beyond the entities marked as missing. Use overly verbose language and fillers (e.g., "this article discusses") to reach ~200 words.</span></span>
<span id="cb15-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make every word count: rewrite the previous summary to improve flow and make space for additional entities.</span></span>
<span id="cb15-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Make space with fusion, compression, and removal of uninformative phrases like "the article discusses".</span></span>
<span id="cb15-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- The summaries should become highly dense and concise yet self-contained, i.e., easily understood without the article. </span></span>
<span id="cb15-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Missing entities can appear anywhere in the new summary.</span></span>
<span id="cb15-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Never drop entities from the previous summary. If space cannot be made, add fewer new entities. </span></span>
<span id="cb15-31"></span>
<span id="cb15-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Remember, use the exact same number of words for each summary.</span></span>
<span id="cb15-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer "Missing Entities" and "Denser_Summary" as in TEXT format.</span></span>
<span id="cb15-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Use only KOREAN language to reply."""</span></span>
<span id="cb15-35">)</span></code></pre></div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt)</span></code></pre></div>
</div>
</section>
<section id="rag-문서-프롬프트" class="level2">
<h2 class="anchored" data-anchor-id="rag-문서-프롬프트">RAG 문서 프롬프트</h2>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rag-korean"</span></span></code></pre></div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""당신은 질문-답변(Question-Answering)을 수행하는 친절한 AI 어시스턴트입니다. 당신의 임무는 주어진 문맥(context) 에서 주어진 질문(question) 에 답하는 것입니다.</span></span>
<span id="cb18-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">검색된 다음 문맥(context) 을 사용하여 질문(question) 에 답하세요. 만약, 주어진 문맥(context) 에서 답을 찾을 수 없다면, 답을 모른다면 `주어진 정보에서 질문에 대한 정보를 찾을 수 없습니다` 라고 답하세요.</span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">기술적인 용어나 이름은 번역하지 않고 그대로 사용해 주세요. 답변은 한글로 답변해 주세요."""</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">human <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""#Question: </span></span>
<span id="cb18-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Context: </span></span>
<span id="cb18-9"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Answer:"""</span></span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb18-14"></span>
<span id="cb18-15"></span>
<span id="cb18-16">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, system), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, human)])</span></code></pre></div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt, parent_commit_hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>)</span></code></pre></div>
</div>
</section>
<section id="rag-출처" class="level2">
<h2 class="anchored" data-anchor-id="rag-출처">RAG + 출처</h2>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span></code></pre></div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">prompt_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rag-korean-with-source"</span></span></code></pre></div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""당신은 질문-답변(Question-Answering)을 수행하는 친절한 AI 어시스턴트입니다. 당신의 임무는 주어진 문맥(context) 에서 주어진 질문(question) 에 답하는 것입니다.</span></span>
<span id="cb22-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">검색된 다음 문맥(context) 을 사용하여 질문(question) 에 답하세요. 만약, 주어진 문맥(context) 에서 답을 찾을 수 없다면, 답을 모른다면 `주어진 정보에서 질문에 대한 정보를 찾을 수 없습니다` 라고 답하세요.</span></span>
<span id="cb22-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">기술적인 용어나 이름은 번역하지 않고 그대로 사용해 주세요. 출처(page, source)를 답변헤 포함하세요. 답변은 한글로 답변해 주세요."""</span></span>
<span id="cb22-4"></span>
<span id="cb22-5">human <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""#Question: </span></span>
<span id="cb22-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Context: </span></span>
<span id="cb22-9"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb22-10"></span>
<span id="cb22-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Answer:"""</span></span>
<span id="cb22-12"></span>
<span id="cb22-13">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, system), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, human)])</span></code></pre></div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROMPT_OWNER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, prompt, parent_commit_hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>)</span></code></pre></div>
</div>
</section>
<section id="llm-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="llm-evaluation">LLM Evaluation</h2>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb24-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hub</span>
<span id="cb24-3"></span>
<span id="cb24-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb24-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">As an LLM evaluator (judge), please assess the LLM's response to the given question. Evaluate the response's accuracy, comprehensiveness, and context precision based on the provided context. After your evaluation, return only the numerical scores in the following format:</span></span>
<span id="cb24-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Accuracy: [score]</span></span>
<span id="cb24-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Comprehensiveness: [score]</span></span>
<span id="cb24-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Context Precision: [score]</span></span>
<span id="cb24-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Final: [normalized score]</span></span>
<span id="cb24-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Grading rubric:</span></span>
<span id="cb24-12"></span>
<span id="cb24-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Accuracy (0-10 points):</span></span>
<span id="cb24-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Evaluate how well the answer aligns with the information provided in the given context.</span></span>
<span id="cb24-15"></span>
<span id="cb24-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0 points: The answer is completely inaccurate or contradicts the provided context</span></span>
<span id="cb24-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4 points: The answer partially aligns with the context but contains significant inaccuracies</span></span>
<span id="cb24-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7 points: The answer mostly aligns with the context but has minor inaccuracies or omissions</span></span>
<span id="cb24-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">10 points: The answer fully aligns with the provided context and is completely accurate</span></span>
<span id="cb24-20"></span>
<span id="cb24-21"></span>
<span id="cb24-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Comprehensiveness (0-10 points):</span></span>
<span id="cb24-23"></span>
<span id="cb24-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0 points: The answer is completely inadequate or irrelevant</span></span>
<span id="cb24-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3 points: The answer is accurate but too brief to fully address the question</span></span>
<span id="cb24-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7 points: The answer covers main aspects but lacks detail or misses minor points</span></span>
<span id="cb24-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">10 points: The answer comprehensively covers all aspects of the question</span></span>
<span id="cb24-28"></span>
<span id="cb24-29"></span>
<span id="cb24-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Context Precision (0-10 points):</span></span>
<span id="cb24-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Evaluate how precisely the answer uses the information from the provided context.</span></span>
<span id="cb24-32"></span>
<span id="cb24-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0 points: The answer doesn't use any information from the context or uses it entirely incorrectly</span></span>
<span id="cb24-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4 points: The answer uses some information from the context but with significant misinterpretations</span></span>
<span id="cb24-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7 points: The answer uses most of the relevant context information correctly but with minor misinterpretations</span></span>
<span id="cb24-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">10 points: The answer precisely and correctly uses all relevant information from the context</span></span>
<span id="cb24-37"></span>
<span id="cb24-38"></span>
<span id="cb24-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Final Normalized Score:</span></span>
<span id="cb24-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Calculate by summing the scores for accuracy, comprehensiveness, and context precision, then dividing by 30 to get a score between 0 and 1.</span></span>
<span id="cb24-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Formula: (Accuracy + Comprehensiveness + Context Precision) / 30</span></span>
<span id="cb24-42"></span>
<span id="cb24-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Given question:</span></span>
<span id="cb24-44"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span></span>
<span id="cb24-45"></span>
<span id="cb24-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#LLM's response:</span></span>
<span id="cb24-47"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{answer}</span></span>
<span id="cb24-48"></span>
<span id="cb24-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Provided context:</span></span>
<span id="cb24-50"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span></span>
<span id="cb24-51"></span>
<span id="cb24-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Please evaluate the LLM's response according to the criteria above. </span></span>
<span id="cb24-53"></span>
<span id="cb24-54"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">In your output, include only the numerical scores for FINAL NORMALIZED SCORE without any additional explanation or reasoning.</span></span>
<span id="cb24-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ex) 0.81</span></span>
<span id="cb24-56"></span>
<span id="cb24-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Final Normalized Score(Just the number):</span></span>
<span id="cb24-58"></span>
<span id="cb24-59"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-60">)</span>
<span id="cb24-61"></span>
<span id="cb24-62">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"teddynote/context-answer-evaluator"</span>, prompt)</span></code></pre></div>
</div>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트</span></span>
<span id="cb25-4">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a grader assessing relevance of a retrieved document to a user question. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb25-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    It does not need to be a stringent test. The goal is to filter out erroneous retrievals. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span></span>
<span id="cb25-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    If the document contains keyword(s) or semantic m   eaning related to the user question, grade it as relevant. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span></span>
<span id="cb25-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question."""</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">grade_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb25-10">    [</span>
<span id="cb25-11">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, system),</span>
<span id="cb25-12">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved document: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> User question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb25-13">    ]</span>
<span id="cb25-14">)</span>
<span id="cb25-15"></span>
<span id="cb25-16">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"teddynote/retrieval-question-grader"</span>, grade_prompt)</span></code></pre></div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prompt</span></span>
<span id="cb26-4">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a grader assessing relevance of a retrieved document to the answer. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb26-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    It does not need to be a stringent test. The goal is to filter out erroneous retrievals. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span></span>
<span id="cb26-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    If the document contains keyword(s) or semantic meaning related to the answer, grade it as relevant. </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span></span>
<span id="cb26-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the answer."""</span></span>
<span id="cb26-8"></span>
<span id="cb26-9">grade_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb26-10">    [</span>
<span id="cb26-11">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, system),</span>
<span id="cb26-12">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved document: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{context}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Answer: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{answer}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb26-13">    ]</span>
<span id="cb26-14">)</span>
<span id="cb26-15"></span>
<span id="cb26-16">hub.push(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"teddynote/retrieval-answer-grader"</span>, grade_prompt)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/02-Prompt/04-Personal-Prompts.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>PydanticOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/01-PydanticOuputParser.html</link>
  <description><![CDATA[ 




<section id="pydanticoutputparser" class="level1">
<h1>PydanticOutputParser</h1>
<p><code>PydanticOutputParser</code>는 언어 모델의 출력을 <strong>구조화된 정보</strong>로 변환하는 데 도움을 주는 클래스입니다. 이 클래스는 단순 텍스트 응답 대신 <strong>명확하고 체계적인 형태로 필요한 정보를 제공</strong>할 수 있습니다.</p>
<p>이 클래스를 활용하면 언어 모델의 출력을 특정 데이터 모델에 맞게 변환하여 정보를 더 쉽게 처리하고 활용할 수 있습니다.</p>
<section id="주요-메서드" class="level2">
<h2 class="anchored" data-anchor-id="주요-메서드">주요 메서드</h2>
<p><code>PydanticOutputParser</code> (대부분의 OutputParser에 해당)에는 주로 <strong>두 가지 핵심 메서드</strong>가 구현되어야 합니다.</p>
<ul>
<li><strong><code>get_format_instructions()</code></strong>: 언어 모델이 출력해야 할 정보의 형식을 정의하는 지침을 제공합니다. 예를 들어, 언어 모델이 출력해야 할 데이터의 필드와 그 형태를 설명하는 지침을 문자열로 반환할 수 있습니다. 이 지침은 언어 모델이 출력을 구조화하고 특정 데이터 모델에 맞게 변환하는 데 매우 중요합니다.</li>
<li><strong><code>parse()</code></strong>: 언어 모델의 출력(문자열로 가정)을 받아 이를 특정 구조로 분석하고 변환합니다. Pydantic과 같은 도구를 사용하여 입력된 문자열을 사전 정의된 스키마에 따라 검증하고, 해당 스키마를 따르는 데이터 구조로 변환합니다.</li>
</ul>
</section>
<section id="참고-자료" class="level2">
<h2 class="anchored" data-anchor-id="참고-자료">참고 자료</h2>
<ul>
<li><a href="https://docs.pydantic.dev/latest/">Pydantic 공식 도큐먼트</a></li>
</ul>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실시간 출력을 위한 import</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PydanticOutputParser</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>)</span></code></pre></div>
</div>
<p>다음은 이메일 본문 예시입니다.</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">email_conversation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""From: 김철수 (chulsoo.kim@bikecorporation.me)</span></span>
<span id="cb5-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">To: 이은채 (eunchae@teddyinternational.me)</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Subject: "ZENESIS" 자전거 유통 협력 및 미팅 일정 제안</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">안녕하세요, 이은채 대리님,</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">저는 바이크코퍼레이션의 김철수 상무입니다. 최근 보도자료를 통해 귀사의 신규 자전거 "ZENESIS"에 대해 알게 되었습니다. 바이크코퍼레이션은 자전거 제조 및 유통 분야에서 혁신과 품질을 선도하는 기업으로, 이 분야에서의 장기적인 경험과 전문성을 가지고 있습니다.</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ZENESIS 모델에 대한 상세한 브로슈어를 요청드립니다. 특히 기술 사양, 배터리 성능, 그리고 디자인 측면에 대한 정보가 필요합니다. 이를 통해 저희가 제안할 유통 전략과 마케팅 계획을 보다 구체화할 수 있을 것입니다.</span></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">또한, 협력 가능성을 더 깊이 논의하기 위해 다음 주 화요일(1월 15일) 오전 10시에 미팅을 제안합니다. 귀사 사무실에서 만나 이야기를 나눌 수 있을까요?</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">감사합니다.</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">김철수</span></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">상무이사</span></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">바이크코퍼레이션</span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</div>
<p>출력 파서를 사용하지 않는 경우 예시</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb6-3"></span>
<span id="cb6-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb6-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"다음의 이메일 내용중 중요한 내용을 추출해 주세요.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{email_conversation}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-6">)</span>
<span id="cb6-7"></span>
<span id="cb6-8">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>)</span>
<span id="cb6-9"></span>
<span id="cb6-10">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span>
<span id="cb6-11"></span>
<span id="cb6-12">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email_conversation"</span>: email_conversation})</span>
<span id="cb6-13"></span>
<span id="cb6-14">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stream_response(answer, return_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output)</span></code></pre></div>
</div>
<p>위와 같은 이메일 내용이 주어졌을 때 아래의 Pydantic 스타일로 정의된 클래스를 사용하여 이메일의 정보를 파싱해 보겠습니다.</p>
<p>참고로, Field 안에 <code>description</code> 은 텍스트 형태의 답변에서 주요 정보를 추출하기 위한 설명입니다. LLM 이 바로 이 설명을 보고 필요한 정보를 추출하게 됩니다. 그러므로 이 설명은 정확하고 명확해야 합니다.</p>
<div id="cell-11" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EmailSummary(BaseModel):</span>
<span id="cb8-2">    person: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"메일을 보낸 사람"</span>)</span>
<span id="cb8-3">    email: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"메일을 보낸 사람의 이메일 주소"</span>)</span>
<span id="cb8-4">    subject: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"메일 제목"</span>)</span>
<span id="cb8-5">    summary: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"메일 본문을 요약한 텍스트"</span>)</span>
<span id="cb8-6">    date: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"메일 본문에 언급된 미팅 날짜와 시간"</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PydanticOutputParser 생성</span></span>
<span id="cb8-10">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PydanticOutputParser(pydantic_object<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EmailSummary)</span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instruction 을 출력합니다.</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parser.get_format_instructions())</span></code></pre></div>
</div>
<p>프롬프트를 정의합니다.</p>
<ol type="1">
<li><code>question</code>: 유저의 질문을 받습니다.</li>
<li><code>email_conversation</code>: 이메일 본문의 내용을 입력합니다.</li>
<li><code>format</code>: 형식을 지정합니다.</li>
</ol>
<div id="cell-14" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">You are a helpful assistant. Please answer the following questions in KOREAN.</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">QUESTION:</span></span>
<span id="cb10-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">EMAIL CONVERSATION:</span></span>
<span id="cb10-9"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{email_conversation}</span></span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FORMAT:</span></span>
<span id="cb10-12"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format}</span></span>
<span id="cb10-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-14">)</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format 에 PydanticOutputParser의 부분 포맷팅(partial) 추가</span></span>
<span id="cb10-17">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.partial(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser.get_format_instructions())</span></code></pre></div>
</div>
<p>다음으로는 Chain 을 생성합니다.</p>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 생성합니다.</span></span>
<span id="cb11-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<p>체인을 실행하고 결과를 확인합니다.</p>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행하고 결과를 출력합니다.</span></span>
<span id="cb12-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.stream(</span>
<span id="cb12-3">    {</span>
<span id="cb12-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email_conversation"</span>: email_conversation,</span>
<span id="cb12-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"이메일 내용중 주요 내용을 추출해 주세요."</span>,</span>
<span id="cb12-6">    }</span>
<span id="cb12-7">)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과는 JSON 형태로 출력됩니다.</span></span>
<span id="cb12-10">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stream_response(response, return_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>마지막으로 <code>parser</code>를 사용하여 결과를 파싱하고 <code>EmailSummary</code> 객체로 변환합니다.</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PydanticOutputParser 를 사용하여 결과를 파싱합니다.</span></span>
<span id="cb13-2">structured_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse(output)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(structured_output)</span></code></pre></div>
</div>
</section>
<section id="parser-가-추가된-체인-생성" class="level2">
<h2 class="anchored" data-anchor-id="parser-가-추가된-체인-생성">parser 가 추가된 체인 생성</h2>
<p>출력 결과를 정의한 Pydantic 객체로 생성할 수 있습니다.</p>
<div id="cell-22" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력 파서를 추가하여 전체 체인을 재구성합니다.</span></span>
<span id="cb14-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> parser</span></code></pre></div>
</div>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chain 을 실행하고 결과를 출력합니다.</span></span>
<span id="cb15-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke(</span>
<span id="cb15-3">    {</span>
<span id="cb15-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email_conversation"</span>: email_conversation,</span>
<span id="cb15-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"이메일 내용중 주요 내용을 추출해 주세요."</span>,</span>
<span id="cb15-6">    }</span>
<span id="cb15-7">)</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과는 EmailSummary 객체 형태로 출력됩니다.</span></span>
<span id="cb15-10">response</span></code></pre></div>
</div>
</section>
<section id="with_structured_output" class="level2">
<h2 class="anchored" data-anchor-id="with_structured_output">with_structured_output()</h2>
<p><code>.with_structured_output(Pydantic)</code>을 사용하여 출력 파서를 추가하면, 출력을 Pydantic 객체로 변환할 수 있습니다.</p>
<div id="cell-26" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">llm_with_structered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb16-2">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span></span>
<span id="cb16-3">).with_structured_output(EmailSummary)</span></code></pre></div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invoke() 함수를 호출하여 결과를 출력합니다.</span></span>
<span id="cb17-2">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm_with_structered.invoke(email_conversation)</span>
<span id="cb17-3">answer</span></code></pre></div>
</div>
<p><strong>참고</strong></p>
<p>한 가지 아쉬운 점은 <code>.with_structured_output()</code> 함수는 <code>stream()</code> 기능을 지원하지 않습니다.</p>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/01-PydanticOuputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>CommaSeparatedListOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/02-CommaSeparatedListOutputParser.html</link>
  <description><![CDATA[ 




<section id="commaseparatedlistoutputparser" class="level1">
<h1>CommaSeparatedListOutputParser</h1>
<p><code>CommaSeparatedListOutputParser</code>는 쉼표로 구분된 항목 목록을 반환할 필요가 있을 때 유용한 출력 파서입니다.</p>
<p>이 파서를 사용하면, 입력된 데이터나 요청된 정보를 쉼표로 구분하여 명확하고 간결한 목록 형태로 제공할 수 있습니다. 예를 들어, 여러 개의 데이터 포인트, 이름, 항목 또는 다양한 값을 나열할 때 효과적으로 정보를 정리하고 사용자에게 전달할 수 있습니다.</p>
<p>이 방법은 정보를 구조화하고 가독성을 높이며, 특히 데이터를 다루거나 리스트 형태의 결과를 요구하는 경우에 매우 유용합니다.</p>
<div id="eba72255" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="8905422a" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="b368d3ad" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CommaSeparatedListOutputParser</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 콤마로 구분된 리스트 출력 파서 초기화</span></span>
<span id="cb3-6">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CommaSeparatedListOutputParser()</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력 형식 지침 가져오기</span></span>
<span id="cb3-9">format_instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_parser.get_format_instructions()</span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿 설정</span></span>
<span id="cb3-11">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 주제에 대한 다섯 가지를 나열하라는 템플릿</span></span>
<span id="cb3-13">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List five </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{subject}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb3-14">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 변수로 'subject' 사용</span></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 부분 변수로 형식 지침 사용</span></span>
<span id="cb3-16">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format_instructions"</span>: format_instructions},</span>
<span id="cb3-17">)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 모델 초기화</span></span>
<span id="cb3-20">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트, 모델, 출력 파서를 연결하여 체인 생성</span></span>
<span id="cb3-23">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span></code></pre></div>
</div>
<ul>
<li>체인을 실행하고 결과를 출력합니다.</li>
</ul>
<div id="687e8dcb" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "대한민국 관광명소"에 대한 체인 호출 실행</span></span>
<span id="cb4-2">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국 관광명소"</span>})</span></code></pre></div>
</div>
<ul>
<li><code>chain.stream</code>을 사용하여 “대한민국 관광명소”에 대한 스트림을 반복 처리합니다.</li>
<li>반복 중 스트림의 결과를 출력합니다.</li>
</ul>
<div id="5429fc95" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트림을 순회합니다.</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국 관광명소"</span>}):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(s)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트림의 내용을 출력합니다.</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/02-CommaSeparatedListOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>StructuredOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/03-StructuredOutputParser.html</link>
  <description><![CDATA[ 




<section id="structuredoutputparser" class="level1">
<h1>StructuredOutputParser</h1>
<p>StructuredOutputParser는 LLM에 대한 답변을 <code>dict</code> 형식으로 구성하고, key/value 쌍으로 여러 필드를 반환하고자 할 때 유용하게 사용할 수 있습니다.</p>
<section id="장점" class="level2">
<h2 class="anchored" data-anchor-id="장점">장점</h2>
<p>Pydantic/JSON 파서가 더 강력하다는 평가를 받지만, StructuredOutputParser는 로컬 모델과 같은 덜 강력한 모델에서도 유용합니다. 이는 GPT나 Claude 모델보다 인텔리전스가 낮은(즉, parameter 수가 적은) 모델에서 특히 효과적입니다.</p>
</section>
<section id="참고-사항" class="level2">
<h2 class="anchored" data-anchor-id="참고-사항">참고 사항</h2>
<p>로컬 모델의 경우 <code>Pydantic</code> 파서가 동작하지 않는 상황이 빈번하게 발생할 수 있습니다. 이러한 경우, 대안으로 StructuredOutputParser를 사용하는 것이 좋은 해결책이 될 수 있습니다.</p>
<div id="4f25fdb2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="bed8165c" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="cdb04024" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResponseSchema, StructuredOutputParser</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span></code></pre></div>
</div>
<ul>
<li><code>ResponseSchema</code> 클래스를 사용하여 사용자의 질문에 대한 답변과 사용된 소스(웹사이트)에 대한 설명을 포함하는 응답 스키마를 정의합니다.</li>
<li><code>StructuredOutputParser</code>를 <code>response_schemas</code>를 사용하여 초기화하여, 정의된 응답 스키마에 따라 출력을 구조화합니다.</li>
</ul>
<div id="1234ef88" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용자의 질문에 대한 답변</span></span>
<span id="cb4-2">response_schemas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-3">    ResponseSchema(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer"</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사용자의 질문에 대한 답변"</span>),</span>
<span id="cb4-4">    ResponseSchema(</span>
<span id="cb4-5">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>,</span>
<span id="cb4-6">        description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사용자의 질문에 답하기 위해 사용된 `출처`, `웹사이트주소` 이여야 합니다."</span>,</span>
<span id="cb4-7">    ),</span>
<span id="cb4-8">]</span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 응답 스키마를 기반으로 한 구조화된 출력 파서 초기화</span></span>
<span id="cb4-10">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StructuredOutputParser.from_response_schemas(response_schemas)</span></code></pre></div>
</div>
<p>이제 응답이 어떻게 포맷되어야 하는지에 대한 지시사항이 포함된 문자열을 받게 되며(schemas), 정의된 스키마를 프롬프트에 삽입합니다.</p>
<div id="f4d8a9a8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력 형식 지시사항을 파싱합니다.</span></span>
<span id="cb5-2">format_instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_parser.get_format_instructions()</span>
<span id="cb5-3">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용자의 질문에 최대한 답변하도록 템플릿을 설정합니다.</span></span>
<span id="cb5-5">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"answer the users question as best as possible.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 변수로 'question'을 사용합니다.</span></span>
<span id="cb5-7">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],</span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 부분 변수로 'format_instructions'을 사용합니다.</span></span>
<span id="cb5-9">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format_instructions"</span>: format_instructions},</span>
<span id="cb5-10">)</span></code></pre></div>
</div>
<div id="9817f2eb" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 모델 초기화</span></span>
<span id="cb6-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트, 모델, 출력 파서를 연결</span></span></code></pre></div>
</div>
<div id="79f01314" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 대한민국의 수도가 무엇인지 질문합니다.</span></span>
<span id="cb7-2">chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"대한민국의 수도는 어디인가요?"</span>})</span></code></pre></div>
</div>
<p><code>chain.stream</code> 메소드를 사용하여 “세종대왕의 업적은 무엇인가요?” 라는 질문에 대한 스트림 응답을 받습니다.</p>
<div id="e1d2ad45" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chain.stream({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"세종대왕의 업적은 무엇인가요?"</span>}):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력</span></span>
<span id="cb8-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(s)</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/03-StructuredOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>JsonOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/04-JsonOutputParser.html</link>
  <description><![CDATA[ 




<section id="jsonoutputparser" class="level1">
<h1>JsonOutputParser</h1>
<p>JsonOutputParser는 사용자가 원하는 JSON 스키마를 지정할 수 있게 해주는 도구입니다. 이 도구는 Large Language Model (LLM)이 데이터를 조회하고 결과를 도출할 때, 지정된 스키마에 맞게 JSON 형식으로 데이터를 반환할 수 있도록 설계되었습니다.</p>
<p>LLM이 데이터를 정확하고 효율적으로 처리하여 사용자가 원하는 형태의 JSON을 생성하기 위해서는, 모델의 용량(예: 인텔리전스)이 충분히 커야 합니다. 예를 들어, llama-70B 모델은 llama-8B 모델보다 더 큰 용량을 가지고 있어 보다 복잡한 데이터를 처리하는 데 유리합니다.</p>
<p><strong>[참고]</strong></p>
<p><code>JSON (JavaScript Object Notation)</code> 은 데이터를 저장하고 구조적으로 전달하기 위해 사용되는 경량의 데이터 교환 포맷입니다. 웹 개발에서 매우 중요한 역할을 하며, 서버와 클라이언트 간의 통신을 위해 널리 사용됩니다. JSON은 읽기 쉽고, 기계가 파싱하고 생성하기 쉬운 텍스트를 기반으로 합니다.</p>
<p>JSON의 기본 구조 JSON 데이터는 이름(키)과 값의 쌍으로 이루어져 있습니다. 여기서 “이름”은 문자열이고, “값”은 다양한 데이터 유형일 수 있습니다. JSON은 두 가지 기본 구조를 가집니다:</p>
<ul>
<li>객체: 중괄호 {}로 둘러싸인 키-값 쌍의 집합입니다. 각 키는 콜론 :을 사용하여 해당하는 값과 연결되며, 여러 키-값 쌍은 쉼표 ,로 구분됩니다.</li>
<li>배열: 대괄호 []로 둘러싸인 값의 순서 있는 목록입니다. 배열 내의 값은 쉼표 ,로 구분됩니다.</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"age"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"is_student"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"skills"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Java"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JavaScript"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"street"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123 Main St"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"city"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anytown"</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div id="0a77ca57" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb2-2"></span>
<span id="cb2-3">load_dotenv()</span></code></pre></div>
</div>
<div id="98a0bac6" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb3-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="f2dea9c0" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPromptTemplate</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> JsonOutputParser</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span></code></pre></div>
</div>
<div id="e4b1465b" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OpenAI 객체를 생성합니다.</span></span>
<span id="cb5-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>)</span></code></pre></div>
</div>
<p>원하는 출력 구조를 정의합니다.</p>
<div id="40f59601" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원하는 데이터 구조를 정의합니다.</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Topic(BaseModel):</span>
<span id="cb6-3">    description: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"주제에 대한 간결한 설명"</span>)</span>
<span id="cb6-4">    hashtags: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"해시태그 형식의 키워드(2개 이상)"</span>)</span></code></pre></div>
</div>
<p><code>JsonOutputParser</code>를 사용하여 파서를 설정하고, 프롬프트 템플릿에 지시사항을 주입합니다.</p>
<div id="d8adf21d" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의 작성</span></span>
<span id="cb7-2">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"지구 온난화의 심각성 대해 알려주세요."</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파서를 설정하고 프롬프트 템플릿에 지시사항을 주입합니다.</span></span>
<span id="cb7-5">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JsonOutputParser(pydantic_object<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Topic)</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parser.get_format_instructions())</span></code></pre></div>
</div>
<div id="dacd3dd3" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 설정합니다.</span></span>
<span id="cb8-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb8-3">    [</span>
<span id="cb8-4">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 친절한 AI 어시스턴트 입니다. 질문에 간결하게 답변하세요."</span>),</span>
<span id="cb8-5">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Format: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb8-6">    ]</span>
<span id="cb8-7">)</span>
<span id="cb8-8"></span>
<span id="cb8-9">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.partial(format_instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser.get_format_instructions())</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 구성합니다.</span></span>
<span id="cb8-12">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> parser</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 호출하여 쿼리 실행</span></span>
<span id="cb8-15">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question})</span></code></pre></div>
</div>
<div id="2e7fbbd6" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 타입을 확인합니다.</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(answer)</span></code></pre></div>
</div>
<div id="472ecbaf" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># answer 객체를 출력합니다.</span></span>
<span id="cb10-2">answer</span></code></pre></div>
</div>
<p><strong>Pydantic 을 사용하지 않고 <code>JsonOutputParser</code> 를 사용</strong></p>
<p>Pydantic 없이도 이 기능을 사용할 수 있습니다. 이 경우 JSON을 반환하도록 요청하지만, 스키마가 어떻게 되어야 하는지에 대한 구체적인 정보는 제공하지 않습니다.</p>
<div id="3c3a2ce1" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 질의 작성</span></span>
<span id="cb11-2">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"지구 온난화에 대해 알려주세요. 온난화에 대한 설명은 `description`에, 관련 키워드는 `hashtags`에 담아주세요."</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JSON 출력 파서 초기화</span></span>
<span id="cb11-5">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JsonOutputParser()</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 설정합니다.</span></span>
<span id="cb11-8">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPromptTemplate.from_messages(</span>
<span id="cb11-9">    [</span>
<span id="cb11-10">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"당신은 친절한 AI 어시스턴트 입니다. 질문에 간결하게 답변하세요."</span>),</span>
<span id="cb11-11">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Format: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb11-12">    ]</span>
<span id="cb11-13">)</span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 지시사항을 프롬프트에 주입합니다.</span></span>
<span id="cb11-16">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt.partial(format_instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser.get_format_instructions())</span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트, 모델, 파서를 연결하는 체인 생성</span></span>
<span id="cb11-19">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> parser</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 호출하여 쿼리 실행</span></span>
<span id="cb11-22">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: question})</span>
<span id="cb11-23"></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력을 확인합니다.</span></span>
<span id="cb11-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/04-JsonOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>PandasDataFrameOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/05-PandasDataFrameOutputParser.html</link>
  <description><![CDATA[ 




<section id="pandasdataframeoutputparser" class="level1">
<h1>PandasDataFrameOutputParser</h1>
<p><strong>Pandas DataFrame</strong>은 Python 프로그래밍 언어에서 널리 사용되는 데이터 구조로, 데이터 조작 및 분석을 위한 강력한 도구입니다. DataFrame은 구조화된 데이터를 효과적으로 다루기 위한 포괄적인 도구 세트를 제공하며, 이를 통해 데이터 정제, 변환 및 분석과 같은 다양한 작업을 수행할 수 있습니다.</p>
<p>이 <strong>출력 파서</strong>는 사용자가 임의의 Pandas DataFrame을 지정하여 해당 DataFrame에서 데이터를 추출하고, 이를 형식화된 사전(dictionary) 형태로 조회할 수 있게 해주는 LLM(Large Language Model) 기반 도구입니다.</p>
<div id="de387034" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="fe9492a0" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="6c6d4c70" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PandasDataFrameOutputParser</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span></code></pre></div>
</div>
<div id="8a500317" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 모델 초기화 (gpt-3.5-turbo 모델 사용을 권장합니다)</span></span>
<span id="cb4-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>)</span></code></pre></div>
</div>
<p><code>format_parser_output</code> 함수는 파서 출력을 사전 형식으로 변환하고 출력 형식을 지정하는 데 사용됩니다.</p>
<div id="d3dadcb4" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력 목적으로만 사용됩니다.</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> format_parser_output(parser_output: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파서 출력의 키들을 순회합니다.</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> parser_output.keys():</span>
<span id="cb5-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 키의 값을 딕셔너리로 변환합니다.</span></span>
<span id="cb5-6">        parser_output[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser_output[key].to_dict()</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예쁘게 출력합니다.</span></span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pprint.PrettyPrinter(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, compact<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).pprint(parser_output)</span></code></pre></div>
</div>
<ul>
<li><code>titanic.csv</code> 데이터를 읽어온 뒤 DataFrame 을 로드하여 <code>df</code> 변수에 할당합니다.</li>
<li>PandasDataFrameOutputParser를 사용하여 DataFrame을 파싱합니다.</li>
</ul>
<div id="f4228af1" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원하는 Pandas DataFrame을 정의합니다.</span></span>
<span id="cb6-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/titanic.csv"</span>)</span>
<span id="cb6-3">df.head()</span></code></pre></div>
</div>
<div id="436f7dea" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파서를 설정하고 프롬프트 템플릿에 지시사항을 주입합니다.</span></span>
<span id="cb7-2">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PandasDataFrameOutputParser(dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파서의 지시사항을 출력합니다.</span></span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parser.get_format_instructions())</span></code></pre></div>
</div>
<p>컬럼에 대한 값을 조회하는 예제입니다.</p>
<div id="42688b23" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 열 작업 예시입니다.</span></span>
<span id="cb8-2">df_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age column 을 조회해 주세요."</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 설정합니다.</span></span>
<span id="cb8-6">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate(</span>
<span id="cb8-7">    template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Answer the user query.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb8-8">    input_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 입력 변수 설정</span></span>
<span id="cb8-9">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb8-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format_instructions"</span>: parser.get_format_instructions()</span>
<span id="cb8-11">    },  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 부분 변수 설정</span></span>
<span id="cb8-12">)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 생성</span></span>
<span id="cb8-15">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> parser</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 실행</span></span>
<span id="cb8-18">parser_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: df_query})</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력</span></span>
<span id="cb8-21">format_parser_output(parser_output)</span></code></pre></div>
</div>
<p>첫 번째 행을 검색하는 예시입니다.</p>
<div id="867ced38" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 행 조회 예시입니다.</span></span>
<span id="cb9-2">df_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieve the first row."</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 실행</span></span>
<span id="cb9-5">parser_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: df_query})</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb9-8">format_parser_output(parser_output)</span></code></pre></div>
</div>
<p>특정 열에서 일부 행의 평균을 검색하는 작업 예제입니다.</p>
<div id="e479306f" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># row 0 ~ 4의 평균 나이를 구합니다.</span></span>
<span id="cb10-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>].head().mean()</span></code></pre></div>
</div>
<div id="a26883b4" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 임의의 Pandas DataFrame 작업 예시, 행의 수를 제한합니다.</span></span>
<span id="cb11-2">df_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieve the average of the Ages from row 0 to 4."</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 실행</span></span>
<span id="cb11-5">parser_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: df_query})</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parser_output)</span></code></pre></div>
</div>
<p>다음은 요금(Fare) 에 대한 평균 가격을 산정하는 예시입니다.</p>
<div id="743b51ef" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df.head()</span></code></pre></div>
</div>
<div id="68a97d89" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 잘못 형식화된 쿼리의 예시입니다.</span></span>
<span id="cb13-2">df_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calculate average `Fare` rate."</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인 실행</span></span>
<span id="cb13-5">parser_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: df_query})</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parser_output)</span></code></pre></div>
</div>
<div id="d7dd2f2b" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 검증</span></span>
<span id="cb14-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fare"</span>].mean()</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/05-PandasDataFrameOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>DatetimeOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/06-DatetimeOutputParser.html</link>
  <description><![CDATA[ 




<section id="datetimeoutputparser" class="level1">
<h1>DatetimeOutputParser</h1>
<p><code>DatetimeOutputParser</code> 는 LLM의 출력을 <code>datetime</code> 형식으로 파싱하는 데 사용할 수 있습니다.</p>
<div id="1f203512" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="4f1b62ad" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<p><strong>참고</strong></p>
<table class="table">
<thead>
<tr class="header">
<th>형식 코드</th>
<th>설명</th>
<th>예시</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>%Y</td>
<td>4자리 연도</td>
<td>2024</td>
</tr>
<tr class="even">
<td>%y</td>
<td>2자리 연도</td>
<td>24</td>
</tr>
<tr class="odd">
<td>%m</td>
<td>2자리 월</td>
<td>07</td>
</tr>
<tr class="even">
<td>%d</td>
<td>2자리 일</td>
<td>04</td>
</tr>
<tr class="odd">
<td>%H</td>
<td>24시간제 시간</td>
<td>14</td>
</tr>
<tr class="even">
<td>%I</td>
<td>12시간제 시간</td>
<td>02</td>
</tr>
<tr class="odd">
<td>%p</td>
<td>AM 또는 PM</td>
<td>PM</td>
</tr>
<tr class="even">
<td>%M</td>
<td>2자리 분</td>
<td>45</td>
</tr>
<tr class="odd">
<td>%S</td>
<td>2자리 초</td>
<td>08</td>
</tr>
<tr class="even">
<td>%f</td>
<td>마이크로초 (6자리)</td>
<td>000123</td>
</tr>
<tr class="odd">
<td>%z</td>
<td>UTC 오프셋</td>
<td>+0900</td>
</tr>
<tr class="even">
<td>%Z</td>
<td>시간대 이름</td>
<td>KST</td>
</tr>
<tr class="odd">
<td>%a</td>
<td>요일 약어</td>
<td>Thu</td>
</tr>
<tr class="even">
<td>%A</td>
<td>요일 전체</td>
<td>Thursday</td>
</tr>
<tr class="odd">
<td>%b</td>
<td>월 약어</td>
<td>Jul</td>
</tr>
<tr class="even">
<td>%B</td>
<td>월 전체</td>
<td>July</td>
</tr>
<tr class="odd">
<td>%c</td>
<td>전체 날짜와 시간</td>
<td>Thu Jul 4 14:45:08 2024</td>
</tr>
<tr class="even">
<td>%x</td>
<td>전체 날짜</td>
<td>07/04/24</td>
</tr>
<tr class="odd">
<td>%X</td>
<td>전체 시간</td>
<td>14:45:08</td>
</tr>
</tbody>
</table>
<div id="eef9dedf" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DatetimeOutputParser</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 날짜 및 시간 출력 파서</span></span>
<span id="cb3-6">output_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DatetimeOutputParser()</span>
<span id="cb3-7">output_parser.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용자 질문에 대한 답변 템플릿</span></span>
<span id="cb3-10">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Answer the users question:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Format Instructions: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{format_instructions}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Question: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{question}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#Answer:"""</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb3-13">    template,</span>
<span id="cb3-14">    partial_variables<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb3-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format_instructions"</span>: output_parser.get_format_instructions()</span>
<span id="cb3-16">    },  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 지침을 템플릿에 적용</span></span>
<span id="cb3-17">)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 내용을 출력</span></span>
<span id="cb3-20">prompt</span></code></pre></div>
</div>
<p>체인을 생성합니다.</p>
<div id="ad8b9123" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Chain 을 생성합니다.</span></span>
<span id="cb4-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ChatOpenAI() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> output_parser</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 호출하여 질문에 대한 답변을 받습니다.</span></span>
<span id="cb4-5">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"question"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google 이 창업한 연도"</span>})</span></code></pre></div>
</div>
<p>결과를 출력합니다.</p>
<div id="b5c1d847" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과를 문자열로 변환</span></span>
<span id="cb5-2">output.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/06-DatetimeOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>EnumOutputParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/07-EnumOutputParser.html</link>
  <description><![CDATA[ 




<section id="enumoutputparser" class="level1">
<h1>EnumOutputParser</h1>
<p>LangChain의 EnumOutputParser는 언어 모델의 출력을 미리 정의된 열거형(Enum) 값 중 하나로 파싱하는 도구입니다. 이 파서의 주요 특징과 사용법은 다음과 같습니다.</p>
<section id="주요-특징" class="level2">
<h2 class="anchored" data-anchor-id="주요-특징">주요 특징</h2>
<ul>
<li><strong>열거형 파싱</strong>: 문자열 출력을 미리 정의된 Enum 값으로 변환합니다.</li>
<li><strong>타입 안전성</strong>: 파싱된 결과가 반드시 정의된 Enum 값 중 하나임을 보장합니다.</li>
<li><strong>유연성</strong>: 공백이나 줄바꿈 문자를 자동으로 처리합니다.</li>
</ul>
</section>
<section id="사용-방법" class="level2">
<h2 class="anchored" data-anchor-id="사용-방법">사용 방법</h2>
<p>EnumOutputParser는 언어 모델의 출력에서 유효한 Enum 값을 추출하는 데 유용합니다. 이를 통해 출력 데이터의 일관성을 유지하고 예측 가능성을 높일 수 있습니다. 파서를 사용하려면, 미리 정의된 Enum 값을 설정하고 해당 값을 기준으로 문자열 출력을 파싱합니다.</p>
<div id="40e36b45" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-2"></span>
<span id="cb1-3">load_dotenv()</span></code></pre></div>
</div>
<div id="28e7c6fa" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="63a7ed1c" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers.enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EnumOutputParser</span></code></pre></div>
</div>
<ul>
<li><code>enum</code> 모듈을 사용하여 <code>Colors</code> 클래스를 정의합니다.</li>
<li><code>Colors</code> 클래스는 <code>Enum</code>을 상속받으며, <code>RED</code>, <code>GREEN</code>, <code>BLUE</code> 세 가지 색상 값을 가집니다.</li>
</ul>
<div id="9a50615a" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Enum</span>
<span id="cb4-2"></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Colors(Enum):</span>
<span id="cb4-5">    RED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"빨간색"</span></span>
<span id="cb4-6">    GREEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"초록색"</span></span>
<span id="cb4-7">    BLUE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"파란색"</span></span></code></pre></div>
</div>
<p><code>EnumOutputParser</code> 를 생성합니다.</p>
<div id="029d7efd" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># EnumOutputParser 인스턴스 생성</span></span>
<span id="cb5-2">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnumOutputParser(enum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Colors)</span></code></pre></div>
</div>
<div id="d92998af" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 생성합니다.</span></span>
<span id="cb6-5">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(</span>
<span id="cb6-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""다음의 물체는 어떤 색깔인가요?</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Object: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{object}</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Instructions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{instructions}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파서에서 지시사항 형식을 가져와 부분적으로 적용합니다.</span></span>
<span id="cb6-12">).partial(instructions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser.get_format_instructions())</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 생성합니다.</span></span>
<span id="cb6-15">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> ChatOpenAI() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> parser</span></code></pre></div>
</div>
<ul>
<li><code>chain.invoke</code> 함수를 사용하여 “하늘”에 대한 정보를 요청합니다.</li>
</ul>
<div id="e53d3497" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 실행합니다.</span></span>
<span id="cb7-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"하늘"</span>})</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
</div>
<p>결과를 확인합니다.</p>
<div id="f6f4b093" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력의 타입을 확인합니다.</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(response)</span></code></pre></div>
</div>
<div id="3bba9750" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출력의 값을 확인합니다.</span></span>
<span id="cb9-2">response.value</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/07-EnumOutputParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>OutputFixingParser</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/08-OutputFixingParser.html</link>
  <description><![CDATA[ 




<section id="outputfixingparser" class="level1">
<h1>OutputFixingParser</h1>
<p><code>OutputFixingParser</code>는 출력 파싱 과정에서 발생할 수 있는 오류를 자동으로 수정하는 기능을 제공합니다. 이 파서는 기본적으로 다른 파서, 예를 들어 <code>PydanticOutputParser</code> 를 래핑하고, 이 파서가 처리할 수 없는 형식의 출력이나 오류를 반환할 경우, 추가적인 LLM 호출을 통해 오류를 수정하도록 설계되었습니다.</p>
<p>이러한 접근 방식의 핵심은, 첫 번째 시도에서 스키마를 준수하지 않는 결과가 나올 경우, <code>OutputFixingParser</code> 가 자동으로 형식이 잘못된 출력을 인식하고, 이를 수정하기 위한 새로운 명령어와 함께 모델에 다시 제출한다는 것입니다. 이 과정에서, 수정을 위한 명령어는 오류를 정확히 지적하고, 올바른 형식으로 데이터를 재구성할 수 있도록 구체적인 지시를 포함해야 합니다.</p>
<p>예를 들어, <code>PydanticOutputParser</code> 를 사용하여 특정 데이터 스키마를 준수하는 출력을 생성하려고 했지만, 일부 필드가 누락되었거나 데이터 유형이 잘못된 경우가 발생할 수 있습니다. 이때 <code>OutputFixingParser</code> 는 다음 단계로, 해당 오류를 수정하는 지시를 포함한 새로운 요청을 LLM에 제출합니다. LLM은 이 지시를 바탕으로 오류를 수정한 새로운 출력을 생성하게 됩니다.</p>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH03-OutputParser"</span>)</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PydanticOutputParser</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Actor(BaseModel):</span>
<span id="cb3-8">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name of an actor"</span>)</span>
<span id="cb3-9">    film_names: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list of names of films they starred in"</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11"></span>
<span id="cb3-12">actor_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate the filmography for a random actor."</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PydanticOutputParser(pydantic_object<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Actor)</span></code></pre></div>
</div>
<p>(참고) 다음의 Cell 은 오류가 발생해야 <strong>정상</strong> 입니다.</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 잘못된 형식을 일부러 입력</span></span>
<span id="cb4-2">misformatted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{'name': 'Tom Hanks', 'film_names': ['Forrest Gump']}"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 잘못된 형식으로 입력된 데이터를 파싱하려고 시도</span></span>
<span id="cb4-5">parser.parse(misformatted)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오류 출력</span></span></code></pre></div>
</div>
<p><code>OutputFixingParser</code> 를 사용하여 잘못된 형식을 바로 잡도록 하겠습니다.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.output_parsers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OutputFixingParser</span>
<span id="cb5-2"></span>
<span id="cb5-3">new_parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OutputFixingParser.from_llm(parser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parser, llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ChatOpenAI())</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 잘못된 형식의 출력</span></span>
<span id="cb6-2">misformatted</span></code></pre></div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OutputFixingParser 를 사용하여 잘못된 형식의 출력을 파싱</span></span>
<span id="cb7-2">actor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_parser.parse(misformatted)</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파싱된 결과</span></span>
<span id="cb8-2">actor</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/03-OutputParser/08-OutputFixingParser.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>다양한 LLM 모델 활용</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/01-Chat-Models.html</link>
  <description><![CDATA[ 




<section id="다양한-llm-모델-활용" class="level1">
<h1>다양한 LLM 모델 활용</h1>
<div id="3bf28f9e" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="edd6b300" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-7">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH04-Models"</span>)</span></code></pre></div>
</div>
<section id="openai" class="level2">
<h2 class="anchored" data-anchor-id="openai">OpenAI</h2>
<section id="개요" class="level3">
<h3 class="anchored" data-anchor-id="개요">개요</h3>
<p>OpenAI는 채팅 전용 Large Language Model (LLM)을 제공합니다. 이 모델을 생성할 때 다양한 옵션을 지정할 수 있으며, 이러한 옵션들은 모델의 동작 방식에 영향을 미칩니다.</p>
</section>
<section id="옵션-상세-설명" class="level3">
<h3 class="anchored" data-anchor-id="옵션-상세-설명">옵션 상세 설명</h3>
<p><code>temperature</code></p>
<ul>
<li>샘플링 온도를 설정하는 옵션입니다. 값은 0과 2 사이에서 선택할 수 있습니다. 높은 값(예: 0.8)은 출력을 더 무작위하게 만들고, 낮은 값(예: 0.2)은 출력을 더 집중되고 결정론적으로 만듭니다.</li>
</ul>
<p><code>max_tokens</code></p>
<ul>
<li>채팅 완성에서 생성할 토큰의 최대 개수를 지정합니다. 이 옵션은 모델이 한 번에 생성할 수 있는 텍스트의 길이를 제어합니다.</li>
</ul>
<p><code>model_name</code></p>
<ul>
<li>적용 가능한 모델을 선택하는 옵션입니다. 더 자세한 정보는 <a href="https://platform.openai.com/docs/models">OpenAI 모델 문서</a>에서 확인할 수 있습니다.</li>
</ul>
<p><strong>모델 스펙</strong></p>
<ul>
<li>링크: https://platform.openai.com/docs/models</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 17%">
<col style="width: 10%">
<col style="width: 16%">
<col style="width: 11%">
<col style="width: 13%">
<col style="width: 16%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th>Model</th>
<th>Input (1M)</th>
<th>Cached Input (1M)</th>
<th>Output (1M)</th>
<th>Context Window</th>
<th>Max Output Tokens</th>
<th>Knowledge Cutoff</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>gpt-4.1</td>
<td>$2.00</td>
<td>$0.50</td>
<td>$8.00</td>
<td>1,047,576</td>
<td>32,768</td>
<td>Jun 01, 2024</td>
</tr>
<tr class="even">
<td>gpt-4.1-mini</td>
<td>$0.40</td>
<td>$0.10</td>
<td>$1.60</td>
<td>1,047,576</td>
<td>32,768</td>
<td>Jun 01, 2024</td>
</tr>
<tr class="odd">
<td>gpt-4.1-nano</td>
<td>$0.10</td>
<td>$0.025</td>
<td>$0.40</td>
<td>1,047,576</td>
<td>32,768</td>
<td>Jun 01, 2024</td>
</tr>
<tr class="even">
<td>gpt-4o</td>
<td>$2.50</td>
<td>$1.25</td>
<td>$10.00</td>
<td>128,000</td>
<td>16,384</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="odd">
<td>gpt-4o-mini</td>
<td>$0.15</td>
<td>$0.075</td>
<td>$0.60</td>
<td>128,000</td>
<td>16,384</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="even">
<td>o1</td>
<td>$15.00</td>
<td>$7.50</td>
<td>$60.00</td>
<td>128,000</td>
<td>65,536</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="odd">
<td>o1-mini</td>
<td>$1.10</td>
<td>$0.55</td>
<td>$4.40</td>
<td>128,000</td>
<td>65,536</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="even">
<td>o1-pro</td>
<td>$150.00</td>
<td>–</td>
<td>$600.00</td>
<td>128,000</td>
<td>65,536</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="odd">
<td>o3-mini</td>
<td>$1.10</td>
<td>$0.55</td>
<td>$4.40</td>
<td>200,000</td>
<td>100,000</td>
<td>Oct 01, 2023</td>
</tr>
<tr class="even">
<td>gpt-4.5-preview</td>
<td>$75.00</td>
<td>$37.50</td>
<td>$150.00</td>
<td>–</td>
<td>–</td>
<td>–</td>
</tr>
</tbody>
</table>
<div id="5fc161c2" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatOpenAI 객체를 생성합니다.</span></span>
<span id="cb3-4">gpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb3-5">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-6">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4.1-mini"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델명</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위하여 invoke() 대신 stream()을 사용합니다.</span></span>
<span id="cb3-10">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpt.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사랑이 뭔가요?"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 출력</span></span>
<span id="cb3-13">stream_response(answer)</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="anthropic" class="level1">
<h1>Anthropic</h1>
<p>Anthropic은 인공지능(AI) 안전성과 연구에 중점을 둔 미국의 스타트업 기업입니다. 주요 정보는 다음과 같습니다:</p>
<ul>
<li><strong>설립 연도</strong>: 2021년</li>
<li><strong>위치</strong>: 미국 샌프란시스코</li>
<li><strong>창립자</strong>: OpenAI 출신 직원들 (Daniela Amodei와 Dario Amodei 등)</li>
<li><strong>기업 형태</strong>: 공익기업(Public Benefit Corporation)으로 등록</li>
</ul>
<section id="claude" class="level2">
<h2 class="anchored" data-anchor-id="claude">Claude</h2>
<p>Claude는 Anthropic의 대표적인 대규모 언어 모델(LLM) 제품군입니다.</p>
<ul>
<li><strong>API 키 발급</strong>: <a href="https://console.anthropic.com/settings/keys">https://console.anthropic.com/settings/keys</a></li>
<li><strong>모델 리스트</strong>: <a href="https://docs.anthropic.com/en/docs/about-claude/models">https://docs.anthropic.com/en/docs/about-claude/models</a></li>
</ul>
<p><img src="kk3225.netlify.app/docs/blog/posts/RAG/04-Model/images/anthropic-20241023.png" class="img-fluid"></p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 20%">
<col style="width: 24%">
<col style="width: 25%">
<col style="width: 19%">
</colgroup>
<thead>
<tr class="header">
<th>model_name</th>
<th>model</th>
<th>Anthropic API</th>
<th>AWS Bedrock</th>
<th>GCP Vertex AI</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Claude 3.5 Opus</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
</tr>
<tr class="even">
<td>Claude 3.5 Sonnet</td>
<td>claude-3-5-sonnet-20241022</td>
<td>claude-3-5-sonnet-20241022</td>
<td>anthropic.claude-3-5-sonnet-20241022-v2:0</td>
<td>claude-3-5-sonnet-v2@20241022</td>
</tr>
<tr class="odd">
<td>Claude 3.5 Haiku</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
<td>연말 출시 예정</td>
</tr>
<tr class="even">
<td>Claude 3 Opus</td>
<td>claude-3-opus-20240229</td>
<td>claude-3-opus-20240229</td>
<td>anthropic.claude-3-opus-20240229-v1:0</td>
<td>claude-3-opus@20240229</td>
</tr>
<tr class="odd">
<td>Claude 3 Sonnet</td>
<td>claude-3-sonnet-20240229</td>
<td>claude-3-sonnet-20240229</td>
<td>anthropic.claude-3-sonnet-20240229-v1:0</td>
<td>claude-3-sonnet@20240229</td>
</tr>
<tr class="even">
<td>Claude 3 Haiku</td>
<td>claude-3-haiku-20240307</td>
<td>claude-3-haiku-20240307</td>
<td>anthropic.claude-3-haiku-20240307-v1:0</td>
<td>claude-3-haiku@20240307</td>
</tr>
</tbody>
</table>
<div id="95b38108" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_anthropic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatAnthropic</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatAnthropic 객체를 생성합니다.</span></span>
<span id="cb4-4">anthropic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatAnthropic(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claude-3-5-sonnet-20241022"</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위하여 invoke() 대신 stream()을 사용합니다.</span></span>
<span id="cb4-7">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anthropic.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사랑이 뭔가요?"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 출력</span></span>
<span id="cb4-10">stream_response(answer)</span></code></pre></div>
</div>
</section>
</section>
<section id="perplexity" class="level1">
<h1>Perplexity</h1>
<p>링크: https://www.perplexity.ai/</p>
<ul>
<li><strong>설립연도</strong>: 2022년</li>
<li><strong>주요 투자자</strong>: Jeff Bezos, Nvidia, Databricks, Bessemer Venture Partners, IVP, Wayra 등</li>
<li><strong>최근 펀딩</strong>: 5억 달러 (2024년 10월)</li>
<li><strong>기업 가치</strong>: 약 90억 달러 (2024년 11월 기준)</li>
<li><strong>월간 활성 사용자</strong>: 1,500만 명</li>
</ul>
<section id="perplexity-pro-정확한-특징" class="level2">
<h2 class="anchored" data-anchor-id="perplexity-pro-정확한-특징">Perplexity Pro 정확한 특징</h2>
<ul>
<li><strong>일일 Pro 검색</strong>: 300회</li>
<li><strong>AI 모델 선택</strong>: GPT-4 Omni, Claude 3 Sonnet/Haiku, Sonar Large 32k[5]</li>
<li><strong>파일 분석</strong>: PDF, CSV, 이미지 파일 지원</li>
<li><strong>가격</strong>: 월 $20 또는 연 $200</li>
</ul>
</section>
<section id="perplexity-api-사용-방법" class="level2">
<h2 class="anchored" data-anchor-id="perplexity-api-사용-방법">Perplexity API 사용 방법</h2>
<p><strong>가격</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kk3225.netlify.app/docs/blog/posts/RAG/04-Model/01-Chat-Models_files/figure-html/cbb5d1f3-1-perplexity-pricing.png" class="img-fluid figure-img"></p>
<figcaption>perplexity-pricing.png</figcaption>
</figure>
</div>
<ul>
<li><strong>API 크레딧 획득</strong>
<ul>
<li>Perplexity Pro 구독 시 <strong>매월 $5 상당의 API 크레딧 제공</strong></li>
</ul></li>
<li><strong>API 모델 옵션</strong>
<ul>
<li>Llama 3 기반 모델</li>
<li>Perplexity 온라인 LLM</li>
<li>인용 기능 포함</li>
</ul></li>
<li>API 키 발급: <a href="https://www.perplexity.ai/settings/api">API 콘솔</a></li>
</ul>
<p>API 키 발급 후 <code>.env</code> 파일에 키 저장</p>
<pre><code>PPLX_API_KEY=이곳에 API 키를 입력하세요.</code></pre>
<p>혹은</p>
<pre><code>import os

os.environ["PPLX_API_KEY"] = "이곳에 API 키를 입력하세요."</code></pre>
<p><strong>참고</strong></p>
<ul>
<li><a href="https://docs.perplexity.ai/api-reference/chat-completions">API 문서</a></li>
</ul>
</section>
<section id="지원-모델" class="level2">
<h2 class="anchored" data-anchor-id="지원-모델">지원 모델</h2>
<table class="table">
<colgroup>
<col style="width: 42%">
<col style="width: 18%">
<col style="width: 17%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th>Model</th>
<th>Parameter Count</th>
<th>Context Length</th>
<th>Model Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>llama-3.1-sonar-small-128k-online</code></td>
<td>8B</td>
<td>127,072</td>
<td>Chat Completion</td>
</tr>
<tr class="even">
<td><code>llama-3.1-sonar-large-128k-online</code></td>
<td>70B</td>
<td>127,072</td>
<td>Chat Completion</td>
</tr>
<tr class="odd">
<td><code>llama-3.1-sonar-huge-128k-online</code></td>
<td>405B</td>
<td>127,072</td>
<td>Chat Completion</td>
</tr>
</tbody>
</table>
</section>
<section id="chatperplexity-매개변수" class="level2">
<h2 class="anchored" data-anchor-id="chatperplexity-매개변수">ChatPerplexity 매개변수</h2>
<p><code>model</code><br>
사용할 언어 모델을 지정 (예: “llama-3.1-sonar-small-128k-online”) - 기본 성능과 능력을 결정.</p>
<p><code>temperature</code><br>
응답의 무작위성을 조절 (0.0-1.0), 0은 결정적, 1은 가장 무작위한 응답 생성.</p>
<p><code>top_p</code><br>
토큰 샘플링의 확률 임계값 설정 (0.0-1.0), 높을수록 더 다양한 출력 허용.</p>
<p><code>search_domain_filter</code><br>
검색 결과를 지정된 도메인으로 제한, 리스트 형태로 제공 (예: [“perplexity.ai”]).</p>
<p><code>return_images</code><br>
응답에 이미지 포함 여부를 결정하는 불리언 플래그.</p>
<p><code>return_related_questions</code><br>
관련 질문 제안 기능을 활성화/비활성화하는 불리언 플래그.</p>
<p><code>top_k</code><br>
사용할 검색 결과의 수 제한 (0은 제한 없음을 의미).</p>
<p><code>streaming</code><br>
응답을 스트리밍으로 받을지 완성된 형태로 받을지 결정하는 불리언 플래그.</p>
<p><code>presence_penalty</code><br>
토큰 반복에 대한 페널티 (-2.0에서 2.0), 높을수록 재사용을 억제.</p>
<p><code>frequency_penalty</code><br>
일반적/희귀 토큰 선호도 조정 (-2.0에서 2.0), 높을수록 희귀 토큰 선호.</p>
<div id="620cfb66" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatPerplexity</span>
<span id="cb7-2"></span>
<span id="cb7-3">perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatPerplexity(</span>
<span id="cb7-4">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama-3.1-sonar-large-128k-online"</span>,</span>
<span id="cb7-5">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb7-6">    top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb7-7">    search_domain_filter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"perplexity.ai"</span>],</span>
<span id="cb7-8">    return_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-9">    return_related_questions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># search_recency_filter="month",</span></span>
<span id="cb7-11">    top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-12">    streaming<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-13">    presence_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-14">    frequency_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-15">)</span></code></pre></div>
</div>
<p>응답을 출력합니다. <code>ChatPerplexity</code> 는 지식 정보의 출처를 <code>citations</code> 속성에 저장합니다.</p>
<div id="4767c520" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 응답 출력</span></span>
<span id="cb8-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perplexity.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024년 노벨문학상 수상자를 조사해 주세요"</span>)</span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb8-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, citation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(response.citations):</span>
<span id="cb8-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>citation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>스트리밍 출력</p>
<div id="b4607a67" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perplexity.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024년 노벨문학상 수상자를 조사해 주세요"</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response:</span>
<span id="cb9-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token.content, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, citation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(token.citations):</span>
<span id="cb9-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>citation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
</section>
<section id="together-ai" class="level2">
<h2 class="anchored" data-anchor-id="together-ai">Together AI</h2>
<ul>
<li>링크: https://www.together.ai/</li>
<li>API 키 발급: https://api.together.ai/</li>
<li><code>TOGETHER_API_KEY</code> 환경변수 설정</li>
</ul>
<p>Together AI는 2022년 샌프란시스코에서 설립된 생성형 AI 클라우드 플랫폼 회사입니다(NVIDIA, Kleiner Perkins, Lux, NEA 등으로부터 1억 2천만 달러 이상의 투자를 유치했습니다).</p>
<section id="주요-제품과-특징" class="level3">
<h3 class="anchored" data-anchor-id="주요-제품과-특징">주요 제품과 특징</h3>
<p><strong>Together Inference</strong></p>
<ul>
<li>업계에서 가장 빠른 추론 스택을 제공하며, vLLM보다 최대 4배 빠른 성능을 보입니다</li>
<li>Llama-3 70B 사용 시 GPT-4 대비 11배 낮은 비용으로 운영 가능</li>
<li>자동 확장 기능으로 API 요청 볼륨에 맞춰 용량이 자동으로 조정됩니다</li>
</ul>
<p><strong>Together Custom Models</strong></p>
<ul>
<li>사용자 맞춤형 AI 모델 학습 및 Fine-tuning 지원</li>
<li>FlashAttention-3와 같은 최신 최적화 기술 적용</li>
<li>학습된 모델에 대한 완전한 소유권 보장</li>
</ul>
</section>
<section id="기술적-특징" class="level3">
<h3 class="anchored" data-anchor-id="기술적-특징">기술적 특징</h3>
<p><strong>성능 최적화</strong></p>
<ul>
<li>FlashAttention-3 커널과 독점 커널을 통합한 추론 엔진 보유</li>
<li>Medusa와 SpecExec 같은 추측적 디코딩 알고리즘 적용</li>
<li>최고의 정확도와 성능을 위한 독자적인 양자화 기술 사용</li>
</ul>
<p><strong>지원 모델</strong></p>
<ul>
<li>Google Gemma, Meta의 Llama 3.3, Qwen2.5, Mistral AI의 Mistral/Mixtral 등 200개 이상의 오픈소스 모델 지원</li>
<li>멀티모달 AI 모델 지원으로 다양한 형태의 데이터 처리 가능</li>
</ul>
<p><strong>보안 및 프라이버시</strong></p>
<ul>
<li>사용자가 명시적으로 동의하지 않는 한 데이터는 새로운 모델 학습에 사용되지 않음</li>
<li>데이터 보관에 대한 완전한 제어권을 사용자에게 제공</li>
</ul>
<div id="a6b794c1" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_together <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatTogether</span>
<span id="cb10-3"></span>
<span id="cb10-4">together <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatTogether(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Llama-3.3-70B-Instruct-Turbo"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># together = ChatTogether(model="google/gemma-2-27b-it", temperature=0)</span></span>
<span id="cb10-6"></span>
<span id="cb10-7">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> together.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"로또 생성기 파이썬 코드를 작성하세요"</span>)</span>
<span id="cb10-8">stream_response(answer)</span></code></pre></div>
</div>
<p>function calling 지원</p>
<div id="5bfc6d49" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb11-3"></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Lotto(BaseModel):</span>
<span id="cb11-6">    numbers: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb11-7"></span>
<span id="cb11-8"></span>
<span id="cb11-9">together_structured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> together.with_structured_output(Lotto)</span>
<span id="cb11-10"></span>
<span id="cb11-11">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> together_structured.invoke(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"로또 번호 6개를 추천해 주세요"</span>)</span>
<span id="cb11-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="cohere" class="level1">
<h1>Cohere</h1>
<p>Cohere는 기업용 인공지능 솔루션을 제공하는 선도적인 AI 기업으로, 대규모 언어 모델(LLM)을 개발하여 기업들이 AI 기술을 쉽게 도입하고 활용할 수 있도록 돕고 있습니다.</p>
<section id="cohere-개요" class="level2">
<h2 class="anchored" data-anchor-id="cohere-개요">Cohere 개요</h2>
<ul>
<li><strong>설립연도</strong>: 2020년</li>
<li><strong>주요 투자자</strong>: Inovia Capital, NVIDIA, Oracle, Salesforce Ventures</li>
<li><strong>시리즈 C 펀딩</strong>: 2억 7000만 달러 유치</li>
<li><strong>기업 미션</strong>: 기업용 AI 플랫폼 제공</li>
</ul>
</section>
<section id="주요-제품" class="level2">
<h2 class="anchored" data-anchor-id="주요-제품">주요 제품</h2>
<section id="command-r" class="level3">
<h3 class="anchored" data-anchor-id="command-r">Command R+</h3>
<p>Command R+는 기업용으로 최적화된 Cohere의 최신 LLM입니다.</p>
<section id="주요-특징" class="level4">
<h4 class="anchored" data-anchor-id="주요-특징">주요 특징</h4>
<ul>
<li><strong>긴 컨텍스트 윈도우</strong>: 128k 토큰 지원</li>
<li><strong>고급 RAG 기능</strong>: 검색 강화 생성 기능 제공</li>
<li><strong>다국어 지원</strong>: 10개 주요 비즈니스 언어 지원</li>
<li><strong>자동화 도구 사용 기능</strong>: 복잡한 비즈니스 프로세스 자동화</li>
</ul>
</section>
</section>
<section id="aya" class="level3">
<h3 class="anchored" data-anchor-id="aya">Aya</h3>
<p>Aya는 Cohere의 비영리 연구소인 Cohere for AI에서 개발한 오픈소스 다국어 LLM입니다.</p>
<section id="주요-특징-1" class="level4">
<h4 class="anchored" data-anchor-id="주요-특징-1">주요 특징</h4>
<ul>
<li><strong>언어 지원</strong>: 101개 언어 지원 (기존 오픈소스 모델의 두 배 이상)</li>
<li><strong>훈련 데이터셋</strong>: 5억 1300만 개의 데이터 포인트 포함하는 대규모 다국어 훈련 데이터셋 공개</li>
</ul>
<div id="f194b806" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_cohere <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatCohere</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatCohere 객체를 생성합니다.</span></span>
<span id="cb12-4">cohere <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatCohere(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위하여 invoke() 대신 stream()을 사용합니다.</span></span>
<span id="cb12-7">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cohere.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사랑이 뭔가요?"</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 출력</span></span>
<span id="cb12-10">stream_response(answer)</span></code></pre></div>
</div>
</section>
</section>
</section>
</section>
<section id="upstage" class="level1">
<h1>Upstage</h1>
<p>Upstage는 인공지능(AI) 기술, 특히 대규모 언어 모델(LLM)과 문서 AI 분야에 특화된 국내 스타트업입니다.</p>
<section id="주요-제품-및-기술" class="level2">
<h2 class="anchored" data-anchor-id="주요-제품-및-기술">주요 제품 및 기술</h2>
<section id="solar-llm" class="level3">
<h3 class="anchored" data-anchor-id="solar-llm">Solar LLM</h3>
<ul>
<li><strong>주요 특징</strong>: Upstage의 주력 대규모 언어 모델로, 빠른 성능과 비용 효율성으로 주목받고 있습니다.</li>
<li><strong>기술적 접근</strong>: Depth-Up Scaling (DUS) 기술을 적용하여 성능을 극대화합니다.</li>
<li><strong>플랫폼 통합</strong>: Amazon SageMaker JumpStart 등 다양한 플랫폼을 통해 API로 통합 제공됩니다.</li>
</ul>
</section>
<section id="document-ai-pack" class="level3">
<h3 class="anchored" data-anchor-id="document-ai-pack">Document AI Pack</h3>
<ul>
<li><strong>기능</strong>: OCR 기술을 기반으로 한 문서 처리 솔루션으로, 복잡한 문서에서 필요한 내용을 정확히 추출하고 디지털화합니다.</li>
</ul>
</section>
<section id="askup-seargest" class="level3">
<h3 class="anchored" data-anchor-id="askup-seargest">AskUp Seargest</h3>
<ul>
<li><strong>특징</strong>: 개인화된 검색 및 추천 서비스를 제공하며, 기존의 ChatGPT 통합 무료 챗봇 AskUp의 업그레이드 버전입니다.</li>
</ul>
</section>
</section>
<section id="api-키-발급" class="level2">
<h2 class="anchored" data-anchor-id="api-키-발급">API 키 발급</h2>
<p>API 키 발급은 <a href="https://console.upstage.ai/api-keys">여기</a>에서 가능합니다.</p>
<div id="5350647b" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UPSTAGE API KEY 설정</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import os</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># os.environ["UPSTAGE_API_KEY"] = "이곳에 API KEY를 입력하세요."</span></span></code></pre></div>
</div>
<div id="cc739c29" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_upstage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatUpstage</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ChatUpstage 객체를 생성합니다.</span></span>
<span id="cb14-4">upstage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatUpstage(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solar-pro"</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위하여 invoke() 대신 stream()을 사용합니다.</span></span>
<span id="cb14-7">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> upstage.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사랑이 뭔가요?"</span>)</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 출력</span></span>
<span id="cb14-10">stream_response(answer)</span></code></pre></div>
</div>
</section>
<section id="xionic" class="level2">
<h2 class="anchored" data-anchor-id="xionic">Xionic</h2>
<p>사이오닉에이아이(Sionic AI)는 대한민국의 유망한 인공지능 스타트업으로, 기업용 생성형 AI 솔루션을 개발하고 있습니다. 다음은 이 회사에 대한 주요 정보입니다:</p>
<section id="주요-제품-1" class="level3">
<h3 class="anchored" data-anchor-id="주요-제품-1">주요 제품</h3>
<ol type="1">
<li><strong>STORM Platform</strong>: 기업이 생성형 AI를 기술적 고민 없이 바로 적용할 수 있도록 하는 플랫폼</li>
<li><strong>STORM Answer</strong>: 기업에 최적화된 생성형 AI 솔루션으로 비즈니스 생산성 향상을 목표로 함</li>
<li><strong>Xionic</strong>: 상업적 이용이 가능한 라이센스의 한국어 AI 모델</li>
</ol>
<p>상업적 이용이 가능한 라이센스의 한국어 모델</p>
<ul>
<li>링크: https://github.com/sionic-ai/xionic</li>
</ul>
<p>(참고) 2024.11.29 기준 사용불가 (API 서버 오류)</p>
<div id="10f39d3d" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote.messages <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stream_response</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2024. 11. 21 업데이트 코드</span></span>
<span id="cb15-5">xionic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(</span>
<span id="cb15-6">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xionic-1-72b-20240919"</span>,</span>
<span id="cb15-7">    base_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://sionic.chat/v1/"</span>,</span>
<span id="cb15-8">    api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"934c4bbc-c384-4bea-af82-1450d7f8128d"</span>,</span>
<span id="cb15-9">)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스트리밍 출력을 위하여 invoke() 대신 stream()을 사용합니다.</span></span>
<span id="cb15-12">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xionic.stream(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사랑이 뭔가요?"</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답변 출력</span></span>
<span id="cb15-15">stream_response(answer)</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="logickor" class="level1">
<h1>LogicKor</h1>
<p>LogicKor는 한국어 언어 모델의 다분야 사고력을 평가하기 위해 만들어진 벤치마크 리더보드입니다.</p>
<section id="목적" class="level2">
<h2 class="anchored" data-anchor-id="목적">목적</h2>
<p>한국어 언어 모델의 다양한 분야에서의 사고력을 측정하는 벤치마크</p>
</section>
<section id="평가-영역" class="level2">
<h2 class="anchored" data-anchor-id="평가-영역">평가 영역</h2>
<ul>
<li>한국어 추론</li>
<li>수학</li>
<li>글쓰기</li>
<li>코딩</li>
<li>이해력</li>
</ul>
</section>
<section id="주요-특징-2" class="level2">
<h2 class="anchored" data-anchor-id="주요-특징-2">주요 특징</h2>
<ol type="1">
<li><strong>다양한 모델 평가</strong>: 국내외 다양한 언어 모델들의 성능을 비교할 수 있음</li>
<li><strong>객관적 성능 측정</strong>: 모델의 실제 성능을 다각도로 평가하여 객관적인 지표 제공</li>
<li><strong>오픈 소스</strong>: 누구나 접근하고 결과를 확인할 수 있는 오픈 플랫폼</li>
</ol>
<p>LogicKor 리더보드는 한국어 AI 모델의 발전을 위한 중요한 도구로 자리잡고 있으며, 지속적인 개선과 발전이 기대되고 있습니다.</p>
<ul>
<li>링크: <a href="https://lk.instruct.kr/">LogicKor 리더보드</a></li>
</ul>


</section>
</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/01-Chat-Models.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>캐싱(Caching)</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/02-Cache.html</link>
  <description><![CDATA[ 




<section id="캐싱caching" class="level2">
<h2 class="anchored" data-anchor-id="캐싱caching">캐싱(Caching)</h2>
<p>LangChain은 LLM을 위한 선택적 캐싱 레이어를 제공합니다.</p>
<p>이는 두 가지 이유로 유용합니다.</p>
<ul>
<li>동일한 완료를 여러 번 요청하는 경우 LLM 공급자에 대한 <strong>API 호출 횟수를 줄여 비용을 절감</strong>할 수 있습니다.</li>
<li>LLM 제공업체에 대한 <strong>API 호출 횟수를 줄여 애플리케이션의 속도를 높일 수</strong> 있습니다.</li>
</ul>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH04-Models"</span>)</span></code></pre></div>
</div>
<p>모델과 프롬프트를 생성합니다</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델을 생성합니다.</span></span>
<span id="cb3-5">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트를 생성합니다.</span></span>
<span id="cb3-8">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{country}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 에 대해서 200자 내외로 요약해줘"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 생성합니다.</span></span>
<span id="cb3-11">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time </span>
<span id="cb4-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"한국"</span>})</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span></code></pre></div>
</div>
</section>
<section id="inmemorycache" class="level2">
<h2 class="anchored" data-anchor-id="inmemorycache">InMemoryCache</h2>
<p>인메모리 캐시를 사용하여 동일 질문에 대한 답변을 저장하고, 캐시에 저장된 답변을 반환합니다.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_llm_cache</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.cache <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InMemoryCache</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 인메모리 캐시를 사용합니다.</span></span>
<span id="cb5-6">set_llm_cache(InMemoryCache())</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 실행합니다.</span></span>
<span id="cb5-9">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"한국"</span>})</span>
<span id="cb5-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 실행합니다.</span></span>
<span id="cb6-3">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"한국"</span>})</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span></code></pre></div>
</div>
</section>
<section id="sqlite-cache" class="level2">
<h2 class="anchored" data-anchor-id="sqlite-cache">SQLite Cache</h2>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_community.cache <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SQLiteCache</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_llm_cache</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐시 디렉토리를 생성합니다.</span></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cache"</span>):</span>
<span id="cb7-7">    os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cache"</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SQLiteCache를 사용합니다.</span></span>
<span id="cb7-10">set_llm_cache(SQLiteCache(database_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cache/llm_cache.db"</span>))</span></code></pre></div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time </span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 실행합니다.</span></span>
<span id="cb8-3">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"한국"</span>})</span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/02-Cache.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
<item>
  <title>직렬화(Serialization)</title>
  <link>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/03-ModelSerialization.html</link>
  <description><![CDATA[ 




<section id="직렬화serialization" class="level2">
<h2 class="anchored" data-anchor-id="직렬화serialization">직렬화(Serialization)</h2>
<section id="직렬화serialization-란" class="level3">
<h3 class="anchored" data-anchor-id="직렬화serialization-란">직렬화(Serialization) 란?</h3>
<ol type="1">
<li><strong>정의:</strong>
<ul>
<li>모델을 저장 가능한 형식으로 변환하는 과정</li>
</ul></li>
<li><strong>목적:</strong>
<ul>
<li>모델 재사용 (재훈련 없이)</li>
<li>모델 배포 및 공유 용이</li>
<li>계산 리소스 절약</li>
</ul></li>
<li><strong>장점:</strong>
<ul>
<li>빠른 모델 로딩</li>
<li>버전 관리 가능</li>
<li>다양한 환경에서 사용 가능</li>
</ul></li>
</ol>
<p>모델 직렬화는 AI 개발 및 배포 과정에서 중요한 단계로, 효율적인 모델 관리와 재사용을 가능하게 합니다.</p>
<p><code>is_lc_serializable</code> 클래스 메서드로 실행하여 LangChain 클래스가 직렬화 가능한지 확인할 수 있습니다.</p>
<div id="cell-1" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY를 환경변수로 관리하기 위한 설정 파일</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API KEY 정보로드</span></span>
<span id="cb1-5">load_dotenv()</span></code></pre></div>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LangSmith 추적을 설정합니다. https://smith.langchain.com</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install langchain-teddynote</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_teddynote <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프로젝트 이름을 입력합니다.</span></span>
<span id="cb2-6">logging.langsmith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CH04-Models"</span>)</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChatOpenAI</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.prompts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PromptTemplate</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 프롬프트 템플릿을 사용하여 질문을 생성합니다.</span></span>
<span id="cb3-6">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptTemplate.from_template(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{fruit}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">의 색상이 무엇입니까?"</span>)</span></code></pre></div>
</div>
<p>클래스(class) 에 대하여 직렬화 가능 여부를 확인합니다.</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 직렬화가 가능한지 체크합니다.</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ChatOpenAI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ChatOpenAI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>is_lc_serializable()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>llm 객체에 대하여 직렬화 가능 여부를 확인합니다.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChatOpenAI(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-3.5-turbo"</span>, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 직렬화가 가능한지 체크합니다.</span></span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ChatOpenAI: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>llm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>is_lc_serializable()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 생성합니다.</span></span>
<span id="cb6-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> llm</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 직렬화가 가능한지 체크합니다.</span></span>
<span id="cb6-5">chain.is_lc_serializable()</span></code></pre></div>
</div>
</section>
</section>
<section id="체인chain-직렬화dumps-dumpd" class="level2">
<h2 class="anchored" data-anchor-id="체인chain-직렬화dumps-dumpd">체인(Chain) 직렬화(dumps, dumpd)</h2>
<section id="개요" class="level3">
<h3 class="anchored" data-anchor-id="개요">개요</h3>
<p>체인 직렬화는 직렬화 가능한 모든 객체를 딕셔너리 또는 JSON 문자열로 변환하는 과정을 의미합니다.</p>
</section>
<section id="직렬화-방법" class="level3">
<h3 class="anchored" data-anchor-id="직렬화-방법">직렬화 방법</h3>
<p>객체의 속성 및 데이터를 키-값 쌍으로 저장하여 딕셔너리 형태로 변환합니다.</p>
<p>이러한 직렬화 방식은 객체를 쉽게 저장하고 전송할 수 있게 하며, 다양한 환경에서 객체를 재구성할 수 있도록 합니다.</p>
<p><strong>참고</strong> - <code>dumps</code>: 객체를 JSON 문자열로 직렬화 - <code>dumpd</code>: 객체를 딕셔너리로 직렬화</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.load <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dumpd, dumps</span>
<span id="cb7-2"></span>
<span id="cb7-3">dumpd_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dumpd(chain)</span>
<span id="cb7-4">dumpd_chain</span></code></pre></div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 직렬화된 체인의 타입을 확인합니다.</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(dumpd_chain)</span></code></pre></div>
</div>
<p>이번에는 <code>dumps</code> 함수를 사용하여 직렬화된 체인을 확인해보겠습니다.</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dumps 함수를 사용하여 직렬화된 체인을 확인합니다.</span></span>
<span id="cb9-2">dumps_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dumps(chain)</span>
<span id="cb9-3">dumps_chain</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 직렬화된 체인의 타입을 확인합니다.</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(dumps_chain)</span></code></pre></div>
</div>
</section>
</section>
<section id="pickle-파일" class="level2">
<h2 class="anchored" data-anchor-id="pickle-파일">Pickle 파일</h2>
<section id="개요-1" class="level3">
<h3 class="anchored" data-anchor-id="개요-1">개요</h3>
<p>Pickle 파일은 Python 객체를 바이너리 형태로 직렬화하는 포맷입니다.</p>
</section>
<section id="특징" class="level3">
<h3 class="anchored" data-anchor-id="특징">특징</h3>
<ol type="1">
<li><strong>형식:</strong>
<ul>
<li>Python 객체를 바이너리 형태로 직렬화하는 포맷</li>
</ul></li>
<li><strong>특징:</strong>
<ul>
<li>Python 전용 (다른 언어와 호환 불가)</li>
<li>대부분의 Python 데이터 타입 지원 (리스트, 딕셔너리, 클래스 등)</li>
<li>객체의 상태와 구조를 그대로 보존</li>
</ul></li>
<li><strong>장점:</strong>
<ul>
<li>효율적인 저장 및 전송</li>
<li>복잡한 객체 구조 유지</li>
<li>빠른 직렬화/역직렬화 속도</li>
</ul></li>
<li><strong>단점:</strong>
<ul>
<li>보안 위험 (신뢰할 수 없는 데이터 역직렬화 시 주의 필요)</li>
<li>사람이 읽을 수 없는 바이너리 형식</li>
</ul></li>
</ol>
</section>
<section id="주요-용도" class="level3">
<h3 class="anchored" data-anchor-id="주요-용도">주요 용도</h3>
<ol type="1">
<li>객체 캐싱</li>
<li>머신러닝 모델 저장</li>
<li>프로그램 상태 저장 및 복원</li>
</ol>
</section>
<section id="사용법" class="level3">
<h3 class="anchored" data-anchor-id="사용법">사용법</h3>
<ul>
<li><code>pickle.dump()</code>: 객체를 파일에 저장</li>
<li><code>pickle.load()</code>: 파일에서 객체 로드</li>
</ul>
<p>pickle 파일로 저장합니다.</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fuit_chain.pkl 파일로 직렬화된 체인을 저장합니다.</span></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit_chain.pkl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-5">    pickle.dump(dumpd_chain, f)</span></code></pre></div>
</div>
<p>JSON 형식으로 마찬가지로 저장할 수 있습니다.</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit_chain.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fp:</span>
<span id="cb12-4">    json.dump(dumpd_chain, fp)</span></code></pre></div>
</div>
</section>
</section>
<section id="load-저장한-모델-불러오기" class="level2">
<h2 class="anchored" data-anchor-id="load-저장한-모델-불러오기">load: 저장한 모델 불러오기</h2>
<p>먼저, 이전에 저장한 <code>pickle</code> 형식의 파일을 로드합니다.</p>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pickle 파일을 로드합니다.</span></span>
<span id="cb13-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit_chain.pkl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb13-5">    loaded_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(f)</span></code></pre></div>
</div>
<p>로드한 json 파일을 <code>load</code> 메서드를 사용하여 로드합니다.</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.load <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 로드합니다.</span></span>
<span id="cb14-4">chain_from_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load(loaded_chain)</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 체인을 실행합니다.</span></span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(chain_from_file.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사과"</span>}))</span></code></pre></div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.load <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load, loads</span>
<span id="cb15-2"></span>
<span id="cb15-3">load_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load(</span>
<span id="cb15-4">    loaded_chain, secrets_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>: os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENAI_API_KEY"</span>]}</span>
<span id="cb15-5">)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 불러온 체인이 정상 동작하는지 확인합니다.</span></span>
<span id="cb15-8">load_chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사과"</span>})</span></code></pre></div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit_chain.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fp:</span>
<span id="cb16-2">    loaded_from_json_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(fp)</span>
<span id="cb16-3">    loads_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load(loaded_from_json_chain)</span></code></pre></div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 불러온 체인이 정상 동작하는지 확인합니다.</span></span>
<span id="cb17-2">loads_chain.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fruit"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"사과"</span>})</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>kk3225.netlify.app/docs/blog/posts/RAG/04-Model/03-ModelSerialization.html</guid>
  <pubDate>Mon, 29 Sep 2025 05:37:01 GMT</pubDate>
</item>
</channel>
</rss>
