<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kwangmin Kim</title>
<link>kmink3225.netlify.app/docs/blog/</link>
<atom:link href="kmink3225.netlify.app/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>blog</description>
<generator>quarto-1.4.543</generator>
<lastBuildDate>Tue, 31 Dec 2999 15:00:00 GMT</lastBuildDate>
<item>
  <title>Blog Content List</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/content_list.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Scalars are denoted with a lower-case letter (ex a ) or a non-bolded lower-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Calpha"> ).</li>
<li>Vectors are denoted using a bold-faced lower-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20a">).</li>
<li>Matrices are denoted using a bold-faced upper-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5Cphi">) or a bold-faced upper-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5CPhi">).</li>
<li>Tensors are denoted using a bold-faced upper-case letter with multiple subscripts or superscripts, indicating the number of indices and the dimensions of the tensor along each axis.
<ul>
<li>A second-order tensor (also known as a matrix) <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bij%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m"> and <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are the indices that run over the rows and columns of the matrix, respectively.</li>
<li>A third-order tensor <img src="https://latex.codecogs.com/png.latex?T"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m%20%5Ctimes%20p"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bijk%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m">, <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are <img src="https://latex.codecogs.com/png.latex?i">, and <img src="https://latex.codecogs.com/png.latex?k%20=%201,%5Cdots,p"> <img src="https://latex.codecogs.com/png.latex?j">, and <img src="https://latex.codecogs.com/png.latex?k">, which are the indices that run over the three dimensions of the tensor.</li>
</ul></li>
</ul>
</div>
</div>
<section id="contents" class="level1">
<h1>Contents</h1>
<ul>
<li><a href="../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering</a></li>
<li><a href="../../../docs/blog/posts/Surveilance/guide_map/index.html">Surveilance</a></li>
</ul>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<ul>
<li>Statistics
<ul>
<li>George Casella &amp; Rogeer L. Berger - Statistcal Inference, 2nd Edition</li>
<li>Dobson and Barnett (2008) An Introduction to Generalized Linear Model. 3rd Ed. Chapman &amp; Hall.</li>
<li>Fitzmaurice, Laird and Ware (2011) Applied Longitudinal Analysis. 2nd Ed. Wiley.</li>
<li>Hosmer, Lemeshow and May (2008) Applied Survival Analysis. 2nd Ed. Wiley.</li>
<li>슬기로운 통계생활 - https://www.youtube.com/<span class="citation" data-cites="statisticsplaybook">@statisticsplaybook</span></li>
<li>슬기로운 통계생활 - https://github.com/statisticsplaybook</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Mathematics
<ul>
<li>James Stewart - Calculus Early Transcedentals, 7th Eidition &amp; any James Stewart series</li>
<li>GILBERT STRANG - Introduction to Linear Algebra, 4th Edition.</li>
<li>임장환 - 머신러닝, 인공지능, 컴퓨터 비전 전공자를 위한 최적화 이론</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li><a href="https://www.youtube.com/playlist?list=PLaqQvlCBe8vIkIEb4GX2ZZ1A4tFYeXR5W">8일간의 선형대수학 기초(이상준 경희대 교수)</a></li>
<li><a href="https://ocw.mit.edu/courses/18-06-linear-algebra-spring-2010/">Linear Algebra(Prof.&nbsp;Gilbert Strang, MIT Open Courseware)</a></li>
<li><a href="https://github.com/fastai/numerical-linear-algebra/blob/master/README.md">Computational Linear Algebra for Coders</a></li>
<li><a href="http://immersivemath.com/ila/">Immersive linear Algebra</a></li>
<li><a href="https://www.3blue1brown.com/topics/linear-algebra">3blue1brown</a></li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Machine Learning
<ul>
<li>Gareth M. James, Daniela Witten, Trevor Hastie, Robert Tibshirani - An Introduction to Statistical Learning: With Applications in R 2nd Edition</li>
<li>Trevor Hastie, Robert Tibshirani, Jerome H. Friedman - The Elements of Statistical Learning 2nd Edition</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Deep Learning
<ul>
<li>Saito Koki - Deep Learning from Scratch 1,2,3 (밑바닥부터 시작하는 딥러닝 1,2,3)</li>
<li>조준우 - 머신러닝·딥러닝에 필요한 기초 수학 with 파이썬</li>
<li>조준우 - https://github.com/metamath1/noviceml</li>
<li>동빈나 - https://www.youtube.com/c/dongbinna</li>
<li>혁펜하임 - https://www.youtube.com/channel/UCcbPAIfCa4q0x7x8yFXmBag</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Engineering
<ul>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>All List</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/content_list.html</guid>
  <pubDate>Tue, 31 Dec 2999 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Engineering</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/</link>
  <description><![CDATA[ 




<section id="it-terminology" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="it-terminology"><span class="header-section-number">1</span> IT Terminology</h2>
<ul>
<li>0000-00-00, Terminology</li>
</ul>
</section>
<section id="data-structure" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">2</span> Data Structure</h2>
<ul>
<li>2023-01-17, <a href="../2023-01-17_data_structure_overview/">Overview</a></li>
<li>2023-01-18, <a href="../2023-01-18_array/">Array</a></li>
<li>2023-01-18, <a href="../2023-01-18_linked_list/">Linked List</a></li>
<li>2023-01-18, <a href="../2023-01-18_python_list/">Python List</a></li>
<li>2023-01-19, <a href="../2023-01-19_stack/">Stack</a></li>
<li>2023-01-19, <a href="../2023-01-19_queue/">Queue</a></li>
<li>2023-01-26, <a href="../2023-01-19_deque/">Deque</a></li>
<li>2023-01-26, <a href="../2023-01-20_binary_search_tree/">Binary Search Tree</a></li>
<li>2023-01-20, <a href="../2023-01-20_priority_queue/">Priority Queue</a></li>
<li>2023-01-20, <a href="../2023-01-20_graph/">Graph</a></li>
</ul>
</section>
<section id="development-environment-setting" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="development-environment-setting"><span class="header-section-number">3</span> Development Environment Setting</h2>
<section id="wsl2" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="wsl2"><span class="header-section-number">3.1</span> WSL2</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">Introduction &amp; Installation</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Command</a></li>
<li>2024-01-25, <a href="../../../../../docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html">Linux_Error_Fix_rm_cannot_remove_files_busy</a></li>
</ul>
</section>
<section id="docker" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="docker"><span class="header-section-number">3.2</span> Docker</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="vs-code" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="vs-code"><span class="header-section-number">3.3</span> VS code</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/VScode/01.vscode_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="conda" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="conda"><span class="header-section-number">3.4</span> Conda</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Conda/01.conda_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="git" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="git"><span class="header-section-number">3.5</span> Git</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
</section>
<section id="documentation" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="documentation"><span class="header-section-number">4</span> Documentation</h2>
<section id="dynamic-documentation" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="dynamic-documentation"><span class="header-section-number">4.1</span> Dynamic Documentation</h3>
<ul>
<li>2023-01-19, <a href="https://quarto.org/docs/get-started/">Quarto</a></li>
<li>2023-01-19, <a href="https://github.com/yihui/xaringan">xaringan[R]</a></li>
<li>2023-01-19, <a href="https://bookdown.org/yihui/bookdown/get-started.html">Bookdown[R]</a></li>
<li>2023-01-19, <a href="https://decile-team-distil.readthedocs.io/en/latest/index.html">DISTL</a></li>
<li>2023-01-26, <a href="https://www.sphinx-doc.org/en/master/">Sphinx[Python]</a></li>
</ul>
</section>
<section id="diagrams" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="diagrams"><span class="header-section-number">4.2</span> Diagrams</h3>
<ul>
<li>2023-05-01, <a href="https://quarto.org/docs/authoring/diagrams.html">Quarto &amp; Diagrams</a></li>
<li>2023-05-01, <a href="https://graphviz.org/gallery/">Graphiz Gallery</a></li>
<li>2023-05-01, <a href="https://mermaid.js.org/#/">Mermaid Gallery</a></li>
</ul>
</section>
</section>
<section id="aws-cloud" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="aws-cloud"><span class="header-section-number">5</span> AWS Cloud</h2>
<p>Coursera Course: AWS Fundamentals</p>
<ul>
<li>2023-03-09, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/computing_networking.html">Computing and Networking</a></li>
<li>2023-03-12, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/storage_database.html">Storage and Database</a></li>
<li>2023-03-26, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/monitoring_sharedresponsibility.html">Monitoring and SharedResponsibility</a></li>
<li>2023-04-05, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/infra_security.html">Infrastructure Security</a></li>
</ul>
</section>
<section id="azure-cloud" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="azure-cloud"><span class="header-section-number">6</span> Azure Cloud</h2>
</section>
<section id="gcp" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="gcp"><span class="header-section-number">7</span> GCP</h2>
</section>
<section id="python" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="python"><span class="header-section-number">8</span> python</h2>
<ul>
<li>2023-06-01, <a href="../../../../../docs/blog/posts/Engineering/Python/package_management.html">Package Management: requirements.txt</a></li>
</ul>
</section>
<section id="web" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="web"><span class="header-section-number">9</span> Web</h2>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/web/http_method.html">HTTP Methods</a></li>
</ul>
</section>
<section id="apache-airflow" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="apache-airflow"><span class="header-section-number">10</span> Apache Airflow</h2>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/01.intro.html">Introduction</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/02.env_setting.html">Airflow Environment Setting</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/03.operator_basic.html">Operator Basics</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/04.python_operator.html">Python Operators</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/05.template_variable.html">Template Variable</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/06.data_share.html">Data Share</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/07.task_handling.html">Task Handling - Advanced</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/08.more_operators.html">More Operators</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/09.connection_hook.html">Connection &amp; Hook</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/10.sensor.html">Sensor</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">More Airflow Functions</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">Operate WebApp Using Rshiny</a></li>
</ul>
</section>
<section id="apache-spark" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="apache-spark"><span class="header-section-number">11</span> Apache Spark</h2>
</section>
<section id="data-modeling" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="data-modeling"><span class="header-section-number">12</span> Data Modeling</h2>
</section>
<section id="front-end" class="level2" data-number="13">
<h2 data-number="13" class="anchored" data-anchor-id="front-end"><span class="header-section-number">13</span> Front End</h2>
</section>
<section id="back-end" class="level2" data-number="14">
<h2 data-number="14" class="anchored" data-anchor-id="back-end"><span class="header-section-number">14</span> Back End</h2>
</section>
<section id="public-data" class="level2" data-number="15">
<h2 data-number="15" class="anchored" data-anchor-id="public-data"><span class="header-section-number">15</span> Public data</h2>
<ul>
<li>2024-01-01, <a href="../../../../../docs/blog/posts/Engineering/public_data/index.html">Public Data Centers</a></li>
</ul>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Validation</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/</link>
  <description><![CDATA[ 



<section id="sgs" class="level2" data-number="1">

<ul>
<li>0000-00-00, EN62304</li>
</ul>
</section>
<section id="fda" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="fda"><span class="header-section-number">2</span> FDA</h2>
<ul>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2022-12-10_FDA_sw_general_guidance/index.html">General Principles of SW Validation</a></li>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2023-01-27_FDA_sw_general_guidance_presentation/index.html">General Principles of SW Validation - Diagram Summary</a></li>
<li>1111-11-11, Guidance for the Content of Premarket Submissions for Software Contained in Medical Devices</li>
</ul>
</section>
<section id="dhf" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="dhf"><span class="header-section-number">3</span> DHF</h2>
</section>
<section id="public-health" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="public-health"><span class="header-section-number">4</span> Public Health</h2>
</section>
<section id="wet-lab" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="wet-lab"><span class="header-section-number">5</span> Wet Lab</h2>
<ul>
<li>0000-00-00, PCR (Polymerase Chain Reaction) Experiment</li>
</ul>


</section>

 ]]></description>
  <category>Surveilance</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/</guid>
  <pubDate>Sat, 31 Dec 2089 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Linux_Error_Fix_rm_cannot_remove_files_busy</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="error" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Error</h1>
<p><code>rm: cannot remove 'files': Device or resource busy</code></p>
</section>
<section id="how-to-solve" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> How to Solve</h1>
<ul>
<li>파일이나 디렉토리를 사용 중인 프로세스 식별: <code>lsof</code> 명령어를 사용하여 어떤 프로세스가 파일이나 디렉토리를 사용하고 있는지 찾을 수 있다. 명령어는 <code>lsof | grep 'files'</code> 실행. 이렇게 하면 삭제하려는 항목을 사용하고 있는 프로세스가 나열된다.</li>
<li>프로세스 종료: 파일이나 디렉토리를 사용하는 프로세스를 찾았다면, 적절한 방법(예: 파일을 사용하는 프로그램 종료)으로 그 프로세스를 정상적으로 종료할 수 있다. 만약 그것이 불가능하거나 프로세스가 응답하지 않는 경우, 프로세스 ID 뒤에 <code>kill</code> 명령어를 사용하여 강제로 종료할 수 있다. 이 방법을 사용할 때는 데이터 손실이나 시스템 불안정을 초래할 수 있으므로 주의해야 함.</li>
<li>파일 시스템 마운트 해제: 디렉토리가 마운트된 파일 시스템의 일부라면, 삭제하기 전에 마운트를 해제해야 할 수 있다. 마운트 지점이나 장치 이름 뒤에 <code>umount</code> 명령어를 사용. 마운트 해제하기 전에 어떤 프로세스도 파일 시스템을 사용하고 있지 않은지 확인.</li>
</ul>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/Linux/rm_cannot_remove_files.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Visitor Tracking</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/web/visitor_trancking.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="visitor-tracking-방문자-추적" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Visitor Tracking (방문자 추적)</h1>
<section id="google-analytics-활용" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="google-analytics-활용"><span class="header-section-number">1.1</span> Google Analytics 활용</h2>
<p>Quarto를 사용하여 만든 기술 블로그 웹사이트의 방문자 수를 추적하려면, 일반적으로 웹 분석 도구를 사용해야한다. 가장 널리 사용되는 도구 중 하나는 Google Analytics인데. Google Analytics를 사용하면 사이트 방문자 수, 페이지 뷰, 사용자 행동 등 다양한 통계를 확인할 수 있다.</p>
</section>
<section id="integrating-google-analytics-into-a-quarto-website" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="integrating-google-analytics-into-a-quarto-website"><span class="header-section-number">1.2</span> Integrating Google Analytics into a Quarto Website</h2>
<ul>
<li>Google Analytics 계정 생성 및 설정
<ul>
<li>Google Analytics 계정 생성 <a href="https://marketingplatform.google.com/about/analytics/">링크</a></li>
<li>새로운 프로퍼티(Property)를 생성 <a href="https://support.google.com/sites/answer/97459">링크</a><br>
</li>
<li>웹사이트에 대한 정보를 입력하고 추적 ID를 수령</li>
</ul></li>
<li>추적 코드를 웹사이트에 추가
<ul>
<li>Google Analytics에서 제공하는 추적 코드를 복사</li>
<li>Quarto 웹사이트의 HTML 템플릿에 이 추적 코드를 추가</li>
<li>이 코드는 보통

태그 안에 넣음</li>
</ul></li>
<li>Quarto 프로젝트에 코드 추가
<ul>
<li>Quarto 프로젝트의 _quarto.yml 파일이나 해당 HTML 템플릿 파일에 Google Analytics 스크립트를 추가</li>
</ul></li>
<li>웹사이트 업데이트 및 배포
<ul>
<li>rendering을 하여 변경사항을 웹사이트에 적용하고 재배포</li>
</ul></li>
<li>Google Analytics에서 데이터 확인
<ul>
<li>Google Analytics Dashboard에서 웹사이트의 트래픽과 관련 데이터를 확인</li>
</ul></li>
</ul>
<p><a href="https://quarto.org/docs/websites/website-tools.html#google-analytics">참고: quarto official website &gt;&gt; guide &gt;&gt; websites &gt;&gt; webiste tools</a></p>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/web/visitor_trancking.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Website Monetization</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/web/website_monetization.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="website-monetization-수익화" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Website Monetization (수익화)</h1>
<section id="google-adsense-활용" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="google-adsense-활용"><span class="header-section-number">1.1</span> Google AdSense 활용</h2>
<ul>
<li>Google AdSense 계정 생성 및 승인 받기
<ul>
<li>Google AdSense 웹사이트에 방문하여 계정을 만듭니다.</li>
<li>계정이 승인되기를 기다린다 (이 과정은 몇 일이 걸릴 수 있음)</li>
</ul></li>
<li>AdSense 코드 생성
<ul>
<li>Google AdSense 계정이 승인되면, 광고를 생성하고 광고 코드를 받는다.</li>
<li>‘광고’ 섹션에서 새 광고 단위를 생성하고, 광고 스타일과 크기를 설정</li>
<li>생성된 광고 코드를 복사</li>
</ul></li>
<li>Quarto 웹사이트에 코드 추가
<ul>
<li>Quarto 프로젝트의 해당 HTML 파일을 연다.</li>
<li>보통은 _output.yml 파일이나, 특정 레이아웃 파일일 수 있다.</li>
<li>HTML의

태그 안에 AdSense 코드를 붙여넣는다. 이는 전역적으로 광고를 관리하기 위함이다.</li>
<li>또는, 특정 페이지나 섹션에 광고를 표시하고 싶다면 해당 위치에 광고 코드를 삽입</li>
</ul></li>
<li>웹사이트 업데이트 및 배포
<ul>
<li>변경 사항을 저장하고 웹사이트를 다시 배포</li>
<li>일정 시간이 지나면, 웹사이트에 광고가 표시되기 시작</li>
</ul></li>
<li>성능 모니터링
<ul>
<li>Google AdSense 계정에서 광고 성능을 주기적으로 확인</li>
<li>광고 위치나 스타일을 조정하여 최적화할 수 있다.</li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/web/website_monetization.html</guid>
  <pubDate>Wed, 24 Jan 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Public Data</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/public_data/</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="public-data" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Public data</h1>
<section id="topic" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="topic"><span class="header-section-number">1.1</span> Topic</h2>
<ul>
<li>Government and Health Data: datasets related to sociology, economic development, education, health care, and more. datasets from the Indian Government, European Union, UK Government, US Government, and US Bureau of Labor Statistics are typically well-maintained and comprehensive.</li>
<li>Socioeconomic Data by World Bodies: Organizations like the United Nations, UNICEF, World Health Organization, World Bank, IMF, and the Asian Development Bank provide extensive datasets.</li>
<li>Financial Data: Datasets from the National Stock Exchange of India, Reserve Bank of India, NASDAQ, and the New York Stock Exchange offer historical trading data (time-series analysis, stock market trends, and algorithmic trading models).</li>
<li>Computer Vision Datasets: datasets like ImageNet, COCO, Google’s Open Image Dataset, and LSUN.</li>
<li>Natural Language Processing (NLP) Datasets: datasets for voice and speech recognition, language translation, and other linguistics-related tasks</li>
</ul>
</section>
<section id="api" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="api"><span class="header-section-number">1.2</span> API</h2>
<ul>
<li>Google Cloud Datasets: datasets hosted on Google Cloud</li>
<li>Microsoft Azure Open Datasets: their curated datasets working within the Azure ecosystem for your machine learning projects.</li>
<li>Kaggle: data for its machine learning competitions</li>
<li>US Government’s Data (data.gov): the US government data.</li>
<li>World Bank Data: economic and development datasets.</li>
<li>Quandl: financial and economic dataset (time-series data)</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/public_data/</guid>
  <pubDate>Sun, 31 Dec 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Package Management - 1</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/package_management.html</link>
  <description><![CDATA[ 



<section id="requirements.txt-를-이용한-packages-관리" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="requirements.txt-를-이용한-packages-관리"><span class="header-section-number">1</span> requirements.txt 를 이용한 packages 관리</h2>
<p>여러 projects를 오랫동안 관리하다 보면 다수의 packages를 설치해야하는데 이 와중에 PC 포맷, fork, cloning과 같은 code를 옮겨야하는 일이 생길 수 있다. 이렇게 새로운 환경에서 이전에 관리하던 projects를 재현해야하는데 수 많은 packages를 하나 하나씩 재설치해야하는 것은 여간 번거로운 작업이 아니다.</p>
<ul>
<li><code>pip list</code>를 이용한 pip로 설치된 패키지 조회
<ul>
<li>아래와 같이 package list들이 출력이 된다 (일부 스크린샷함). 이 많은 packages를 하나 하나씩 <code>conda install package_name</code> 실행하여 설치할 순 없다. <img src="kmink3225.netlify.app/images/python/requirements1.PNG" class="img-fluid" alt="pip list 명령어 결과물"></li>
</ul></li>
<li><code>pip freeze &gt; requirements.txt</code> 명령어를 실행하여 requirements.txt 를 만들어 준다. 이 txt 파일 안에는 packages의 이름과 version 정보까지 기록되어 있는 것을 확인할 수 있다.</li>
<li><code>pip install -r requirements.txt</code> 명령어를 실행하여 requirements.txt 에 있는 packages를 한꺼번에 설치할 수 있게 된다.</li>
</ul>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/Python/package_management.html</guid>
  <pubDate>Wed, 31 May 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Airflow Introduction</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<ul>
<li>파이썬을 이용해 워크플로우를 만들고 관리할 수 있는 오픈소스 기반 워크플로우 관리 도구</li>
<li>2014년 에어비앤비에서 만든 워크플로우 관리 솔루션으로 현재는 Apache Open Source 재단에서 관리되고 있는 프로젝트</li>
<li>Airflow는 워크플로우를 DAG을 사용하여 정의하고, 관리하는 프로그램
<ul>
<li>자유도가 크고, 확장성이 좋은 워크플로우 관리 프로그램</li>
</ul></li>
</ul>
<section id="characteristics" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="characteristics"><span class="header-section-number">1.1</span> Characteristics</h2>
<div class="cell">
<div class="cell-output-display">
<div id="fig-workflow" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div>
<svg width="672" height="480" viewbox="0.00 0.00 343.92 169.48" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 165.48)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-165.48 339.92,-165.48 339.92,4 -4,4"></polygon> <!-- REST API를 사용한 데이터를 받아 전처리 --> <g id="node1" class="node">
<title>
REST API를 사용한 데이터를 받아 전처리
</title>
<ellipse fill="none" stroke="black" cx="156.43" cy="-143.48" rx="156.37" ry="18"></ellipse> <text text-anchor="middle" x="156.43" y="-139.28" font-family="Times,serif" font-size="14.00">REST API를 사용한 데이터를 받아 전처리</text> </g> <!-- 기존 DB의 데이터 삭제 (중복 제거) --> <g id="node2" class="node">
<title>
기존 DB의 데이터 삭제 (중복 제거)
</title>
<ellipse fill="none" stroke="black" cx="200.45" cy="-86.15" rx="129.73" ry="18"></ellipse> <text text-anchor="middle" x="200.45" y="-81.95" font-family="Times,serif" font-size="14.00">기존 DB의 데이터 삭제 (중복 제거)</text> </g> <!-- REST API를 사용한 데이터를 받아 전처리&#45;&#45;기존 DB의 데이터 삭제 (중복 제거) --> <g id="edge1" class="edge">
<title>
REST API를 사용한 데이터를 받아 전처리–기존 DB의 데이터 삭제 (중복 제거)
</title>
<path fill="none" stroke="black" d="M170.36,-125.34C175.5,-118.65 181.32,-111.07 186.46,-104.37"></path> </g> <!-- 전처리한 데이터를 DB에 삽입 --> <g id="node3" class="node">
<title>
전처리한 데이터를 DB에 삽입
</title>
<ellipse fill="none" stroke="black" cx="224.56" cy="-18" rx="111.23" ry="18"></ellipse> <text text-anchor="middle" x="224.56" y="-13.8" font-family="Times,serif" font-size="14.00">전처리한 데이터를 DB에 삽입</text> </g> <!-- 기존 DB의 데이터 삭제 (중복 제거)&#45;&#45;전처리한 데이터를 DB에 삽입 --> <g id="edge2" class="edge">
<title>
기존 DB의 데이터 삭제 (중복 제거)–전처리한 데이터를 DB에 삽입
</title>
<path fill="none" stroke="black" d="M206.91,-67.89C210.37,-58.11 214.62,-46.1 218.08,-36.31"></path> </g> </g>
</svg>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: Airflow Workflow Simple Example</figcaption>
</figure>
</div>
</div>
</div>
<ul>
<li>파이썬으로 제작된 도구이며 이용자가 워크플로우 생성시에도 파이썬으로 구현해야 함</li>
<li>하나의 워크플로우는 DAG(Directed Acyclic Graph) 이라 부르며 DAG 안에는 1개 이상의 Task가 존재
<ul>
<li>예를 들어, REST API로부터 데이터를 내려 받아 DB에 insert하려는 과제를 수행하기 위해 Figure&nbsp;1 와 같은 단계들이 필요하다.</li>
<li>각 각의 단계를 task라 하고 각 각 선/후행 단계가 있다. (1번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 2번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 3번 task)</li>
<li>이 tasks의 집합을 DAG이라고 한다.</li>
<li>Task간 선후행 연결이 가능하되 순환되지 않고 방향성을 가짐(=DAG)</li>
</ul></li>
<li>Cron 기반의 스케줄링
<ul>
<li>Linux에서 사용되는 스케쥴링으로 task들이 시작되어야 하는 시작 시간이나 주기를 설정</li>
</ul></li>
<li>모니터링 및 실패 작업에 대한 재실행 기능이 간편</li>
</ul>
<div id="fig-DAG_example" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_dag-example.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: DAG Simple Example</figcaption>
</figure>
</div>
<ul>
<li>In Figure&nbsp;2, 초록색 테두리의 node는 성공한 task를 의미하고 분홍색 테두리의 node는 실패한 task를 의미한다. 위의 그림에는 없지만 회색 테두리는 queue (준비) 상태를 의미한다. Airflow에는 DAG이 일련의 task로 구성되어 있기 때문에 실행 상태도 성공, 실패 및 준비 상태같은 여러 종류가 있다. 나머지 상태는 뒷 부분에서 차차 다뤄보기로 한다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/task-status.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Task Status</figcaption>
</figure>
</div>
</section>
<section id="motivation" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="motivation"><span class="header-section-number">1.2</span> Motivation</h2>
<section id="why-to-learn-airflow" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="why-to-learn-airflow"><span class="header-section-number">1.2.1</span> Why to Learn Airflow?</h3>
<div id="fig-comparison" class="quarto-layout-panel">
<figure class="figure">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 100.0%;justify-content: center;">
<div id="fig-workflowDemand" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_airflow-demand.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison"></p>
<figcaption class="figure-caption">(a) Orchestrating Task Tools (a.k.a Data Workflows) Demand Comparison</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 100.0%;justify-content: center;">
<div id="fig-workflowComputation" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_airflow-comparison.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison"></p>
<figcaption class="figure-caption">(b) Orchestrating Task Tools Computation Comparison</figcaption>
</figure>
</div>
</div>
</div>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: <a href="https://towardsdatascience.com/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow-b3785dd1ed0c">Airflow Figure Reference: Airflow vs.&nbsp;Luigi vs.&nbsp;Argo vs.&nbsp;MLFlow vs.&nbsp;KubeFlow by Markus Schmitt</a></figcaption><p></p>
</figure>
</div>
<ul>
<li>Maturity: 성숙도로서 github에서 얼마나 많은 사람들이 관리하고 있는지 즉 community의 활성도를 나타내는 지표. 유료 서비스의 경우 user 가 제작사에게 패치를 요청할 수 있지만 open source에 경우 제작사가 없어 community의 활성도가 중요하다.</li>
<li>Popularity: github starts의 개수</li>
<li>Simplicity: workflow를 얼마나 쉽게 사용할 수 있는지에 대한 난이도로 airflow는 사용하기에 어려운 난이도를 보여준다.</li>
<li>Breadth: 확장성. 즉 얼마나 customizing할 수 있는지 보여주는 척도</li>
</ul>
<p>Figure&nbsp;3 을 보면, Figure&nbsp;3 (a) 에서 볼수 있듯이 최근 들어 airflow의 인기가 급증하는 것을 볼 수 있다. Figure&nbsp;3 (b) 에서 그 이유를 짐작할 수 있는데 airflow가 simplicity가 C 사용하기는 어렵지만 구현할 수 있는 폭 breadth가 높다 (Breadth: A). 즉, 다른 workflows에 비해 복잡한 코딩을 요구하는 만큼 그 자유도가 높다는 것을 짐작할 수 있다.</p>
</section>
</section>
<section id="strength" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="strength"><span class="header-section-number">1.3</span> Strength</h2>
<ul>
<li>파이썬에 익숙하다면 러닝 커브 빠르게 극복 가능</li>
<li>대규모 워크플로우 환경에서 부하 증가시 수평적 확장 가능한 Kubenetes 등 아키텍처 지원</li>
<li>파이썬에서 지원되는 라이브러리 활용하여 다양한 도구 컨트롤 가능 (GCP, AWS등 대다수 클라우드에서 제공하는 서비스)
<ul>
<li>GCP: Google Cloud Platform</li>
<li>AWS: Amazon Web Services</li>
</ul></li>
<li>Airflow에서 제공하는 파이썬 소스 기반으로 원하는 작업을 위한 커스터마이징이 가능 (오퍼레이터, Hook, 센서 등)</li>
</ul>
</section>
<section id="weakness" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="weakness"><span class="header-section-number">1.4</span> Weakness</h2>
<ul>
<li>실시간 워크플로우 관리에 적합치 않음 (최소 분 단위 실행)</li>
<li>워크플로우(DAG) 개수가 많아질 경우 모니터링이 쉽지 않음</li>
<li>워크플로우를 GUI환경에서 만들지 않기에 파이썬에 익숙하지 않다면 다루기 쉽지 않음 협업 환경에서 프로그래밍 표준이 없으면 유지관리가 쉽지 않음</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Environment Setting for Airflow</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="wsl-installation" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> WSL Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">WSL Installation</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Commands</a></li>
</ul>
</section>
<section id="docker-installation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Docker Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Docker Installation</a></li>
<li>docker를 사용하기 전에 <code>sudo service docker start</code> 실행해야 함</li>
<li>docker 설치 확인
<ul>
<li><code>sudo docker run hello-world</code> 하면 다음과 같은 메세지 떠야함<br>
<img src="kmink3225.netlify.app/images/airflow/check_docker_installation.PNG" class="img-fluid" alt="docker 설치 확인"></li>
<li>먼저 docker는 local에서 실행하고자 하는 image를 찾고, 없으면 가장 최신 version의 image를 download 받는다.</li>
<li>하지만, 위의 그림에 있는 메세지와 같이 이미 실행하고자 하는 image가 있어 다운로드 받을 필요가 없으면 image를 찾고 다운로드 받았다는 메세지는 생략되게 된다.</li>
</ul></li>
</ul>
</section>
<section id="airflow-installation" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Airflow Installation</h1>
<ul>
<li>Airflow 설치 방법은 여러가지가 존재하며 그 중 하나가 도커 설치임</li>
<li>도커 컴포즈 (docker compose)를 이용하여 한번에 쉽게 설치 가능
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html">Docker Compose를 이용하여 Airflow 설치 링크</a></li>
<li>docker compose: 여러 개의 도커 컨테이너 설정을 한방에 관리하기 위한 도커 확장 기술로 에어플로우를 설치하기 위한 도커 컨테이너 세팅 내용이 들어있음
<ul>
<li>airflow 자체도 여러개의 docker containers로 구성됨</li>
</ul></li>
<li>Docker Compose를 이용하여 Airflow 설치 링크의 <em>Fetching docker-compose.yaml</em> 부터 시작
<ul>
<li><code>curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.6.1/docker-compose.yaml'</code></li>
<li><code>ls</code>로 <code>docker-compose.yaml</code> 다운로드됐는지 확인</li>
<li><code>vi *</code> 로 <code>docker-compose.yaml</code> 열어보면 주석처리와 airflow의 설정내용들을 확인할 수 있다.</li>
</ul></li>
<li>Setting the right Airflow user
<ul>
<li>directories 만들기: <code>mkdir -p ./dags ./logs ./plugins ./config</code></li>
<li>.env 파일 만들기: <code>echo -e "AIRFLOW_UID=$(id -u)" &gt; .env</code></li>
<li><code>vi .env</code>: <code>AIRFLOW_UID=1000</code> 인 이유는 OS 계정의 uid가 1000이라는 뜻</li>
</ul></li>
<li>Initialize the database
<ul>
<li><code>sudo docker compose up airflow-init</code>: <code>sudo</code> 반드시 앞에 붙여야함. <code>exited with code 0</code>가 떠야 정상적으로 설치 된 것임</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="running-airflow" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Running Airflow</h1>
<ul>
<li>service 띄우기
<ul>
<li><code>sudo docker compose up</code> 실행. <code>sudo</code> 반드시 앞에 붙여야함.</li>
</ul></li>
<li>http 상태가 계속해서 업데이트 되야 airflow가 돌아가고 있는 것임. 계속해서 update되는 http command 닫으면 airflow멈춤. 두번째 터미널 열어서 작업해야함</li>
<li>두 번째 터미널 열고 <code>sudo docker ps</code> 실행하여 container list 상태 확인. 총 6개 올라와야 정상
<ul>
<li>airflow-airflow-worker-1 : scheduler로 부터 부여된 tasks 수행</li>
<li>airflow-airflow-triggerer-1</li>
<li>airflow-airflow-webserver-1</li>
<li>airflow-airflow-scheduler-1 : tasks와 dags을 monitoring</li>
<li>airflow-postgres-1</li>
<li>airflow-redis-1 : for queue service, scheduler에서 worker로 message 전달</li>
</ul></li>
<li>웹 브라우저 창에 <code>localhost:8080</code> 입력하여 airflow service창에 접속
<ul>
<li>default ID/PW: airflow/airflow</li>
<li>웹 브라우저에서 local로 airflow service 접속 원리
<ul>
<li>웹 브라우저는 local PC에 있음</li>
<li>airflow는 WSL안에 docker container로 실행되고 있음</li>
<li>이렇게 2개의 다른 공간이 연결될 수 있는 이유는 WSL은 기본적으로 local PC의 local host IP와 연결이 되어 있음</li>
<li>그래서 웹 브라우저에서 local로 <code>localhost:8080</code> 라고 입력하면 WSL에서 8080 port를 입력하는 것과 같은 효과가 있기 때문에 local 웹브라우저에서 WSL container로 들어갈 수 있는 것임.</li>
<li>sample DAGs이 만들어져 있는 것을 확인 할 수 있음</li>
</ul></li>
<li>Airflow Webserver (or Web Browser) Port 변경
<ul>
<li>Airflow의 default port 는 <code>8080</code>으로 설정되어 있는데 만약 port를 변경하고 싶으면 <code>docker-compose.yaml</code>을 수정해야한다. 다음은 <code>docker-compose.yaml</code>의 airflow webserver 부분을 복붙한 것이다. &lt;변경전 with comments&gt;</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">  airflow-webserver:</span>
<span id="cb1-2">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">*airflow-common</span></span>
<span id="cb1-3"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    command:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">webserver</span></span>
<span id="cb1-4"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    ports:</span></span>
<span id="cb1-5">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">-</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"8080(local</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">port</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">변경하고자</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">하는</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">부분):8080</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(airflow의</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">healthcheck.test의</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">port)"</span></span>
<span id="cb1-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    healthcheck:</span></span>
<span id="cb1-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      test:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">["CMD",</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"curl",</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"--fail",</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"http://localhost:8080/health"]</span></span>
<span id="cb1-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      interval:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">10s</span></span>
<span id="cb1-9"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      timeout:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">10s</span></span>
<span id="cb1-10"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      retries:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-11"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      start_period:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">30s</span></span>
<span id="cb1-12"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    restart:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">always</span></span>
<span id="cb1-13"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    depends_on:</span></span>
<span id="cb1-14">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;&lt;:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">*airflow-common-depends-on</span></span>
<span id="cb1-15"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      airflow-init:</span></span>
<span id="cb1-16"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        condition:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">service_completed_successfully</span></span>
<span id="cb1-17"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">    networks:</span></span>
<span id="cb1-18"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">      network_custom:</span></span>
<span id="cb1-19"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">        ipv4_address:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">172.28.0.6</span></span></code></pre></div>
&lt;변경후&gt; <code>markdown     airflow-webserver:       &lt;&lt;: *airflow-common       command: webserver       ports:         - "8787:8080"       healthcheck:         test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]         interval: 10s         timeout: 10s         retries: 5         start_period: 30s       restart: always       depends_on:         &lt;&lt;: *airflow-common-depends-on         airflow-init:           condition: service_completed_successfully       networks:         network_custom:           ipv4_address: 172.28.0.6</code> 위 처럼 변경하면 되지만 나는 그냥 기본 port인 <code>8080</code>을 사용한다.</li>
</ul></li>
<li>example_bash_operator DAG을 들어가 보면
<ul>
<li>Grid: 수행 이력을 보여주는 tab
<ul>
<li>DAG 이름 example_bash_operator 옆에 pause toggle를 활성화 시키면 unpaused 됨</li>
<li>Auto-regresh toggle 활성화 시키면 DAG이 한번 돌아감</li>
</ul></li>
<li>Graph: DAG을 구성하고 있는 tasks를 보여주는 tab. 각 각의 task가 색 별로 상태를 보여주고 있음</li>
<li>Calendar: 참고할 것</li>
<li>Task Duration: 참고할 것</li>
<li>Task Tries: 참고할 것</li>
<li>Landing Times: 참고할 것</li>
<li>Gantt: 참고할 것</li>
<li>Details: 참고할 것</li>
<li>Code: DAG을 구성하고 있는 python code를 볼 수 있음</li>
<li>Audit Log: 참고할 것</li>
</ul></li>
</ul>
</section>
<section id="airflow-development-environment-setting" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Airflow Development Environment Setting</h1>
<section id="개발-환경-권장-사양" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="개발-환경-권장-사양"><span class="header-section-number">5.1</span> 개발 환경 권장 사양</h2>
<ul>
<li>CPU: 4Core 이상</li>
<li>Memory: 16GB (권장-문제없음) / 8GB (최소-약간 버벅 거림)</li>
<li>WSL에서 다수의 컨테이너 실행시 메모리 점유율 상승할 수 있음
<ul>
<li>airflow service창과 WSL 창 닫고 다시 키면 어느 정도 메로리 점유율 낮아짐</li>
</ul></li>
</ul>
</section>
<section id="개발-환경-workflow" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="개발-환경-workflow"><span class="header-section-number">5.2</span> 개발 환경 workflow</h2>
<ul>
<li>user가 만든 DAG이 airflow까지 전달되는 workflow가 아래와 같이 묘사되어 있다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/development-workflow.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">개발 환경 workflow</figcaption>
</figure>
</div>
<ul>
<li>위의 그림에서 보면 6 containers가 있고 airflow setting 할때 <code>dags</code>, <code>logs</code>, <code>plugins</code>, <code>config</code> directories를 만들었는데 모두 airflow containers에 연결되어 있음
<ul>
<li>mount 의미: directory안에 file을 넣으면 containers가 file을 인식할 수 있음</li>
<li><strong>user가 만든 dag을 dags directory에 넣으면 airflow container가 dags안에 있는 dag을 인식하여 서비스에 띄어줌</strong></li>
</ul></li>
<li>개발환경 세팅의 목표
<ul>
<li>로컬 환경에서 만든 dag을 dags directory에 배포하여 containers가 user가 만든 dag을 인식하여 airflow서비스까지 띄우는 것이 목표</li>
<li><strong>다시 말해서, 그냥 로컬 환경에서 만든 dag을 dags directory에 배포하면 됨</strong></li>
</ul></li>
<li>Actions
<ol type="1">
<li>로컬 컴퓨터에 python interpreter 설치
<ul>
<li><strong>아무 python version을 설치하면 안되고 airflow containers가 쓰고있는 python version과 일치시켜야 함!</strong></li>
</ul></li>
<li>IDE Tool(VScode) 개발환경 설정</li>
<li>Github 레파지토리 생성</li>
<li>로컬 컴퓨터에 Python Airflow Libraries 설치</li>
<li>WSL에 Git 설치 및 git pull이 가능한 환경구성
<ul>
<li>git repository에 DAG을 만들어 push하여 dags directory에 pull이 되어 dag이 들어가게 하면 됨.</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="python-interpreter-installation" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="python-interpreter-installation"><span class="header-section-number">5.3</span> Python Interpreter Installation</h2>
<ul>
<li>Actions
<ol type="1">
<li>컨테이너에서 사용하는 파이썬 버전 확인
<ul>
<li>container안에 들어가기: <code>sudo docker exec -it {container-name or container-id} 명령어</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> <code>sudo docker exec -it airflow-airflow-worker-1 bash</code>: <code>-it</code>는 session이 안 끊어지도록 유지해주는 옵션</li>
<li><code>python -V</code> 실행하여 python version 확인 : 현재 나의 python version은 <code>Python 3.7.16</code></li>
<li><code>ctrl D</code>로 exit</li>
</ul></li>
<li><a href="https://www.python.org/downloads/">파이썬 인터프리터 다운로드</a>
<ul>
<li>보안상의 업데이트 말곤 기능이 같기 때문에 <code>Python 3.7.16</code>대신 <code>Python 3.7.9</code> 설치하면 됨</li>
</ul></li>
<li>로컬 컴퓨터에 파이썬 설치
<ul>
<li>conda에 설치하고 싶으면 <code>conda create -n airflow python=3.7.9</code> or</li>
<li>global 환경에 설치하고 싶으면 <a href="https://www.python.org/downloads/release/python-379/">Windows x86-64 executable installer</a> 다운로드 및 설치</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="vscode-installation" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="vscode-installation"><span class="header-section-number">5.4</span> VScode Installation</h2>
<ul>
<li>VScode란?
<ul>
<li>Microsoft사에서 2015년에 제작, 다양한 언어 개발을 돕는 IDE tool</li>
<li>Visual Studio 라는 IDE 툴과는 엄연히 다른 툴</li>
</ul></li>
<li>Actions
<ol type="1">
<li><a href="https://code.visualstudio.com/download">VScode 다운로드</a>
<ul>
<li>설치 마법사에서 추가 작업 선택란에 code로 열기 작업을 windows탐색기 파일의 상황에 맞는 메뉴에 추가 선택할 것. programming file을 열때 VScode가 디폴트가 되도록함</li>
</ul></li>
<li>VScode 설치, 파이썬 확장팩 설치</li>
<li>프로젝트 생성, 파이썬 가상환경 설정
<ul>
<li>VScode가 file이나 directory단위로 관리하는 IDE tool이라 프로젝트 생성 개념이 없음</li>
<li>windows에 프로젝트 directory하나 만들고 VScode에서 open folder로 열면 그 folder를 최상위 folder로 인식 (project 생성됨)</li>
</ul></li>
<li>python interpreter 설정
<ul>
<li>VScode &gt; Terminal &gt; New Terminal &gt; python version 확인</li>
</ul></li>
</ol></li>
<li>파이썬 가상환경
<ul>
<li>라이브러리 버전 충돌 방지를 위해 설치/사용되는 파이썬 인터프리터 환경을 격리시키는 기술</li>
<li>파이썬은 라이브러리 설치 시점에 따라서도 설치되는 버전이 상이한 경우가 많음</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/virtual-environment.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">가상 환경의 필요성</figcaption>
</figure>
</div>
<ul>
<li>python을 global 환경에 설치할 경우 위의 그림처럼 C,D프로젝트가 동시에 진행될 때 둘 중하나의 library version이 차이가 나면 old version의 library 로 진행되는 프로젝트는 에러가 발생함
<ul>
<li>2개의 다른 프로젝트가 같은 python interpreter를 바라보고 library를 설치하기 때문에 종속성 문제가 생김 (library 충돌 발생)</li>
<li>그래서 다른 가상환경 venv안에 다른 프로젝트를 할당해서 독립적으로 프로젝트를 진행하는게 일반적임</li>
</ul></li>
<li>python 가상환경 만들기
<ul>
<li>conda로 만들 경우 conda 설치 후 만들면 됨. <a href="https://github.com/conda-forge/miniforge">설치 링크</a></li>
<li>python에 있는 가상환경 생성 기능으로 만들 경우 <code>python -m airflow ./venv</code> 실행
<ul>
<li><code>./venv</code> directory에 python 설치하고 version 관리하겠다는 의미</li>
</ul></li>
</ul></li>
<li>VScode가 python 가상환경 참조하도록 설정
<ul>
<li>help&gt;show all commands or <code>ctrl+shift+p</code> 누른후 <code>interpreter</code> 입력하여 가상환경에 있는 python 클릭</li>
</ul></li>
<li>terminal 에서 가상환경 잘 잡혔는지 확인</li>
</ul></li>
</ul>
</section>
<section id="git-environment-setting" class="level2" data-number="5.5">
<h2 data-number="5.5" class="anchored" data-anchor-id="git-environment-setting"><span class="header-section-number">5.5</span> Git Environment Setting</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Git Installation &amp; Environment Setting</a></li>
</ul>
</section>
<section id="airflow-library-installation" class="level2" data-number="5.6">
<h2 data-number="5.6" class="anchored" data-anchor-id="airflow-library-installation"><span class="header-section-number">5.6</span> Airflow Library Installation</h2>
<ul>
<li>Airflow 라이브러리 설치 대상과 설치 이유
<ul>
<li>설치 대상: 로컬 컴퓨터의 파이썬 가상환경(본인의 경우: airflow)</li>
<li>Why? Airflow DAG 개발을 위해 Airflow의 python class files 및 라이브러리들이 많기 때문에 필요</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/Installation/installing-from-pypi.html">Airflow 라이브러리 설치 가이드</a>
<ul>
<li><code>conda activate airflow</code> 가상환경으로 들어감</li>
<li><code>pip install "apache-airflow[celery]==2.6.1" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.1/constraints-3.7.txt"</code></li>
</ul></li>
<li>리눅스에서 파이썬 Airflow 라이브러리 설치시 그 자체로 Airflow 서비스 사용 가능
<ul>
<li>하지만 WSL에서 pip install 명령으로 Airflow를 설치하지 않는 이유?</li>
<li>pip install 로 Airflow 설치시 저사양의 아키텍처로 설치되며 여러 제약이 존재함 (Task를 한번에 1개씩만 실행 가능 등)</li>
<li>그러므로 docker로 설치해야 제약이 없음</li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Operator Baisc (Bash Operator)</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="dag-basic" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> DAG Basic</h1>
<section id="airflow-dag-생성" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="airflow-dag-생성"><span class="header-section-number">1.1</span> Airflow DAG 생성</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 241.70 263.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 259)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-259 237.7,-259 237.7,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-247 136.43,-247 136.43,-8 8,-8"></polygon> <text text-anchor="middle" x="72.21" y="-230.4" font-family="Times,serif" font-size="14.00">DAG</text> </g> <!-- Bash_Operator --> <g id="node1" class="node">
<title>
Bash_Operator
</title>
<polygon fill="none" stroke="black" points="122.47,-214 21.96,-214 21.96,-178 122.47,-178 122.47,-214"></polygon> <text text-anchor="middle" x="72.21" y="-191.8" font-family="Times,serif" font-size="14.00">Bash_Operator</text> </g> <!-- Task1 --> <g id="node5" class="node">
<title>
Task1
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-196" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-191.8" font-family="Times,serif" font-size="14.00">Task1</text> </g> <!-- Bash_Operator&#45;&gt;Task1 --> <g id="edge1" class="edge">
<title>
Bash_Operator-&gt;Task1
</title>
<path fill="none" stroke="black" d="M122.56,-196C132.88,-196 143.7,-196 153.82,-196"></path> <polygon fill="black" stroke="black" points="154.06,-199.5 164.06,-196 154.06,-192.5 154.06,-199.5"></polygon> </g> <!-- Python_Operator --> <g id="node2" class="node">
<title>
Python_Operator
</title>
<polygon fill="none" stroke="black" points="128.64,-160 15.79,-160 15.79,-124 128.64,-124 128.64,-160"></polygon> <text text-anchor="middle" x="72.21" y="-137.8" font-family="Times,serif" font-size="14.00">Python_Operator</text> </g> <!-- Task2 --> <g id="node6" class="node">
<title>
Task2
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-142" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-137.8" font-family="Times,serif" font-size="14.00">Task2</text> </g> <!-- Python_Operator&#45;&gt;Task2 --> <g id="edge2" class="edge">
<title>
Python_Operator-&gt;Task2
</title>
<path fill="none" stroke="black" d="M128.7,-142C137.22,-142 145.91,-142 154.13,-142"></path> <polygon fill="black" stroke="black" points="154.25,-145.5 164.25,-142 154.25,-138.5 154.25,-145.5"></polygon> </g> <!-- S3_Operator --> <g id="node3" class="node">
<title>
S3_Operator
</title>
<polygon fill="none" stroke="black" points="115.75,-106 28.67,-106 28.67,-70 115.75,-70 115.75,-106"></polygon> <text text-anchor="middle" x="72.21" y="-83.8" font-family="Times,serif" font-size="14.00">S3_Operator</text> </g> <!-- Task3 --> <g id="node7" class="node">
<title>
Task3
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-88" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-83.8" font-family="Times,serif" font-size="14.00">Task3</text> </g> <!-- S3_Operator&#45;&gt;Task3 --> <g id="edge3" class="edge">
<title>
S3_Operator-&gt;Task3
</title>
<path fill="none" stroke="black" d="M115.83,-88C128.19,-88 141.71,-88 154.15,-88"></path> <polygon fill="black" stroke="black" points="154.3,-91.5 164.3,-88 154.3,-84.5 154.3,-91.5"></polygon> </g> <!-- GCS_Operator --> <g id="node4" class="node">
<title>
GCS_Operator
</title>
<polygon fill="none" stroke="black" points="122.2,-52 22.23,-52 22.23,-16 122.2,-16 122.2,-52"></polygon> <text text-anchor="middle" x="72.21" y="-29.8" font-family="Times,serif" font-size="14.00">GCS_Operator</text> </g> <!-- Task4 --> <g id="node8" class="node">
<title>
Task4
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-34" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-29.8" font-family="Times,serif" font-size="14.00">Task4</text> </g> <!-- GCS_Operator&#45;&gt;Task4 --> <g id="edge4" class="edge">
<title>
GCS_Operator-&gt;Task4
</title>
<path fill="none" stroke="black" d="M122.56,-34C132.88,-34 143.7,-34 153.82,-34"></path> <polygon fill="black" stroke="black" points="154.06,-37.5 164.06,-34 154.06,-30.5 154.06,-37.5"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li><p>workflow = DAG</p></li>
<li><p>Opeartor</p>
<ul>
<li>특정 행위를 할 수 있는 기능을 모아 놓은 클래스 또는 설계도</li>
</ul></li>
<li><p>Task</p>
<ul>
<li>operator가 객체화(instantiation)되어 DAG에서 실행 가능한 object</li>
<li>방향성을 갖고 순환되지 않음 (DAG)</li>
</ul></li>
<li><p>Bash Operator</p>
<ul>
<li>Linux에서 shell script 명령을 수행하는 operator</li>
</ul></li>
<li><p>Python Operator</p>
<ul>
<li>python 함수를 실행하는 operator</li>
</ul></li>
<li><p>S3 Operator</p>
<ul>
<li>AWS의 S3 solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>GCS Operator</p>
<ul>
<li>GCP의 GCS solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>operators을 사용하여 dags을 작성하여 git을 통해 배포한다.</p></li>
<li><p>dag 작성 및 배포</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">  from __future__ import annotations</span>
<span id="cb1-2"></span>
<span id="cb1-3">  import datetime # python에는 datatime이라는 data type이 있음</span>
<span id="cb1-4">  import pendulum # datetime data type을 처리하는 library</span>
<span id="cb1-5"></span>
<span id="cb1-6">  from airflow import DAG</span>
<span id="cb1-7">  from airflow.operators.bash import BashOperator</span>
<span id="cb1-8">  from airflow.operators.empty import EmptyOperator</span>
<span id="cb1-9"></span>
<span id="cb1-10">  with DAG(</span>
<span id="cb1-11">      dag_id="dags_bash_operator", </span>
<span id="cb1-12">      # airflow service web 상에서 보여지는 이름, python file명과는 무관하지만 </span>
<span id="cb1-13">      # 실무에서는 일반적으로 python 파일명과 dag_id는 일치시키는 것이 다수의 dags 관리에 편리하다.</span>
<span id="cb1-14">      schedule="0 0 * * *", # "분 시 일 월 요일", cron schedule로서 매일 0분 0시에 실행</span>
<span id="cb1-15">      start_date=pendulum.datetime(2023, 6, 9, tz="Asia/Seoul"), #dags이 언제 실행될지 설정</span>
<span id="cb1-16">      # UTC: 세계 표준시로 한국 보다 9시간이 느림. Asia/Seoul로 변경해야 지정한 날짜에 0분 0시에 실행될 수 있다.</span>
<span id="cb1-17">      catchup=False, # start_date를 현재보다 과거로 설정하게 될 경우 </span>
<span id="cb1-18">      # catchup=True면 과거 부터 현재까지 소급해서 실행. </span>
<span id="cb1-19">      # 시간 순서대로 실행하는게 아니라 병렬로 한번에 실행하기 때문에 메모리를 많이 잡아먹을 수 있음. </span>
<span id="cb1-20">      # 그래서 보통 False로 처리. catchup=False면 현재부터만 실행</span>
<span id="cb1-21">      # dagrun_timeout=datetime.timedelta(minutes=60), # dag이 60분 이상 구동시 실패가 되도록 설정</span>
<span id="cb1-22">      # tags=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"example", "example2"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, #airflow service web browser상 dag의 tag를 의미. 즉 dag id 바로 밑 파란색 박스를 의미. tag를 누르면 같은 tag를 가진 dags들만 filtering돼서 선택됨 </span>
<span id="cb1-23">      ## dags 이 수 백개가 될 때 tag로 filtering 하면 용이함 </span>
<span id="cb1-24">      # params={"example_key": "example_value"}, # as dag: 이하 tasks를 정의할 때, </span>
<span id="cb1-25">      ## tasks에 공통 passing parameters가 있을 때 씀</span>
<span id="cb1-26">  ) as dag:</span>
<span id="cb1-27">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">START how to_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-28">      bash_task1 = BashOperator(</span>
<span id="cb1-29">          task_id="bash_task1", # airflow web service의 dag graph에 표시될 task명</span>
<span id="cb1-30">          # task역시 task object name (bash_task1)과 task_id(bash_task1)를 일치시키는 것이 좋음</span>
<span id="cb1-31">          bash_command="echo this task works well!",</span>
<span id="cb1-32">          # bash_command 이하는 shell script를 적어주면 됨</span>
<span id="cb1-33">      )</span>
<span id="cb1-34">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">END how to_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-35">      bash_task2 = BashOperator(</span>
<span id="cb1-36">          task_id="bash_task2",  </span>
<span id="cb1-37">          bash_command="echo $HOSTNAME", # $HOSTNAME: HOSTNAME 환경변수 호출</span>
<span id="cb1-38">          # WSL terminal 이름이 출력된다.</span>
<span id="cb1-39">      )</span>
<span id="cb1-40">      bash_task1 &gt;&gt; bash_task2 # 수행될 tasks의 관계 설정</span></code></pre></div></li>
<li><p>배포된 dags을 airflow containers과 연결 시키기 위해 <code>docker-compose.yaml</code> 실행</p>
<ul>
<li><code>vi docker-compose.yaml</code> 실행 후 <code>docker-compose.yaml</code> 안에서 <code>Volumns</code> 항목이 wsl의 directory와 container directory를 연결(mount)해주는 요소</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">Volumes</span>
<span id="cb2-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb2-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb2-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div>
<ul>
<li><p>위와 같이 Volumns 항목이 뜨는데 <code>:</code>을 기준으로 왼쪽이 WSL directories(volumns), 오른쪽이 Docker container directories(volumns)</p></li>
<li><p>다른 WSL창을 열어 <code>echo ${AIRFLOW_PROJ_DIR:-.}</code> 실행하면 <code>AIRFLOW_PROJ_DIR</code>에 값이 없기 때문에 <code>.</code> 출력됨</p>
<ul>
<li><code>AIRFLOW_PROJ_DIR:-.</code> : shell script문법으로 <code>AIRFLOW_PROJ_DIR</code>에 값이 있으면 출력하고 없으면 <code>.</code>을 출력하라는 의미</li>
<li><code>echo AIRFLOW_PROJ_DIR</code>: 아무것도 출력 안됨</li>
</ul></li>
<li><p><code>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</code>는 <code>./dags</code>를 <code>/opt/airflow/dags</code>에 연결시키라는 의미</p>
<ul>
<li><code>./</code>: <code>docker-compose.yaml</code>이 위치하고있는 현재 directory를 의미</li>
</ul></li>
<li><p>배포된 dags를 자동으로 docker container에 연동시키기 위해 <code>Volumns</code>을 다음과 같이 편집</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">  volumes:</span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb3-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb3-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div>
<ul>
<li>directory hierarchy에 따라 위의 volumes path를 다르게 설정해야한다. docker service web browse(i.e.&nbsp;localhost:8080) 껏다 켜가면서 확인하면서 설정</li>
</ul></li>
<li><p>새로운 dags 배포할 때마다 airflow service 껐다가 켜야 한다.</p></li>
</ul></li>
<li><p>airflow service 껐다 켜서 잘 반영됐는지 확인</p>
<ul>
<li>docker가 설치된 wsl directory이동 먼저 할 것</li>
<li>airflow service 끄기: <code>sudo docker compose down</code></li>
<li>airflow service 켜기: <code>sudo docker compose up</code></li>
</ul></li>
<li><p>airflow web service상에서 dags이 잘 mount 되었는지 확인</p>
<ul>
<li>기본적으로 dags은 airflow web service상에 올라올 때 unpaused 상태로 올라옴</li>
<li>하지만 schedule이 걸려있는 dags은 unpaused상태에서 한번 돌고 올라옴</li>
<li>dag을 클릭하면 긴 녹색 막대기를 누르면 수행된 schedule내용이 나오고</li>
<li>각 각의 task에 대응되는 녹색 네모 박스를 누르면 결과들을 조회할 수 있다.
<ul>
<li>네모 박스를 누르고 log (audit log 아님)를 누르면 결과가 자세히 조회된다.</li>
<li><code>bash_task2</code> 의 <code>bash_command="echo $HOSTNAME"</code> 의 결과값으로 조회된 값은 docker worker container id 를 의미한다.
<ul>
<li>하지만 본인의 경우, airflow web service에서 <code>794f3b56824a</code>가 출력된 것을 확인했고</li>
<li><code>sudo docker ps</code>로 container ID를 확인한 결과 <code>airflow-airflow-worker-1</code> 의 <code>32092b201878</code> 로 달랐다.</li>
</ul></li>
<li>실제 worker container로 들어가 <code>echo $HOSTNAME</code> 실행하면 worker container id 출력되어야 함
<ul>
<li>worker container로 들어가기: <code>sudo docker exec -it container-name bash</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 본인의 경우: <code>sudo docker exec -it airflow-airflow-worker-1 bash</code> 이 과정이 dag을 돌린과정과 같은 mechanism임</li>
<li><code>echo $HOSTNAME</code> 실행 : <code>32092b201878</code> 출력됨 (어쨌든 airflow web service상의 <code>794f3b56824a</code>와 달랐음)</li>
<li><code>sudo docker exec -it 794f3b56824a bash</code> 결과 Error response from daemon: No such container: 794f3b56824a 라는 에러메세지 뜸</li>
</ul></li>
<li>즉, worker container가 실제 <code>task</code>를 처리하는 것을 볼 수 있었다.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="subject-of-task-performance" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="subject-of-task-performance"><span class="header-section-number">1.2</span> Subject of Task Performance</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 453.00 367.20" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 363.2)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-363.2 449,-363.2 449,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-351.2 437,-351.2 437,-8 8,-8"></polygon> <text text-anchor="middle" x="222.5" y="-334.6" font-family="Times,serif" font-size="14.00">Task Process</text> </g> <!-- Scheduler --> <g id="node1" class="node">
<title>
Scheduler
</title>
<polygon fill="none" stroke="black" points="238.98,-318.4 167.02,-318.4 167.02,-282.4 238.98,-282.4 238.98,-318.4"></polygon> <text text-anchor="middle" x="203" y="-296.2" font-family="Times,serif" font-size="14.00">Scheduler</text> </g> <!-- Scheduler&#45;&gt;Scheduler --> <g id="edge3" class="edge">
<title>
Scheduler-&gt;Scheduler
</title>
<path fill="none" stroke="black" d="M239.08,-308.61C249.21,-308.25 256.99,-305.51 256.99,-300.4 256.99,-297.2 253.95,-294.94 249.2,-293.6"></path> <polygon fill="black" stroke="black" points="249.47,-290.1 239.08,-292.19 248.5,-297.03 249.47,-290.1"></polygon> <text text-anchor="middle" x="306.55" y="-296.2" font-family="Times,serif" font-size="14.00">3.check start time</text> </g> <!-- DAG_file --> <g id="node2" class="node">
<title>
DAG_file
</title>
<polygon fill="none" stroke="black" points="122.99,-229.6 51.01,-229.6 51.01,-193.6 122.99,-193.6 122.99,-229.6"></polygon> <text text-anchor="middle" x="87" y="-207.4" font-family="Times,serif" font-size="14.00">DAG_file</text> </g> <!-- Scheduler&#45;&gt;DAG_file --> <g id="edge1" class="edge">
<title>
Scheduler-&gt;DAG_file
</title>
<path fill="none" stroke="black" d="M174.11,-282.39C165.32,-276.91 155.74,-270.64 147.29,-264.4 135.6,-255.79 123.34,-245.51 112.95,-236.38"></path> <polygon fill="black" stroke="black" points="115.21,-233.71 105.41,-229.68 110.56,-238.94 115.21,-233.71"></polygon> <text text-anchor="middle" x="172.86" y="-251.8" font-family="Times,serif" font-size="14.00">1.parsing</text> </g> <!-- Queue --> <g id="node4" class="node">
<title>
Queue
</title>
<polygon fill="none" stroke="black" points="230,-229.6 176,-229.6 176,-193.6 230,-193.6 230,-229.6"></polygon> <text text-anchor="middle" x="203" y="-207.4" font-family="Times,serif" font-size="14.00">Queue</text> </g> <!-- Scheduler&#45;&gt;Queue --> <g id="edge4" class="edge">
<title>
Scheduler-&gt;Queue
</title>
<path fill="none" stroke="black" d="M203,-282.25C203,-270.12 203,-253.62 203,-239.72"></path> <polygon fill="black" stroke="black" points="206.5,-239.71 203,-229.71 199.5,-239.71 206.5,-239.71"></polygon> </g> <!-- Meta_DB --> <g id="node5" class="node">
<title>
Meta_DB
</title>
<polygon fill="none" stroke="black" points="309.71,-52 238.29,-52 238.29,-16 309.71,-16 309.71,-52"></polygon> <text text-anchor="middle" x="274" y="-29.8" font-family="Times,serif" font-size="14.00">Meta_DB</text> </g> <!-- Scheduler&#45;&gt;Meta_DB --> <g id="edge2" class="edge">
<title>
Scheduler-&gt;Meta_DB
</title>
<path fill="none" stroke="black" d="M221.58,-282.05C244.31,-259.7 282.19,-218.59 302,-175.6 321.9,-132.43 339.89,-112.7 319,-70 317.09,-66.1 314.52,-62.51 311.56,-59.23"></path> <polygon fill="black" stroke="black" points="313.76,-56.5 304.09,-52.17 308.95,-61.59 313.76,-56.5"></polygon> <text text-anchor="middle" x="362.49" y="-163" font-family="Times,serif" font-size="14.00">2.save information</text> </g> <!-- Worker --> <g id="node3" class="node">
<title>
Worker
</title>
<polygon fill="yellow" stroke="black" points="232.25,-140.8 173.75,-140.8 173.75,-104.8 232.25,-104.8 232.25,-140.8"></polygon> <text text-anchor="middle" x="203" y="-118.6" font-family="Times,serif" font-size="14.00">Worker</text> </g> <!-- DAG_file&#45;&gt;Worker --> <g id="edge6" class="edge">
<title>
DAG_file-&gt;Worker
</title>
<path fill="none" stroke="black" d="M64.45,-193.49C53.53,-183.12 44.48,-169.82 53.22,-158.8 66.74,-141.76 123.73,-132.23 163.37,-127.56"></path> <polygon fill="black" stroke="black" points="163.99,-131.01 173.54,-126.42 163.21,-124.05 163.99,-131.01"></polygon> <text text-anchor="middle" x="125.89" y="-163" font-family="Times,serif" font-size="14.00">5.Processing after reading</text> </g> <!-- Worker&#45;&gt;Meta_DB --> <g id="edge7" class="edge">
<title>
Worker-&gt;Meta_DB
</title>
<path fill="none" stroke="black" d="M208.23,-104.72C212.09,-93.99 218.13,-80.28 226.46,-70 229.76,-65.92 233.64,-62.08 237.74,-58.53"></path> <polygon fill="black" stroke="black" points="240.16,-61.08 245.79,-52.11 235.79,-55.61 240.16,-61.08"></polygon> <text text-anchor="middle" x="272.27" y="-74.2" font-family="Times,serif" font-size="14.00">6.Results update</text> </g> <!-- Queue&#45;&gt;Worker --> <g id="edge5" class="edge">
<title>
Queue-&gt;Worker
</title>
<path fill="none" stroke="black" d="M203,-193.45C203,-181.32 203,-164.82 203,-150.92"></path> <polygon fill="black" stroke="black" points="206.5,-150.91 203,-140.91 199.5,-150.91 206.5,-150.91"></polygon> <text text-anchor="middle" x="251.99" y="-163" font-family="Times,serif" font-size="14.00">4.start instruction</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>scheduler
<ul>
<li>airflow에서 brain역할
<ol type="1">
<li>parsing: a user가 만든 dag 파일을 읽어들여 문법적 오류 여부와 tasks 간의 관계를 분석</li>
<li>save information: DAG Parsing 후 DB에 정보저장 (tasks, task relations, schedule, etc.)</li>
<li>check start time: DAG 시작 실행 시간 확인</li>
<li>start instruction: DAG 시작 실행 시간마다 worker에 실행 지시</li>
</ol>
<ul>
<li>scheduler와 workder 사이에 queue 상태가 있을 수 있음</li>
</ul></li>
</ul></li>
<li>worker (Worker Container)
<ul>
<li>airflow 처리 주체 (subject)
<ol start="5" type="1">
<li>Processing after reading: scheduler가 시킨 DAG 파일을 찾아 읽고 처리</li>
<li>Results update: 처리가 되기 전/후를 Meta DB에 update함</li>
</ol></li>
</ul></li>
</ul>
</section>
</section>
<section id="cron-schedule" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Cron Schedule</h1>
<section id="cron-scheduling" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="cron-scheduling"><span class="header-section-number">2.1</span> Cron Scheduling</h2>
<ul>
<li>task가 실행되어야 하는 시간(주기)을 정하기 위한 다섯개의 필드로 구성된 문자열</li>
<li>Cron을 이용하면 왠만한 scheduling 모두 가능</li>
</ul>
<p><code>{minutes} {hour} {day} {month} {weekday}</code></p>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 27%">
<col style="width: 59%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Number</th>
<th style="text-align: center;">Special Characters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">*</td>
<td>모든 값</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">-</td>
<td>범위 지정</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">,</td>
<td>여러 값 지정</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">/</td>
<td>증가값 지정. staring-value/ending-value</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">L</td>
<td>마지막 값 (일, 요일에만 설정 가능) <br> * 일에 L 입력시 해당 월의 마지막 일 의미 <br> ※ 요일에 L 입력시 토요일 의미</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">#</td>
<td>몇 번째 요일인지 지정</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 33%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Cron schedule</th>
<th>Description</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">15 2 * * *</td>
<td>매일 02시 15분에 도는 daily batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 * * * *</td>
<td>매시 정각에 도는 시간 단위 batch</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 1 * *</td>
<td>매월 1일 0시 0분 도는 monthly batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 * * 1</td>
<td>매주 월요일 1시 10분에 도는 weekly batch</td>
<td>0: 일요일, 1: 월요일, 2: 화요일, 3:수요일, 4: 목요일, 5: 금요일, 6: 토요일</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 9-18 * * *</td>
<td>매일 9시부터 18시까지 정각마다 도는 daily batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="even">
<td style="text-align: left;">0 1 1,2,3 * *</td>
<td>매월 1일, 2일 3일만 1시에 도는 monthly batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="odd">
<td style="text-align: left;">*/30 * * *</td>
<td>삼십분마다 (0분, 30분)</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10-59/30 * * * *</td>
<td>10분부터 삼십분마다 (10분, 40분에 도는 작업)</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 1-5</td>
<td>평일만 01시 10분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 */2 * * *</td>
<td>2시간 마다 (0시, 02시, 04시 …)</td>
<td>1-23/2: 1시부터 2시간 마다</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 */2 * *</td>
<td>짝수일 0시 0분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 L * *</td>
<td>매월 마지막 일 01시 10분에 도는 montly batch</td>
<td>빈번하게 사용되는 schedule</td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 6#3</td>
<td>매월 세 번째 토요일 01시 10분 도는 montly batch</td>
<td></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="task-dependenciesconnection" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task Dependencies(Connection)</h1>
<section id="task-connection-methods" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="task-connection-methods"><span class="header-section-number">3.1</span> Task Connection Methods</h2>
<ul>
<li>Task 연결 방법 종류
<ul>
<li>&gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</li>
<li>함수 사용하기</li>
</ul></li>
<li>복잡한 Task 는 어떻게 연결하는가?</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 454.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 450,-205 450,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 438,-193 438,-8 8,-8"></polygon> <text text-anchor="middle" x="223" y="-176.4" font-family="Times,serif" font-size="14.00">Task Connection</text> </g> <!-- task1 --> <g id="node1" class="node">
<title>
task1
</title>
<polygon fill="none" stroke="black" points="70,-133 16,-133 16,-97 70,-97 70,-133"></polygon> <text text-anchor="middle" x="43" y="-110.8" font-family="Times,serif" font-size="14.00">task1</text> </g> <!-- task2 --> <g id="node2" class="node">
<title>
task2
</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon> <text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task2</text> </g> <!-- task1&#45;&gt;task2 --> <g id="edge2" class="edge">
<title>
task1-&gt;task2
</title>
<path fill="none" stroke="black" d="M70.4,-106.9C78.48,-104.42 87.51,-101.65 96.1,-99.01"></path> <polygon fill="black" stroke="black" points="97.39,-102.28 105.92,-96 95.33,-95.59 97.39,-102.28"></polygon> </g> <!-- task3 --> <g id="node3" class="node">
<title>
task3
</title>
<polygon fill="none" stroke="black" points="160,-160 106,-160 106,-124 160,-124 160,-160"></polygon> <text text-anchor="middle" x="133" y="-137.8" font-family="Times,serif" font-size="14.00">task3</text> </g> <!-- task1&#45;&gt;task3 --> <g id="edge1" class="edge">
<title>
task1-&gt;task3
</title>
<path fill="none" stroke="black" d="M70.4,-123.1C78.48,-125.58 87.51,-128.35 96.1,-130.99"></path> <polygon fill="black" stroke="black" points="95.33,-134.41 105.92,-134 97.39,-127.72 95.33,-134.41"></polygon> </g> <!-- task4 --> <g id="node4" class="node">
<title>
task4
</title>
<polygon fill="none" stroke="black" points="250,-106 196,-106 196,-70 250,-70 250,-106"></polygon> <text text-anchor="middle" x="223" y="-83.8" font-family="Times,serif" font-size="14.00">task4</text> </g> <!-- task2&#45;&gt;task4 --> <g id="edge3" class="edge">
<title>
task2-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-88C168.39,-88 177.31,-88 185.82,-88"></path> <polygon fill="black" stroke="black" points="185.92,-91.5 195.92,-88 185.92,-84.5 185.92,-91.5"></polygon> </g> <!-- task3&#45;&gt;task4 --> <g id="edge4" class="edge">
<title>
task3-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-125.8C168.83,-120.63 178.29,-114.82 187.22,-109.34"></path> <polygon fill="black" stroke="black" points="189.23,-112.22 195.92,-104 185.57,-106.25 189.23,-112.22"></polygon> </g> <!-- task6 --> <g id="node6" class="node">
<title>
task6
</title>
<polygon fill="none" stroke="black" points="340,-79 286,-79 286,-43 340,-43 340,-79"></polygon> <text text-anchor="middle" x="313" y="-56.8" font-family="Times,serif" font-size="14.00">task6</text> </g> <!-- task4&#45;&gt;task6 --> <g id="edge6" class="edge">
<title>
task4-&gt;task6
</title>
<path fill="none" stroke="black" d="M250.4,-79.9C258.48,-77.42 267.51,-74.65 276.1,-72.01"></path> <polygon fill="black" stroke="black" points="277.39,-75.28 285.92,-69 275.33,-68.59 277.39,-75.28"></polygon> </g> <!-- task5 --> <g id="node5" class="node">
<title>
task5
</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon> <text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task5</text> </g> <!-- task5&#45;&gt;task4 --> <g id="edge5" class="edge">
<title>
task5-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-50.2C168.83,-55.37 178.29,-61.18 187.22,-66.66"></path> <polygon fill="black" stroke="black" points="185.57,-69.75 195.92,-72 189.23,-63.78 185.57,-69.75"></polygon> </g> <!-- task8 --> <g id="node8" class="node">
<title>
task8
</title>
<polygon fill="none" stroke="black" points="430,-79 376,-79 376,-43 430,-43 430,-79"></polygon> <text text-anchor="middle" x="403" y="-56.8" font-family="Times,serif" font-size="14.00">task8</text> </g> <!-- task6&#45;&gt;task8 --> <g id="edge8" class="edge">
<title>
task6-&gt;task8
</title>
<path fill="none" stroke="black" d="M340.4,-61C348.39,-61 357.31,-61 365.82,-61"></path> <polygon fill="black" stroke="black" points="365.92,-64.5 375.92,-61 365.92,-57.5 365.92,-64.5"></polygon> </g> <!-- task7 --> <g id="node7" class="node">
<title>
task7
</title>
<polygon fill="none" stroke="black" points="250,-52 196,-52 196,-16 250,-16 250,-52"></polygon> <text text-anchor="middle" x="223" y="-29.8" font-family="Times,serif" font-size="14.00">task7</text> </g> <!-- task7&#45;&gt;task6 --> <g id="edge7" class="edge">
<title>
task7-&gt;task6
</title>
<path fill="none" stroke="black" d="M250.4,-42.1C258.48,-44.58 267.51,-47.35 276.1,-49.99"></path> <polygon fill="black" stroke="black" points="275.33,-53.41 285.92,-53 277.39,-46.72 275.33,-53.41"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<section id="사용하기-airflow-공식-추천방식" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1" class="anchored" data-anchor-id="사용하기-airflow-공식-추천방식"><span class="header-section-number">3.1.1</span> &gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</h3>
<ul>
<li>방법1 : 모든 경우의 수에 대해서 연결 가능하지만 가독성 떨어짐</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">task1 &gt;&gt; task2</span>
<span id="cb4-2">task1 &gt;&gt; task3</span>
<span id="cb4-3">task2 &gt;&gt; task4</span>
<span id="cb4-4">task3 &gt;&gt; task4</span>
<span id="cb4-5">task5 &gt;&gt; task4</span>
<span id="cb4-6">task4 &gt;&gt; task6</span>
<span id="cb4-7">task7 &gt;&gt; task6</span>
<span id="cb4-8">task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법2: 같은 레벨의 tasks는 list로 묶어 준다. 가독성이 높지만 구현이 안되는 경우 있을 수 있음</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb5-2">task5 &gt;&gt; task4</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법3: 역방향은 &lt;&lt;를 이용 (권장 하지 않음)</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4 &lt;&lt; task5</span>
<span id="cb6-2">task4 &gt;&gt; task 6 &lt;&lt; task7</span>
<span id="cb6-3">task6 &gt;&gt; task8</span></code></pre></div>
<section id="example" class="level4" data-number="3.1.1.1">
<h4 data-number="3.1.1.1" class="anchored" data-anchor-id="example"><span class="header-section-number">3.1.1.1</span> Example</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"></span>
<span id="cb7-2">from airflow import DAG</span>
<span id="cb7-3">import pendulum</span>
<span id="cb7-4">import datetime</span>
<span id="cb7-5">from airflow.operators.empty import EmptyOperator</span>
<span id="cb7-6">#EmptyOperator는 어떤 연산도 하지 않는 class</span>
<span id="cb7-7"></span>
<span id="cb7-8">with DAG(</span>
<span id="cb7-9">    dag_id="dags_task_connection",</span>
<span id="cb7-10">    schedule=None,</span>
<span id="cb7-11">    start_date=pendulum.datetime(2023,3,1, tz="Asia/Seoul"),</span>
<span id="cb7-12">    catchup=False</span>
<span id="cb7-13">) as dag:</span>
<span id="cb7-14">    # 8개의 instances: task1~task8</span>
<span id="cb7-15">    task1=EmptyOperator(</span>
<span id="cb7-16">        task_id='task1'</span>
<span id="cb7-17">    )</span>
<span id="cb7-18">    task2=EmptyOperator(</span>
<span id="cb7-19">        task_id='task2'</span>
<span id="cb7-20">    )</span>
<span id="cb7-21">    task3=EmptyOperator(</span>
<span id="cb7-22">        task_id='task3'</span>
<span id="cb7-23">    )</span>
<span id="cb7-24">    task4=EmptyOperator(</span>
<span id="cb7-25">        task_id='task4'</span>
<span id="cb7-26">    )</span>
<span id="cb7-27">    task5=EmptyOperator(</span>
<span id="cb7-28">        task_id='task5'</span>
<span id="cb7-29">    )</span>
<span id="cb7-30">    task6=EmptyOperator(</span>
<span id="cb7-31">        task_id='task6'</span>
<span id="cb7-32">    )</span>
<span id="cb7-33">    task7=EmptyOperator(</span>
<span id="cb7-34">        task_id='task7'</span>
<span id="cb7-35">    )</span>
<span id="cb7-36">    task8=EmptyOperator(</span>
<span id="cb7-37">        task_id='task8'</span>
<span id="cb7-38">    )</span>
<span id="cb7-39">  </span>
<span id="cb7-40">  task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb7-41">  task5 &gt;&gt; task4</span>
<span id="cb7-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
</section>
</section>
<section id="함수-사용하기" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2" class="anchored" data-anchor-id="함수-사용하기"><span class="header-section-number">3.1.2</span> 함수 사용하기</h3>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html">Reference: Airflow Official Document</a>
<ul>
<li>Content/Core Concepts/DAGs 참고</li>
<li>DAGs에 대한 숙련도가 올라가면 이 링크를 참고하면 매우 유용
<ul>
<li>DAG을 어떤 상황에서 어떻게 짜야하는지에 대한 guidance가 자세히 적혀 있음</li>
<li>예를 들어, dag을 생성하는 방법 (dag declaration)에는 with 문을 사용하는 방법과 standard constructor (표준 생성자)를 사용하는 방법이 있음
<ol type="1">
<li>with statement</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">import datetime</span>
<span id="cb8-2"></span>
<span id="cb8-3">from airflow import DAG</span>
<span id="cb8-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb8-5"></span>
<span id="cb8-6">with DAG(</span>
<span id="cb8-7">    dag_id="my_dag_name",</span>
<span id="cb8-8">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb8-9">    schedule="@daily",</span>
<span id="cb8-10">):</span>
<span id="cb8-11">EmptyOperator(task_id="task")</span></code></pre></div>
<ol start="2" type="1">
<li>standard constructor (class)</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">import datetime</span>
<span id="cb9-2"></span>
<span id="cb9-3">from airflow import DAG</span>
<span id="cb9-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb9-5"></span>
<span id="cb9-6">#class 생성</span>
<span id="cb9-7">my_dag = DAG( </span>
<span id="cb9-8">    dag_id="my_dag_name",</span>
<span id="cb9-9">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb9-10">    schedule="@daily",</span>
<span id="cb9-11">)</span>
<span id="cb9-12">EmptyOperator(task_id="task", dag=my_dag)</span></code></pre></div>
<ol start="3" type="1">
<li>python의 decorator기능 활용 (dag decorator to turn a function into a DAG generator)</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">import datetime</span>
<span id="cb10-2"></span>
<span id="cb10-3">from airflow.decorators import dag</span>
<span id="cb10-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb10-5"></span>
<span id="cb10-6"></span>
<span id="cb10-7">@dag(start_date=datetime.datetime(2021, 1, 1), schedule="@daily")</span>
<span id="cb10-8">def generate_dag():</span>
<span id="cb10-9">    EmptyOperator(task_id="task")</span>
<span id="cb10-10"></span>
<span id="cb10-11"></span>
<span id="cb10-12">generate_dag()</span></code></pre></div></li>
</ul></li>
</ul></li>
<li>task dependencies 설정을 위한 emplicit methods.
<ul>
<li><code>set_upstream</code> and <code>set_downstream</code></li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">first_task.set_downstream(second_task, third_task)</span>
<span id="cb11-2">third_task.set_upstream(fourth_task)</span></code></pre></div>
<ul>
<li><code>cross_downstream</code></li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow.models.baseoperator import cross_downstream</span>
<span id="cb12-2"></span>
<span id="cb12-3">#Replaces</span>
<span id="cb12-4">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op3</span>
<span id="cb12-5">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op4</span>
<span id="cb12-6">cross_downstream(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op3, op4</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span></code></pre></div>
<ul>
<li><code>chain</code></li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow.models.baseoperator import chain</span>
<span id="cb13-2"></span>
<span id="cb13-3">#Replaces op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span>
<span id="cb13-4">chain(op1, op2, op3, op4)</span>
<span id="cb13-5"></span>
<span id="cb13-6">#You can also do it dynamically</span>
<span id="cb13-7">chain(*<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">EmptyOperator(task_id='op' + i) for i in range(1, 6)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">#or</span>
<span id="cb13-10"></span>
<span id="cb13-11">from airflow.models.baseoperator import chain</span>
<span id="cb13-12"></span>
<span id="cb13-13">#Replaces</span>
<span id="cb13-14">#op1 &gt;&gt; op2 &gt;&gt; op4 &gt;&gt; op6</span>
<span id="cb13-15">#op1 &gt;&gt; op3 &gt;&gt; op5 &gt;&gt; op6</span>
<span id="cb13-16">chain(op1, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op2, op3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op4, op5</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, op6)</span></code></pre></div></li>
</ul>
</section>
</section>
</section>
<section id="external-customized-script-operation" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> External Customized Script Operation</h1>
<ul>
<li>외부 script file such as <code>*.py</code> and <code>*.sh</code> 은 docker가 인식할 수 있도록 docker의 plugins directory안에 넣어줘야 실행된다.</li>
</ul>
<section id="what-is-shell-script" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="what-is-shell-script"><span class="header-section-number">4.1</span> What is Shell Script ?</h2>
<ul>
<li>Unix/Linux Shell 명령어로 적혀진 파일로 인터프리터에 의해 한 줄씩 처리된다.
<ul>
<li>interpreter: CPU가 programming 언어를 처리하는데 크게 compiling 방식과 interpreting 방식 2가지 방식이 있다.
<ul>
<li>compiling
<ul>
<li>programming language를 목적 코드인 2진수로 처리한다음 읽음</li>
<li>compile 할 때 연산 시간은 다소 소요되지만 한 번 compile 된 script는 실행 속도가 매우 빠름</li>
<li>C, Java</li>
</ul></li>
<li>interpreting: compiling없이 한줄씩 읽는 방식
<ul>
<li>compiling방식에 비해 실행 속도가 느림</li>
<li>python, shell</li>
</ul></li>
</ul></li>
</ul></li>
<li>bashOperator를 이용하여 shell script 처리</li>
<li>Echo, mkdir, cd, cp, tar, touch 등의 기본적인 쉘 명령어를 입력하여 작성하며 변수를 입력받거나 For 문, if 문 그리고 함수도 사용 가능</li>
<li>확장자가 없어도 동작하지만 주로 파일명에 .sh 확장자를 붙인다.</li>
</ul>
</section>
<section id="why-to-need-shell-script" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="why-to-need-shell-script"><span class="header-section-number">4.2</span> Why to Need Shell Script?</h2>
<ul>
<li>bashOperator를 이용하다면 bashOperator안에 shell 명령어들을 써서 넣어도 동작은 하지만</li>
<li>쉘 명령어를 이용하여 <strong>복잡한 로직을 처리하는 경우</strong> shell script를 이용하는 것이 좋다
<ul>
<li>예를들어, sftp (source sever)를 통해 csv나 json같은 파일을 받은 후 전처리하여 DB에 Insert &amp; tar.gz으로 압축하고 싶을때, 이렇게 복잡한 tasks를 bashOperator에 모두 기입하기 보다는 script를 짜서 bashOperator에서 호출하는 방식이 가독성이나 유지보수 측면에서 더 효율적이다.</li>
</ul></li>
<li><strong>쉘 명령어 재사용을 위한 경우</strong>
<ul>
<li>위의 예시를 server 100대에 대하여 반복 수행할 때 logic이 같으면 shell script를 100번 호출하는 것이 더 간편</li>
<li>sftp: 접속할 때 IP, Port, account, pw 가 필요한데 이런 것을 변수화 시키고 DB전처리 로직을 shell script에 짜 놓으면 됨.</li>
</ul></li>
</ul>
</section>
<section id="worker-컨테이너가-외부-스크립트shell를-수행하려면" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="worker-컨테이너가-외부-스크립트shell를-수행하려면"><span class="header-section-number">4.3</span> Worker 컨테이너가 외부 스크립트(shell)를 수행하려면?</h2>
<ul>
<li><p>문제점</p>
<ul>
<li>컨테이너는 외부의 파일을 인식할 수 없다. shell script를 wsl directory 어딘가에 넣으면 container가 인식을 못함.</li>
<li>컨테이너 안에 파일을 만들어주면 컨테이너 재시작시 파일이 사라진다. docker에서 이미지를 띄우는 것을 container를 만들었다라고 하는데 container 재 실행시 초기화 되어 실행된다. (docker의 특징). 그래서 컨테이너 안에 shell script 파일 넣어도 재시작시 삭제가 됨.</li>
</ul></li>
<li><p>해결방법</p>
<p><img src="kmink3225.netlify.app/images/airflow/worker-container-shell-operation.PNG" class="img-fluid"></p>
<ul>
<li>빨간 네모박스의 plugins에 shell script를 저장한다. airflow document에서는 customized python and shell script를 plugins에 저장하는 것을 권장</li>
</ul></li>
<li><p>example</p></li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">cd github-repository/plugins/shell</span>
<span id="cb14-2">vi select_fruit.sh #i 누르면 편집가능하고 편집 후 esc+wq! 입력하고 enter치면 저장하고 나감</span>
<span id="cb14-3">chmod +x select_fruit.sh #실행 권한을 부여</span>
<span id="cb14-4">./select_fruit.sh kmkim # ./test2.sh 는 test2.sh을 실행한다는 의미 출력물: kmkim 출력됨</span>
<span id="cb14-5">git add -A</span>
<span id="cb14-6">git commit -m "shell script example"</span>
<span id="cb14-7">git push</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode select_fruit.sh code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># echo $1 #첫 번째 인수 출력</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FRUIT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> APPLE <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Apple!"</span></span>
<span id="cb15-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> ORANGE <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Orange!"</span></span>
<span id="cb15-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FRUIT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> Grape <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb15-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected Grape!"</span></span>
<span id="cb15-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> </span>
<span id="cb15-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected other Fruit!"</span></span>
<span id="cb15-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
<ul>
<li>container에서 github repository에 있는 plugins/shell에 있는 shell script 인식하게 하기
<ul>
<li><p><code>vi docker-compose.yaml</code> 에서 67line 수정</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">volumes:</span></span>
<span id="cb16-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb16-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb16-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb16-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div></li>
</ul></li>
<li>select_fruit.sh 실행 권한 부여</li>
</ul>
<p>아래와 같이 6번의 task 수행 실패가 발생했는데 처음엔 volumne의 path 설정이 잘못 됐는지 알고 계속 <code>docker-compose.yaml</code>을 살펴봤다. 하지만 이상이 없는 것을 확인하고 task의 log를 확인해 봤는데 다음과 같은 error가 뜬것을 확인할 수 있었다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/external_script_operation.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">execution error</figcaption>
</figure>
</div>
<p><code>/bin/bash: line 1: /opt/***/plugins/shell/select_fruit.sh: Permission denied</code></p>
<p>이럴 땐 다음과 같이 실행권한을 부여하게 되면 해결된다.</p>
<p><code>(airflow) kmkim@K100230201051:~/airflow/plugins/shell$ chmod +x select_fruit.sh</code></p>
</section>
</section>
<section id="email-operator" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Email Operator</h1>
<ul>
<li><p>이메일 전송해주는 오퍼레이터</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">email_t1 = EmailOperator(</span>
<span id="cb17-2">  task_id='email_t1',</span>
<span id="cb17-3">  to='hjkim_sun@naver.com',</span>
<span id="cb17-4">  subject='Airflow 처리결과',</span>
<span id="cb17-5">  html_content='정상 처리되었습니다.'</span>
<span id="cb17-6">)</span></code></pre></div></li>
<li><p>구글 메일 서버 사용</p></li>
</ul>
<section id="presetting" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="presetting"><span class="header-section-number">5.1</span> Presetting</h2>
<section id="google-settings" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="google-settings"><span class="header-section-number">5.1.1</span> Google Settings</h3>
<ul>
<li>이메일 전송을 위해 사전 셋팅 작업 필요(Google)
<ul>
<li>google mail server사용</li>
<li>gmail &gt;&gt; settings(설정) &gt;&gt; See all settings (모든 설정 보기) &gt;&gt; Forwarding and POP/IMAP (전달 및 POP/IMAP) &gt;&gt; IMAP access (IMAP 접근): Enable IMAP (IMAP 사용)</li>
<li>Manage Your Google Acccount (구글 계정 관리) &gt;&gt; Security (보안) &gt;&gt; 2-Step Verification (2단계 인증) &gt;&gt; App Passwords: 앱비밀번호 setting &gt;&gt; select app: Mail , Select device: Windows Computer &gt;&gt; Generate app pasword message window popped up</li>
</ul></li>
</ul>
</section>
<section id="airflow-settings" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="airflow-settings"><span class="header-section-number">5.1.2</span> Airflow Settings</h3>
<ul>
<li>사전 설정 작업 (airflow)
<ul>
<li>docker-compose.yaml 편집 (environment 항목에 추가)</li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 띄어쓰기 주의</span></span>
<span id="cb18-2">AIRFLOW__SMTP__SMTP_HOST: 'smtp.gmail.com'  </span>
<span id="cb18-3">AIRFLOW__SMTP__SMTP_USER: '{gmail 계정}'</span>
<span id="cb18-4">AIRFLOW__SMTP__SMTP_PASSWORD: '{앱비밀번호}'</span>
<span id="cb18-5">AIRFLOW__SMTP__SMTP_PORT: 587</span>
<span id="cb18-6">AIRFLOW__SMTP__SMTP_MAIL_FROM: '{gmail 계정}' # 이메일을 누가 보내는 것으로 할건지 정함</span></code></pre></div></li>
</ul>
</section>
</section>
<section id="emailoperator-작성" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="emailoperator-작성"><span class="header-section-number">5.2</span> EmailOperator 작성</h2>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"></span>
<span id="cb19-2">from airflow import DAG</span>
<span id="cb19-3">import pendulum</span>
<span id="cb19-4">import datetime</span>
<span id="cb19-5">from airflow.operators.email import EmailOperator</span>
<span id="cb19-6"></span>
<span id="cb19-7">with DAG(</span>
<span id="cb19-8">    dag_id="dags_email_operator",</span>
<span id="cb19-9">    schedule="0 8 1 * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb19-10">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb19-11">    catchup=False</span>
<span id="cb19-12">) as dag:</span>
<span id="cb19-13">    sending_email_task=EmailOperator(</span>
<span id="cb19-14">        task_id='sending_email_task',</span>
<span id="cb19-15">        to='sdf@naver.com',</span>
<span id="cb19-16">        cc=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'sdf2@gmail.com', 'sdf3@gmail.com'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb19-17">        subject='Airflow Test',</span>
<span id="cb19-18">        html_content= """</span>
<span id="cb19-19">            this is a test for airflow.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;br/&gt;&lt;br/&gt;</span></span>
<span id="cb19-20">            </span>
<span id="cb19-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            {{ ds }}&lt;br/&gt;</span></span>
<span id="cb19-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Operator</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/04.python_operator.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="python-operator" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Python Operator</h1>
<ul>
<li>import libraries
<ul>
<li><code>from {package name} import {operator or class name}</code></li>
<li>ex) <code>from airflow.operators.python import PythonOperator</code></li>
</ul></li>
<li>정의된 파이썬 함수를 실행시키는 오퍼레이터</li>
<li>가장 많이 쓰이는 오퍼레이터</li>
</ul>
<section id="python-operator-types" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="python-operator-types"><span class="header-section-number">1.1</span> Python Operator Types</h2>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 56%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Package</th>
<th style="text-align: center;">Operator</th>
<th style="text-align: center;">Importance</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">airflow.operators.python</td>
<td style="text-align: center;">PythonOperator</td>
<td style="text-align: center;">***</td>
<td>어떤 파이썬함수를실행시키기 위한오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">BranchPythonOperator</td>
<td style="text-align: center;">*</td>
<td>파이썬 함수 실행 결과에 따라 task를 <strong>선택적</strong>으로 실행시킬 때 사용되는 오퍼레이터. task1 &gt;&gt; [task2, task3] 와 같은 상황에서 BranchOperator에서 task1을 실행시키고 task2와 task3 중 하나를 택하여 실행시킬 수 있는 operator. 즉, 조건적으로 task를 실행시키는 operator</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">ShortCircuitOperator</td>
<td style="text-align: center;"></td>
<td>파이썬 함수 실행 결과에 따라 후행 Task를 실행하지 않고 dag자체를 종료시킬 수 있는 오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">PythonVirtualenvOperator</td>
<td style="text-align: center;"></td>
<td>파이썬 가상환경 생성후 Job 수행하고 마무리되면 가상환경을 삭제해주는 3개의 과정을 실행시켜 주는 오퍼레이터</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">ExternalPythonOperator</td>
<td style="text-align: center;"></td>
<td>기존에 존재하는 파이썬가상환경에서 Job 수행하게 하는 오퍼레이터</td>
</tr>
</tbody>
</table>
</section>
<section id="python-operator-example" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="python-operator-example"><span class="header-section-number">1.2</span> Python Operator Example</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">from airflow import DAG</span>
<span id="cb1-2">import pendulum</span>
<span id="cb1-3">import datetime</span>
<span id="cb1-4">from airflow.operators.python import PythonOperator</span>
<span id="cb1-5">import random # for random.randint(0,3)</span>
<span id="cb1-6"></span>
<span id="cb1-7">with DAG(</span>
<span id="cb1-8">    dag_id="dags_python_operator",</span>
<span id="cb1-9">    schedule="30 6 * * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb1-10">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb1-11">    catchup=False</span>
<span id="cb1-12">) as dag:</span>
<span id="cb1-13">    def select_fruit(): # 실행 시켜줄 함수 선언</span>
<span id="cb1-14">        fruit =<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'Apple','Kiwi','banana','avocado'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-15">        rand_int = random.randint(0,3) # 0,1,2,3 4개의 정수 중 하나 return</span>
<span id="cb1-16">        print(fruit<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">rand_int</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb1-17">    py_t1 = PythonOperator(</span>
<span id="cb1-18">        task_id ='py_t1',</span>
<span id="cb1-19">        python_callable=select_fruit</span>
<span id="cb1-20">    )</span>
<span id="cb1-21">    py_t1</span></code></pre></div>
</section>
</section>
<section id="import-python-external-module" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Import Python External Module</h1>
<section id="python의-module-path-탐색하는-방식의-이해" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="python의-module-path-탐색하는-방식의-이해"><span class="header-section-number">2.1</span> Python의 Module Path 탐색하는 방식의 이해</h2>
<ul>
<li>예) PyhonOperator의 Import원리
<ul>
<li><code>from airflow.operators.python import PythonOperator</code></li>
<li>Airflow 폴더 아래 operators 폴더 아래 python 파일 아래에서 PythonOperator 클래스를 호출하라는 의미</li>
</ul></li>
<li>python이 경로 찾는 방식을 알아놔야 함
<ul>
<li>dag에서 우리가 만든 외부 함수를 import 해와야 하는데</li>
<li>import 경로를 python이 찾을 수 있도록 그 문법에 맞게 작성해야함
<ol type="1">
<li>파이썬은 sys.path 변수에서 모듈의 위치를 검색
<ul>
<li><p>pip install로 설치된 libraries</p>
<ul>
<li>container 안에 들어간 후 설치된 libraries 조회<br>
<img src="kmink3225.netlify.app/images/airflow/python-path-search.PNG" class="img-fluid" alt="Python의 sys.path를 이용한 모듈 검색"><br>
</li>
</ul></li>
<li><p>conda 환경에 설치된 libraries</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">  (airflow) PS C:\Users\kmkim\Desktop\projects\airflow&gt; python</span>
<span id="cb2-2">  Python 3.8.18 | packaged by conda-forge | (default, Dec 23 2023, 17:17:17) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">MSC v.1929 64 bit (AMD64)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> on win32</span>
<span id="cb2-3">  Type "help", "copyright", "credits" or "license" for more information.</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt;&gt;&gt; import sys</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  &gt;&gt;&gt; from pprint import pprint </span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  &gt;&gt;&gt; pprint(sys.path) </span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  ['',</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   'C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kmkim</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AppData</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Local</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">miniconda3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envs</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airflow</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">python38.zip',</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   'C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kmkim</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AppData</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Local</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">miniconda3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envs</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airflow</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DLLs',</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   'C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kmkim</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AppData</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Local</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">miniconda3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envs</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airflow</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lib',</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   'C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kmkim</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AppData</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Local</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">miniconda3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envs</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airflow',</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   'C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Users</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kmkim</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AppData</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Local</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">miniconda3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envs</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airflow</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lib</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">site-packages']</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  &gt;&gt;&gt;</span></span></code></pre></div></li>
</ul></li>
<li>sys.path 에 값을 추가하는 방법
<ol type="1">
<li>명시적으로 추가 (ex: <code>sys.path.append(‘/home/kkm’)</code> )</li>
<li>OS 환경변수 PYTHONPATH 에 값을 추가</li>
</ol></li>
</ol></li>
</ul></li>
</ul>
</section>
<section id="plugins-directory-이용" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="plugins-directory-이용"><span class="header-section-number">2.2</span> plugins directory 이용</h2>
<ul>
<li><p>다행히, 파이썬에서와 같이 귀찮은 방식보다는 Airflow에서는 자동적으로 dags 폴더와 plugins 폴더를 sys.path에 추가함</p>
<ul>
<li>컨테이너에서 <code>airflow info</code> 명령을 수행해보면 아래 그림과 같은 정보를 확인할 수 있다. <img src="kmink3225.netlify.app/images/airflow/container-airflow-info.PNG" class="img-fluid" alt="Airflow Path Info"></li>
</ul></li>
<li><p>plugins 폴더 이용하기 <img src="kmink3225.netlify.app/images/airflow/plugin-folder.PNG" class="img-fluid" alt="Airflow plugin Folder"></p>
<ul>
<li>plugins까지는 airflow에서 기본적으로 인식하고 있기 때문에 <code>from common.common_func import get_sftp</code>에서와 같이 <code>common</code>부터 경로 써주면 됨.</li>
</ul></li>
<li><p>파이썬 스크립트를 이용하면 좋은 점</p>
<ul>
<li>공통함수 작성이 가능해지고</li>
<li>재활용성이 증가하고</li>
<li>DAG의 가독성이 올라가고</li>
<li>디버깅에도 용이하다.</li>
</ul></li>
<li><p>PythonOperator 예시</p>
<ul>
<li>dags_python_import_func.py</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">from airflow import DAG</span>
<span id="cb3-2">import pendulum</span>
<span id="cb3-3">import datetime</span>
<span id="cb3-4">from airflow.operators.python import PythonOperator</span>
<span id="cb3-5">from common.common_func import get_sftp # 여기서 path 가 맞지 않아 local에서 error가 발생</span>
<span id="cb3-6">    # .env 파일을 만들어서 workspace 경로 설정을 해줘야 한다.</span>
<span id="cb3-7">import random</span>
<span id="cb3-8"></span>
<span id="cb3-9">with DAG(</span>
<span id="cb3-10">    dag_id="dags_python_import_func",</span>
<span id="cb3-11">    schedule="30 6 * * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb3-12">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb3-13">    catchup=False</span>
<span id="cb3-14">) as dag:</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_sftp_task = PythonOperator(</span></span>
<span id="cb3-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id ='get_sftp_task',</span></span>
<span id="cb3-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=get_sftp</span></span>
<span id="cb3-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb3-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_sftp_task</span></span></code></pre></div>
<ul>
<li>.env: wsl airflow directory에는 배포될 필요없는 파일이기 때문에 .gitignore에 추가해도 됨</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">WORKSPACE_FOLDER=C:\Users\kmkim\Desktop\projects\airflow #'airflow' directory path입력</span>
<span id="cb4-2">PYTHONPATH=${WORKSPACE_FOLDER}/plugins #'plugins' directory추가</span></code></pre></div></li>
</ul>
</section>
<section id="execute-python-external-modules" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="execute-python-external-modules"><span class="header-section-number">2.3</span> Execute Python External Modules</h2>
</section>
</section>
<section id="task-decorator" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task Decorator</h1>
<ul>
<li>python에 있는 기능</li>
<li>데커레이터(Decorator): 장식하다, 꾸미다</li>
<li>What to decorate?: <strong>함수</strong>를 장식하다</li>
<li>기능: python 함수를 좀 더 쉽게 사용할 수 있다. 원래의 함수를 감싸서 (Wrapping) 바깥에 추가 기능을 덧붙이는 방법
<ul>
<li>파이썬은 함수 안에 함수를 선언하는 것이 가능하고</li>
<li>함수의 인자로 함수를 전달하는 것이 가능하며</li>
<li>함수 자체를 리턴하는 것이 가능하다.</li>
</ul></li>
<li>warpping (함수 감싸기 )
<ul>
<li>파이썬은 함수 안에 함수를 선언하는 것이 가능</li>
<li>함수의 인자로 함수를 전달하는 것이 가능</li>
<li>함수 자체를 리턴하는 것이 가능<br>
<img src="kmink3225.netlify.app/images/airflow/function-encompassion.PNG" class="img-fluid" alt="함수 감싸기1"></li>
<li>함수 감싸기 예시<br>
<img src="kmink3225.netlify.app/images/airflow/function-encompassion2.PNG" class="img-fluid" alt="함수 감싸기2">
<ul>
<li><code>get_data()</code> 함수 안에 log를 쌓아야하는 상황</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">def get_data()</span>
<span id="cb5-2">    print('function starts working')</span></code></pre></div>
<ul>
<li>log는 간단하게 여기서 <code>print('target 함수 실행 전 입니다.')</code> 와 <code>print('target 함수 실행 후 입니다.')</code> 라고 설정</li>
<li><code>get_data()</code> 함수 안에 log를 쌓는 python code를 작성하는 것이 아니라 <code>get_data()</code> 를 인수로 받는 warpping function, <code>outer_func(target_func)</code>을 만든다</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">def outer_func(target_func):</span>
<span id="cb6-2">    def inner_func():</span>
<span id="cb6-3">        print('target 함수 실행 전 입니다.')</span>
<span id="cb6-4">        print('function starts working')</span>
<span id="cb6-5">        print('target 함수 실행 후 입니다.')</span>
<span id="cb6-6">    return inner_func</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">a=outer_func(get_data) </span>
<span id="cb7-2">a() # get_data()을 인수로 받은 inner_func()이 출력된다.</span></code></pre></div></li>
<li>wrapping 함수의 장점
<ul>
<li><code>get_data()</code>와 같은 target function이 수 백개가 되면 수 백개의 log정보를 수 백개의 target functions에 기입해야한다. wrapping 함수를 사용하면 코드의 재사용이 가능해진다.</li>
</ul></li>
<li>wrapping 함수의 단점
<ul>
<li><code>get_data()</code>와 같은 target function이 수 백개가 되면 <code>a=outer_func(get_data1);a()</code>, <code>a=outer_func(get_data2);a()</code>, <img src="https://latex.codecogs.com/png.latex?%5Cdots">,<code>a=outer_func(get_data100);a()</code> 이런식으로 만들어야 함.</li>
<li>이런 단점을 보완한 것이 decorator</li>
</ul></li>
</ul></li>
<li>decorator<br>
<img src="kmink3225.netlify.app/images/airflow/function-decorator.PNG" class="img-fluid" alt="Decorator">
<ul>
<li><code>@outer_func</code> 을 target function위에 작성</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">@outer_func</span>
<span id="cb8-2">def get_data()</span>
<span id="cb8-3">    print('function starts working')</span></code></pre></div>
<ul>
<li>이렇게, decoration을 하게 되면 <code>get_data1();get_data2();get_data3()</code> 만 실행하면 자동으로 <code>outer_func()</code>이 실행됨<br>
<img src="kmink3225.netlify.app/images/airflow/function-decorator2.PNG" class="img-fluid" alt="Decorator2"></li>
</ul></li>
<li>task decorator in airflow
<ul>
<li>airflow에도 비슷한 기능이 있는데 파이썬 함수 정의만으로 쉽게 Task 생성<br>
<img src="kmink3225.netlify.app/images/airflow/function-decorator3.PNG" class="img-fluid" alt="Decorator3"></li>
</ul></li>
<li>airflow official document에서는 PythonOperator Import해서 DAG을 만드는 것 보다 task decorator를 사용하는 것을 더 권장
<ul>
<li>실제로, airflow web service에서 <code>example_python_operator</code> DAG을 보면 <code>example_python_deocartor</code>라고 이름이 안지어졌는데도 decorator 예시가 바로 나옴.</li>
<li>왜냐면, 나중에 task간에 data를 공유할 때 task decorator를 사용하면 PythonOperator를 사용하면 data 공유가 한결 더 쉬워진다.</li>
<li>task decorator를 사용하면 task connection 을 작성할 필요가 없어짐</li>
<li>task decorator dag 예시</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">from airflow import DAG</span>
<span id="cb9-2">import pendulum</span>
<span id="cb9-3">from airflow.decorators import task</span>
<span id="cb9-4"></span>
<span id="cb9-5">with DAG(</span>
<span id="cb9-6">    dag_id="dags_python_decorator",</span>
<span id="cb9-7">    schedule='0 2 * * 1', #매주 월요일 2시 실행</span>
<span id="cb9-8">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb9-9">    catchup=False,</span>
<span id="cb9-10">) as dag:</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id="python_task1")</span></span>
<span id="cb9-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def print_context(some_input):</span></span>
<span id="cb9-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(some_input)</span></span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_task1 = print_context('task decorator execution!') #인수(argument) 추가</span></span></code></pre></div></li>
</ul>
</section>
<section id="python-operator-with-op_args-parameter" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python Operator with op_args Parameter</h1>
<section id="python-function-parameter" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-function-parameter"><span class="header-section-number">4.1</span> Python Function Parameter</h2>
<ul>
<li>일반적인 함수 인자 작성 방법</li>
</ul>
<pre><code>def regist(name, sex):
    print(name)
    print(sex)

regist('kkm','man')</code></pre>
<ul>
<li>But, 호출하는 로직에서 몇 개의 파라미터를 넘길지 모를 때 또는 파라미터의 개수를 제한하지 않으려면?</li>
<li>또는 선택적으로 변수를 받을 수도 있을 때는? (가령, 주소와 전화번호)</li>
<li>파이썬 함수에서 인수 형태는 크게 3가지가 있음
<ul>
<li>일반 변수 형태를 명시적으로 받는 것: <code>name</code>, <code>sex</code></li>
<li>*argument 방식: <code>*args</code></li>
<li>**keyword_arguement 방식: <code>**kwargs</code></li>
</ul></li>
</ul>
</section>
<section id="arguement-arg" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="arguement-arg"><span class="header-section-number">4.2</span> Arguement: *arg</h2>
<pre><code>def regist(name, sex, *args): 
    #name, sex: 필수 정보로 설정
    #*args: 부가 정보로 설정
    print(type(args)) #tuple로 되어 있음, tuple에서 값을 꺼낼때는 index로 접근
    country = args[0] if len(args)&gt;=1 else None #부가 정보가 없을때는 error가 발생하기 때문에 조건문을 달아줌. 즉, args의 길이가 1이상일때만 1번째 값을 꺼냄.
    city = args[1] if len(args)&gt;=2 else None

regist('gdhong','man') #필수 정보만 입력
regist('gdhong','man','korea','seoul') #필수 정보 + 부가 정보</code></pre>
<ul>
<li><code>regist('gdhong','man')</code> 은 <code>name='gdhong'</code> 과 <code>sex='man'</code></li>
<li><code>regist('gdhong','man','korea','seoul')</code> 은 <code>name='gdhong'</code> 과 <code>sex='man'</code>. <code>'korea','seoul'</code> 는 <code>*args</code>가 catch한다. 이 경우에, <code>name</code>과 <code>sex</code>는 필수 정보 <code>*args</code>는 부가 정보의 개념</li>
<li><code>args</code>로 들어온 값은 tuple 저장된다.</li>
<li><code>args</code>에서 값을 꺼낼 때는 인덱스를 이용한다 (ex: <code>args[0]</code> , <code>args[1]</code>)</li>
<li><code>args</code>라는 이름 외 다른 이름으로 받아도 됨 (ex: <code>some_func(*kk):</code>)</li>
</ul>
</section>
<section id="argument-kwargs" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="argument-kwargs"><span class="header-section-number">4.3</span> Argument: **kwargs</h2>
<pre><code>def some_func(**kwargs):
    print(type(kwargs)) # dictionary type
    print(kwargs)
    name = kwargs.get('name') or '' #dictionary 값을 얻을 때는 get('key value') 씀
    country = kwargs.get('country') or '' # 'country' key 없으면 none이 반환됨
    print(f'name:{name}, country:{country}')

some_func(name=’hjkim’, country=’kr’)</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
방어 로직
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>dict = {'name'='kkm'}</code> 라고 dictionary 선언 후, <code>kkm</code>이라는 dictionary의 value을 꺼낼때, <code>dict['name']</code>로 값을 호출하면 <code>name</code> 이라는 키가 없을 때 에러가 발생.</li>
<li>이 때 <code>dict.get('name')</code> 으로 시도하면 <code>name</code> 이라는 키가 없을 때 에러나지 않고 <code>None</code>이 반환되어 상대적으로 안전.</li>
<li><code>dict.get('name')</code> or <code>''</code> 의 의미는 <code>name</code> 이라는 키가 있으면 <code>value</code>를 꺼내오고 키가 없으면 빈 문자 열(<code>''</code>)을 받는다는 의미.</li>
</ul>
</div>
</div>
</section>
<section id="mixed-usage-arg-kwargs" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="mixed-usage-arg-kwargs"><span class="header-section-number">4.4</span> Mixed Usage: *arg &amp; **kwargs</h2>
<pre><code>def regist(name, sex, *args, **kwargs):
    print(name)
    print(sex)
    print(args)
    print(kwargs)

regist('kkm', 'man', 'korea', 'seoul', phone=010, email='kkm@naver.com')</code></pre>
<ul>
<li>함수의 인수에 잘 작동원리
<ul>
<li>*,** 가 없는 인수는 <code>name</code>과 <code>sex</code>로 고정 되어 있기 때문에 아무리 많은 인수값이 오더라도 첫 2개는 <code>name</code>과 <code>sex</code>에 무조건 할당 됨.</li>
<li>나머지 인수값 중 <code>'key':'value'</code> 형태가 아닌 것은 모두 <code>*arg</code>에 할당됨. (즉, ‘korea’, ‘seoul’)</li>
<li><code>'key':'value'</code> arugments는 <code>**kwargs</code>에 할당된다. (즉, phone=010, email=‘kkm@naver.com’)</li>
</ul></li>
</ul>
</section>
<section id="python-operator-op_args-usage" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="python-operator-op_args-usage"><span class="header-section-number">4.5</span> Python Operator: op_args Usage</h2>
<section id="함수에-일반-변수만-있을-경우" class="level3" data-number="4.5.1">
<h3 data-number="4.5.1" class="anchored" data-anchor-id="함수에-일반-변수만-있을-경우"><span class="header-section-number">4.5.1</span> 함수에 일반 변수만 있을 경우</h3>
<pre><code>def regist(name, sex):
    print(f'이름은 {name}이고 성별은 {sex}입니다')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=['hjkim','man'] #list로 작성되고 regist()의 인수값으로 사용된다. 
    #'hjkim'과 'man'은 각 각 regist()의 name과 sex에 할당된다.
)</code></pre>
</section>
<section id="함수에-일반-변수-args도-있을-경우" class="level3" data-number="4.5.2">
<h3 data-number="4.5.2" class="anchored" data-anchor-id="함수에-일반-변수-args도-있을-경우"><span class="header-section-number">4.5.2</span> 함수에 일반 변수 + *args도 있을 경우</h3>
<section id="common-function-example" class="level4" data-number="4.5.2.1">
<h4 data-number="4.5.2.1" class="anchored" data-anchor-id="common-function-example"><span class="header-section-number">4.5.2.1</span> Common Function Example</h4>
<pre><code>def regist(name, sex, *args):
    print(name) # string 형태로
    print(sex) # string 형태로
    print(args) # tuple 형태로  출력 됨

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=[‘hjkim’,’man’,’kr’,’seoul’] # ‘hjkim’,’man’ 는 name과 sex에 ,’kr’,’seoul’는 *args에 할당된다.
)</code></pre>
</section>
</section>
<section id="함수에-args만-있을-경우" class="level3" data-number="4.5.3">
<h3 data-number="4.5.3" class="anchored" data-anchor-id="함수에-args만-있을-경우"><span class="header-section-number">4.5.3</span> 함수에 *args만 있을 경우</h3>
<pre><code>def regist(*args):
    print(args) # tuple 형태로  출력 됨

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=[‘hjkim’,’man’,’kr’,’seoul’] # ‘hjkim’,’man’,’kr’,’seoul’는 *args에 할당된다.
)</code></pre>
</section>
<section id="함수에-args만-있을-경우-1" class="level3" data-number="4.5.4">
<h3 data-number="4.5.4" class="anchored" data-anchor-id="함수에-args만-있을-경우-1"><span class="header-section-number">4.5.4</span> 함수에 *args만 있을 경우</h3>
<section id="common-function-example-1" class="level4" data-number="4.5.4.1">
<h4 data-number="4.5.4.1" class="anchored" data-anchor-id="common-function-example-1"><span class="header-section-number">4.5.4.1</span> Common Function Example</h4>
<pre><code>def regist(*args):
    print(args) # tuple 인 ('hjkim','man','kr','seoul')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=['hjkim','man','kr','seoul'] # 모두 *args에 할당된다.
)</code></pre>
</section>
<section id="dag" class="level4" data-number="4.5.4.2">
<h4 data-number="4.5.4.2" class="anchored" data-anchor-id="dag"><span class="header-section-number">4.5.4.2</span> DAG</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1">from airflow import DAG</span>
<span id="cb18-2">import pendulum</span>
<span id="cb18-3">import datetime</span>
<span id="cb18-4">from airflow.operators.python import PythonOperator</span>
<span id="cb18-5">from common.common_func import regist</span>
<span id="cb18-6">with DAG(</span>
<span id="cb18-7">    dag_id="dags_python_with_op_args",</span>
<span id="cb18-8">    schedule="30 6 * * *",</span>
<span id="cb18-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb18-10">    catchup=False</span>
<span id="cb18-11">) as dag:</span>
<span id="cb18-12">    </span>
<span id="cb18-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist_t1 = PythonOperator(</span></span>
<span id="cb18-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='regist_t1',</span></span>
<span id="cb18-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=regist,</span></span>
<span id="cb18-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_args=['hjkim','man','kr','seoul']</span></span>
<span id="cb18-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb18-18"></span>
<span id="cb18-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist_t1</span></span></code></pre></div>
</section>
</section>
</section>
<section id="python-operator-op_kwargs-usage" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="python-operator-op_kwargs-usage"><span class="header-section-number">4.6</span> Python Operator: op_kwargs Usage</h2>
<section id="함수에-일반-변수만-있을-경우-1" class="level3" data-number="4.6.1">
<h3 data-number="4.6.1" class="anchored" data-anchor-id="함수에-일반-변수만-있을-경우-1"><span class="header-section-number">4.6.1</span> 함수에 일반 변수만 있을 경우</h3>
<pre><code>def regist(name, sex):
    print(f'이름은 {name}이고 성별은 {sex}입니다')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man'} #dictonary 형태로 작성
    # regist(name,sex)의 argument 가 name, sex이고 op_kwargs의 key 값에 regist(name,sex)의 argument를 똑같이 작성해준다.
)</code></pre>
</section>
<section id="함수에-일반-변수-kwargs도-있을-경우" class="level3" data-number="4.6.2">
<h3 data-number="4.6.2" class="anchored" data-anchor-id="함수에-일반-변수-kwargs도-있을-경우"><span class="header-section-number">4.6.2</span> 함수에 일반 변수 + *kwargs도 있을 경우</h3>
<pre><code>def regist(name, sex, **kwargs):
    print(name)
    print(sex)
    print(kwargs) # dictionary 형태로 출력됨

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man',\
    'country':'kr','city':'seoul'} # op_kwargs의 key값 중 name과 sex는 regist()의 인수명과 일치하므로 자동적으로 연결되어 regist()의 name과 sex에 할당되고 country와 city는 **kwargs에 할당된다.
)</code></pre>
</section>
<section id="함수에-kwargs만-있을-경우" class="level3" data-number="4.6.3">
<h3 data-number="4.6.3" class="anchored" data-anchor-id="함수에-kwargs만-있을-경우"><span class="header-section-number">4.6.3</span> 함수에 *kwargs만 있을 경우</h3>
<pre><code>def regist(**kwargs):
    name=kwargs['name'] or ''
    sex=kwargs['sex'] or ''
    country = kwargs['country'] or ''
    city = kwargs['city'] or ''
    print(f'name은 {name}이고, \
        성별은 {sex}이고, \
        국가는 {country} 이고, \
        도시는 {city} 입니다.')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man',\
    'country':'kr',city:'seoul'}
)</code></pre>
</section>
<section id="함수에-일반-변수-args-kwargs-모두-있을-경우" class="level3" data-number="4.6.4">
<h3 data-number="4.6.4" class="anchored" data-anchor-id="함수에-일반-변수-args-kwargs-모두-있을-경우"><span class="header-section-number">4.6.4</span> 함수에 일반 변수, <em>args, </em>kwargs 모두 있을 경우</h3>
<pre><code>def regist(name, sex, *args, **kwargs):
    print(name)
    print(sex)
    print(args)
    print(kwargs)

python_task_2 = PythonOperator(
    task_id='python_task_2',
    python_callable=regist,
    op_args=['hjkim','man','kr','seoul'], #name='hjkim', sex='man',**args=('kr','seoul')
    op_kwargs={'phone’:010,'email':'hjkim_sun@naver.com'} #**kwargs={'phone’:010,'email':'hjkim_sun@naver.com'}
)</code></pre>
<section id="dag-1" class="level4" data-number="4.6.4.1">
<h4 data-number="4.6.4.1" class="anchored" data-anchor-id="dag-1"><span class="header-section-number">4.6.4.1</span> DAG</h4>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb23-1">from airflow import DAG</span>
<span id="cb23-2">import pendulum</span>
<span id="cb23-3">import datetime</span>
<span id="cb23-4">from airflow.operators.python import PythonOperator</span>
<span id="cb23-5">from common.common_func import regist2</span>
<span id="cb23-6">with DAG(</span>
<span id="cb23-7">    dag_id="dags_python_with_op_kwargs",</span>
<span id="cb23-8">    schedule="30 6 * * *",</span>
<span id="cb23-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb23-10">    catchup=False</span>
<span id="cb23-11">) as dag:</span>
<span id="cb23-12">    </span>
<span id="cb23-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist2_t1 = PythonOperator(</span></span>
<span id="cb23-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='regist2_t1',</span></span>
<span id="cb23-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=regist2,</span></span>
<span id="cb23-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_args=['kkm','man','kr','seoul'],</span></span>
<span id="cb23-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'email':'kkm@naver.com','phone':'010-9999-9999'}</span></span>
<span id="cb23-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb23-19"></span>
<span id="cb23-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist2_t1</span></span></code></pre></div>
</section>
</section>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/04.python_operator.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Template Variabler</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/05.template_variable.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="jinja-template" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Jinja Template</h1>
<ul>
<li><p>Jinja는 Python에서 사용되는 인기 있는 템플릿 엔진으로 웹 프레임워크인 Flask와 종종 함께 사용되며, Django 템플릿 언어에 영향을 받았음.</p></li>
<li><p>Jinja를 사용하면 HTML 파일에 파이썬 코드를 삽입하여 동적인 웹 페이지를 쉽게 만들 수 있음</p></li>
<li><p>Jinja는 웹 개발을 더 효율적으로 만들어 주는 강력한 도구로 Python과 Flask 또는 Django와 같은 웹 프레임워크를 사용하는 개발자들에게 널리 사용되고 있음</p></li>
<li><p>template engine</p>
<ul>
<li>템플릿 엔진은 웹 개발에서 사용되는 소프트웨어 또는 라이브러리로, 프로그래머가 템플릿에 데이터를 삽입하여 동적인 웹 페이지를 생성할 수 있게 해줌</li>
<li>이러한 엔진의 주요 기능은 템플릿이라고 불리는 특정한 형식의 문서에서 변수들을 실제 값으로 바꾸는 것</li>
<li>쉽게 말해서 템플릿 엔진은 미리 정의된 문서 틀(템플릿)에 데이터를 채워 넣어 실제 사용자가 볼 수 있는 웹 페이지를 만드는 도구이다</li>
<li>예시: HTML 템플릿 파일 (예: template.html) + Python Flask 라우트 (예: app.py)</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">&lt;!DOCTYPE html&gt;</span>
<span id="cb1-2">&lt;html lang="en"&gt;</span>
<span id="cb1-3">&lt;head&gt;</span>
<span id="cb1-4">    &lt;meta charset="UTF-8"&gt;</span>
<span id="cb1-5">    &lt;title&gt;{{ title }}&lt;/title&gt;</span>
<span id="cb1-6">&lt;/head&gt;</span>
<span id="cb1-7">&lt;body&gt;</span>
<span id="cb1-8">    &lt;h1&gt;{{ heading }}&lt;/h1&gt;</span>
<span id="cb1-9">    &lt;p&gt;Welcome, {{ username }}!&lt;/p&gt;</span>
<span id="cb1-10">&lt;/body&gt;</span>
<span id="cb1-11">&lt;/html&gt;</span></code></pre></div>
<p>이 HTML 파일은 Jinja 템플릿을 사용하여 동적인 데이터를 표시한다. 여기서 {{ title }}, {{ heading }}, {{ username }}은 템플릿에서 치환될 변수들이다.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">from flask import Flask, render_template</span>
<span id="cb2-2"></span>
<span id="cb2-3">app = Flask(__name__)</span>
<span id="cb2-4"></span>
<span id="cb2-5">@app.route('/')</span>
<span id="cb2-6">def index():</span>
<span id="cb2-7">    return render_template('template.html', title='Home Page', heading='Welcome to My Website', username='Alice')</span>
<span id="cb2-8"></span>
<span id="cb2-9">if __name__ == '__main__':</span>
<span id="cb2-10">    app.run(debug=True)</span></code></pre></div>
<p>Flask 앱에서 render_template 함수를 사용하여 template.html 파일을 렌더링하고, title, heading, username 변수에 값을 전달. 이 값들은 사용자가 최종적으로 보는 웹 페이지에서 해당 위치에 표시됨.</p></li>
<li><p>template engine은 여러 솔루션이 존재하며 그 중 Jinja 템플릿은 파이썬 언어에서 사용하는 엔진</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">from jinja2 import Template # jinja2 library는 airflow 설치시 자동 설치됨</span>
<span id="cb3-2"></span>
<span id="cb3-3">template = Template('my name is {{name}}') #Template은 class, {{name}}은 변수</span>
<span id="cb3-4">new_template = template.render('name=kkm')</span>
<span id="cb3-5">print(new_template)</span></code></pre></div></li>
<li><p>Jinja 템플릿, 어디서 쓰이나?</p>
<ul>
<li>파이썬 기반 웹 프레임워크인 Flask, Django(장고)에서 주로 사용
<ul>
<li>예를 들어, HTML 형태의 정적 template 문서를 만들어 놓고 back end server의 처리 결과에 따라 값을 바꾸어 보여줄 때 jinja template engine이 사용될 수 있다. (주로 HTML 템플릿 저장 후 화면에 보여질 때 실제 값으로 변환해서 출력)</li>
</ul></li>
<li>SQL작성시에도 활용 가능
<ul>
<li>예를 들어, <code>select * from tables where base_dt = {{}}</code> 라는 SQL template을 만들어 넣고 jinja template engine을 이용해서 날짜 변수 <code>{{}}</code>에 runtime시 발생하는 실제 값을 할당할 수 있다. 이 예시는 tables에 있는 데이터가 매일 update될 때 base_dt라는 변수에 따라 데이터를 부분 선택할 수 있게 해준다.</li>
</ul></li>
</ul></li>
</ul>
<section id="airflow에서-사용법" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="airflow에서-사용법"><span class="header-section-number">1.1</span> Airflow에서 사용법</h2>
<ul>
<li>오퍼레이터 파라미터 입력시 중괄호 {} 2개(<code>{{}}</code>)를 이용하면 Airflow에서 기본적으로 제공하는 변수들(ex: 수행 날짜, DAG_ID)을 치환된 값으로 입력할 수 있음.
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html">airflow에서 제공하는 기본 variable list</a> or google ‘airflow templates reference’</li>
<li><code>{ data_interval_start }</code>: schedule 구간의 시작점을 반환, <code>pendulum.DateTime</code>는 timestamped type <strong>(중요)</strong></li>
<li><code>{ data_interval_end }</code>: schedule 구간의 끝점을 반환 <strong>(중요)</strong></li>
<li><code>{ ds }</code>: <code>{ data_interval_start }</code>의 value를 string 형태(‘YYYY-MM-DD’)로 반환 <strong>(중요)</strong></li>
<li><code>{ ds_nodash }</code>: <code>{ds}</code>를 string 형태(‘YYYYMMDD’) 로 반환</li>
<li><code>{ ts }</code>: timestamped 의 약자로 <code>{ data_interval_start }</code>를 string 형태(‘YYYY-MM-DD T00:00:00+00:00’) 로 반환</li>
<li><code>{ ts_nodash_with_tz }</code>: timestamped 의 약자로 <code>{ ts }</code>를 string 형태(‘YYYYMMDDT000000+0000’) 로 반환</li>
<li><code>{ ts_nodash  }</code>: timestamped 의 약자로 <code>{ts}</code>를 string 형태(‘YYYYMMDDT000000’) 로 반환</li>
</ul></li>
<li>모든 오퍼레이터, 모든 파라미터에 Template 변수 <strong>적용 가능하지는 않음!</strong></li>
<li><a href="https://airflow.apache.org/docs/apacheairflow/stable/_api/airflow/operators/index.html">Airflow 문서에서 어떤 파라미터에 Template 변수 적용 가능한지 확인 필요</a> or <strong>google airflow operators</strong>
<ul>
<li>operator 설명란에 parameters 란에 각 parameter의 설명 부분 맨 끝에 (<strong>templated</strong>) 라고 적혀 있는 parameter는 jinja template 사용 가능. template_fields에 요약되어 있음</li>
<li>예를 들어, airflow.operators.bash 에서 <code>Parameters</code>를 보면
<ul>
<li>bash_command (str) – The command, set of commands or reference to a bash script (must be ‘.sh’) to be executed. <strong>(templated)</strong> - jinja template 사용 가능</li>
<li>env (dict[str, str] | None) – If env is not None, it must be a dict that defines the environment variables for the new process; these are used instead of inheriting the current process environment, which is the default behavior. <strong>(templated)</strong> - jinja template 사용 가능</li>
<li>append_env (bool) – If False(default) uses the environment variables passed in env params and does not inherit the current process environment. If True, inherits the environment variables from current passes and then environment variable passed by the user will either update the existing inherited environment variables or the new variables gets appended to it - 사용 불가</li>
<li>output_encoding (str) – Output encoding of bash command - 사용 불가</li>
<li>skip_on_exit_code (int | Container[int] | None) – If task exits with this exit code, leave the task in skipped state (default: 99). If set to None, any non-zero exit code will be treated as a failure. - 사용 불가</li>
<li>cwd (str | None) – Working directory to execute the command in. If None (default), the command is run in a temporary directory. - 사용 불가</li>
<li>template_fields: Sequence[str]= (‘bash_command’, ‘env’)[source]</li>
</ul></li>
<li>하지만, parameter 설명란과 template_fields에 template 변수가 일치하지 않을 수 있음. 그럴 땐 <strong>template_fiedls를 기준으로 함</strong></li>
<li>예를 들어, airflow.operators.python에서 <code>Parameters</code>를 보면 아래와 같이 <code>templates_dict</code>만 사용 가능한 것 처럼 보이지만 template_fields를 보면 <code>op_kwargs</code> 와 <code>op_args</code>도 jinja template으로 사용 가능한 것을 알 수 있다.
<ul>
<li>python_callable (Callable) – A reference to an object that is callable</li>
<li>op_kwargs (Mapping[str, Any] | None) – a dictionary of keyword arguments that will get unpacked in your function</li>
<li>op_args (Collection[Any] | None) – a list of positional arguments that will get unpacked when calling your callable</li>
<li>templates_dict (dict[str, Any] | None) – a dictionary where the values are templates that will get templated by the Airflow engine sometime between <code>__init__</code>and execute takes place and are made available in your callable’s context after the template has been applied. <strong>(templated)</strong> - 사용 가능</li>
<li>templates_exts (Sequence[str] | None) – a list of file extensions to resolve while processing templated fields, for examples [‘.sql’, ‘.hql’]</li>
<li>show_return_value_in_logs (bool) – a bool value whether to show return_value logs. Defaults to True, which allows return value log output. It can be set to False to prevent log output of return value when you return huge data such as transmission a large amount of XCom to TaskAPI.</li>
<li>template_fields: Sequence[str]= (‘templates_dict’, ‘op_args’, ‘op_kwargs’)[source]</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="bashoperator-with-template" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> BashOperator with Template</h1>
<section id="bashoperator" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="bashoperator"><span class="header-section-number">2.1</span> BashOperator</h2>
<ul>
<li><blockquote class="blockquote">
<blockquote class="blockquote">
<p>recap) Bash 오퍼레이터는 어떤 파라미터에 Template를 쓸 수 있는가?</p>
</blockquote>
</blockquote></li>
<li>파라미터
<ul>
<li>bash_command (str) (templated)</li>
<li>env (dict[str, str] | None) (templated)</li>
<li>append_env (bool)</li>
<li>output_encoding (str)</li>
<li>skip_exit_code (int)</li>
<li>cwd (str | None)</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">bash_t1 = BashOperator(</span>
<span id="cb4-2">    task_id='bash_t1',</span>
<span id="cb4-3">    bash_command='echo "End date is {{ data_interval_end }}"'</span>
<span id="cb4-4">)</span>
<span id="cb4-5">bash_t2 = BashOperator(</span>
<span id="cb4-6">    task_id='bash_t2',</span>
<span id="cb4-7">    env={'START_DATE': '{{ data_interval_start | ds}}','END_DATE':'{{ data_interval_end | ds }}'},</span>
<span id="cb4-8">    bash_command='echo "Start date is $START_DATE " &amp;&amp; ''echo "End date is $END_DATE"'</span>
<span id="cb4-9">)</span></code></pre></div>
<ul>
<li><p>DAG Full example ```markdown from airflow import DAG import pendulum import datetime from airflow.operators.bash import BashOperator</p>
<p>with DAG( dag_id=“dags_bash_with_template”, schedule=“10 0 * * *“, start_date=pendulum.datetime(2023, 3, 1, tz=”Asia/Seoul”), catchup=False ) as dag: bash_t1 = BashOperator( task_id=‘bash_t1’, bash_command=‘echo “data_interval_end: {{ data_interval_end }}”’ )</p>
<pre><code>  bash_t2 = BashOperator(
      task_id='bash_t2',
      env={
          'START_DATE':'{{data_interval_start | ds }}', #| ds: time stamped type을 YYYY-MM-DD로 변환
          'END_DATE':'{{data_interval_end | ds }}' #| ds: time stamped type을 YYYY-MM-DD로 변환
      },
      bash_command='echo $START_DATE &amp;&amp; echo $END_DATE' #shell script syntax: statement1 &amp;&amp; statement2
      # statment1이 성공하면 statement2를 실행한다.
  )

  bash_t1 &gt;&gt; bash_t2</code></pre>
<p>```</p>
<ul>
<li>Airflow Web Service Result
<ul>
<li><code>[2023-06-17, 01:00:00 UTC] {taskinstance.py:1327} INFO - Executing &lt;Task(BashOperator): bash_t1&gt; on 2023-06-15 15:10:00+00:00</code> 에서 <code>2023-06-15 15:10:00+00:00</code>의 <code>+</code>뒤는 time zone을 의미. <code>00:00</code> 이면 utc (세계 표준시로 한국 보다 9시간 느림)를 의미. 한국 시간으로 변환하려면 9시간을 더해야한다. 즉, <code>2023-06-16 00:10:00</code>이 한국 서울 시간임</li>
<li></li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:75} INFO - Running command: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'/bin/bash', '-c', 'echo $START_DATE &amp;&amp; echo $END_DATE'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:86} INFO - Output:</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:93} INFO - 2023-06-15</span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:93} INFO - 2023-06-16`</span></code></pre></div></li>
</ul></li>
</ul>
</section>
</section>
<section id="airflow-date-concept" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Airflow Date Concept</h1>
<section id="데이터-추출-예시" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="데이터-추출-예시"><span class="header-section-number">3.1</span> 데이터 추출 예시</h2>
<ul>
<li>상황
<ul>
<li>Daily ETL 처리를 위한 조회 쿼리(2023/02/25 0시 실행- 매일 00:00에 데이터 가져오기)</li>
<li>전체 data는 너무 많기 때문에 증분된 데이터만 가져오기. 즉 오늘이 2023/02/25 라면 2023/02/24 와 2023/02/25 사이에 있는 data만 가져온다.</li>
</ul></li>
<li>example: 등록 테이블</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>REG_DATE</th>
<th style="text-align: center;">NAME</th>
<th style="text-align: center;">ADDRESS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2023-02-24 15:34:35</td>
<td style="text-align: center;">홍길동</td>
<td style="text-align: center;">Busan</td>
</tr>
<tr class="even">
<td>2023-02-24 19:14:42</td>
<td style="text-align: center;">김태희</td>
<td style="text-align: center;">Seoul</td>
</tr>
<tr class="odd">
<td>2023-02-24 23:52:19</td>
<td style="text-align: center;">조인성</td>
<td style="text-align: center;">Daejeon</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">SELECT NAME, ADDRESS</span>
<span id="cb7-2">FROM TBL_REG</span>
<span id="cb7-3">WHERE REG_DATE BETWEEN TIMESTAMP('2023-02-24 00:00:00')</span>
<span id="cb7-4">AND TIMESTAMP('2023-02-24 23:59:59')</span></code></pre></div>
<ul>
<li>생각해볼 point: 각 관점에 따라 날짜가 다름
<ul>
<li>데이터 관점의 시작일: 2023-02-24</li>
<li>데이터 관점의 종료일: 2023-02-25</li>
<li>DAG이 실행되는 시점: 2023-02-25</li>
<li>airflow는 ETL을 위한 도구로 만들어졌기 때문에 data관점에서 전처리를 하는 사상이 담겨져 있다.</li>
</ul></li>
</ul>
</section>
<section id="airflow-날짜-template-변수" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="airflow-날짜-template-변수"><span class="header-section-number">3.2</span> Airflow 날짜 Template 변수</h2>
<ul>
<li>예시: 일 배치
<ul>
<li>ex. 2023-02-24 이전 배치일 (논리적 기준일)
<ul>
<li>= data_interval_start (airflow new version - from 2.5.2 version)</li>
<li>= dag_run.logical_date</li>
<li>= ds (yyyy-mm-dd 형식)</li>
<li>= ts (타임스탬프)</li>
<li>= execution_date (airflow old version - until 2.5.1 version)</li>
<li>위와 같이 airflow의 대부분의 변수들이 논리적 기준일을 데이터 관점의 시작일을 기준으로 한다.</li>
<li>execution_date 라는 명명법이 너무 혼란스러웠음 실행 날짜란 의미는 대부분의 사람들이 dag이 실행되는 날로 인식을 하는데 data관점에서 날짜를 출력함. 그래서 data_interval_start로 변수명을 바꿈</li>
</ul></li>
<li>ex. 2023-02-25 배치일 (DAG이 실행되는 날짜)
<ul>
<li>= data_interval_end (airflow new version - from 2.5.2 version)</li>
<li>=</li>
<li>=</li>
<li>=</li>
<li>= next_execution_date (airflow old version - until 2.5.1 version)</li>
<li>next execution_date 라는 명명법은 대부분의 사람들이 dag이 실행되는 날로 인식을 하기 때문에 혼란스러워서 data_interval_end로 바꿈. 왜냐면 현재 dag 실행 날짜가 next execution_date로 표시되고 그 이전 실행 날짜를 execution_date로 표기해서 실제 실행날짜와 변수 이름이 맞지가 않음.</li>
<li>그러므로, 배치가 돌고있는 현재 날짜를 출력하고 싶으면 data_interval_end에 접근해야하고 그 이전 배치의 날짜를 출력하고 싶으면 data_interval_start에 접근해야한다.</li>
</ul></li>
</ul></li>
<li>Full Exmaple
<ul>
<li>DAG</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># dags_bash_with_template.py</span></span>
<span id="cb8-2">from airflow import DAG</span>
<span id="cb8-3">import pendulum</span>
<span id="cb8-4">import datetime</span>
<span id="cb8-5">from airflow.decorators import task</span>
<span id="cb8-6"></span>
<span id="cb8-7">with DAG(</span>
<span id="cb8-8">    dag_id="dags_python_show_templates",</span>
<span id="cb8-9">    schedule="30 9 * * *",</span>
<span id="cb8-10">    start_date=pendulum.datetime(2023, 6, 10, tz="Asia/Seoul"),</span>
<span id="cb8-11">    catchup=True #catchup 할때 task 순서를 유념해서 연결시키지 않으면 dags실행을 pause/unpuase시 task들이 꼬일 수 있다.</span>
<span id="cb8-12">) as dag:</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_task')</span></span>
<span id="cb8-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def show_templates(**kwargs):</span></span>
<span id="cb8-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from pprint import pprint </span></span>
<span id="cb8-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pprint(kwargs) #pprint는 리스트나 딕셔너리를 줄넘김으로 이쁘게 출력해줌</span></span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    show_templates()</span></span></code></pre></div>
<ul>
<li>Airflow Web Service Result</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:40:17 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {logging_mixin.py:149} INFO - {'conf': &lt;***.configuration.AirflowConfigParser object at 0x7f668aeec910&gt;,</span>
<span id="cb9-2">'conn': None,</span>
<span id="cb9-3">'dag': &lt;DAG: dags_python_show_templates&gt;,</span>
<span id="cb9-4">'dag_run': &lt;DagRun dags_python_show_templates @ 2023-06-09 00:30:00+00:00: scheduled__2023-06-09T00:30:00+00:00, state:running, queued_at: 2023-06-17 01:40:15.833772+00:00. externally triggered: False&gt;,</span>
<span id="cb9-5">**'data_interval_end': DateTime(2023, 6, 10, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb9-6">**'data_interval_start': DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb9-7">**'ds': '2023-06-09',**</span>
<span id="cb9-8">**'ds_nodash': '20230609',**</span>
<span id="cb9-9">*'execution_date': &lt;Proxy at 0x7f665d530640 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'execution_date', DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb9-10">'expanded_ti_count': None,</span>
<span id="cb9-11">'inlets': [],</span>
<span id="cb9-12">**'logical_date': DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb9-13">'macros': &lt;module '***.macros' from '/home/***/.local/lib/python3.7/site-packages/***/macros/__init__.py'&gt;,</span>
<span id="cb9-14">*'next_ds': &lt;Proxy at 0x7f665d530690 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_ds', '2023-06-10')&gt;*,</span>
<span id="cb9-15">*'next_ds_nodash': &lt;Proxy at 0x7f665d5306e0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_ds_nodash', '20230610')&gt;*,</span>
<span id="cb9-16">*'next_execution_date': &lt;Proxy at 0x7f665d530780 with factory functools.partial*(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_execution_date', DateTime(2023, 6, 10, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb9-17">'outlets': [],</span>
<span id="cb9-18">'params': {},</span>
<span id="cb9-19">'prev_data_interval_end_success': DateTime(2023, 6, 6, 0, 30, 0, tzinfo=Timezone('UTC')),</span>
<span id="cb9-20">'prev_data_interval_start_success': DateTime(2023, 6, 5, 0, 30, 0, tzinfo=Timezone('UTC')),</span>
<span id="cb9-21">*'prev_ds': &lt;Proxy at 0x7f665d5307d0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_ds', '2023-06-08')&gt;*,</span>
<span id="cb9-22">*'prev_ds_nodash': &lt;Proxy at 0x7f665d530820 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_ds_nodash', '20230608')&gt;*,</span>
<span id="cb9-23">*'prev_execution_date': &lt;Proxy at 0x7f665d530870 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_execution_date', DateTime(2023, 6, 8, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb9-24">*'prev_execution_date_success': &lt;Proxy at 0x7f665d5308c0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_execution_date_success', DateTime(2023, 6, 5, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb9-25">'prev_start_date_success': DateTime(2023, 6, 17, 1, 40, 15, 103936, tzinfo=Timezone('UTC')),</span>
<span id="cb9-26">'run_id': 'scheduled__2023-06-09T00:30:00+00:00',</span>
<span id="cb9-27">'task': &lt;Task(_PythonDecoratedOperator): python_task&gt;,</span>
<span id="cb9-28">'task_instance': &lt;TaskInstance: dags_python_show_templates.python_task scheduled__2023-06-09T00:30:00+00:00 [running]&gt;,</span>
<span id="cb9-29">'task_instance_key_str': 'dags_python_show_templates__python_task__20230609',</span>
<span id="cb9-30">'templates_dict': None,</span>
<span id="cb9-31">'test_mode': False,</span>
<span id="cb9-32">'ti': &lt;TaskInstance: dags_python_show_templates.python_task scheduled__2023-06-09T00:30:00+00:00 [running]&gt;,</span>
<span id="cb9-33">*'tomorrow_ds': &lt;Proxy at 0x7f665d530910 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'tomorrow_ds', '2023-06-10')&gt;*,</span>
<span id="cb9-34">*'tomorrow_ds_nodash': &lt;Proxy at 0x7f665d530960 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'tomorrow_ds_nodash', '20230610')&gt;*,</span>
<span id="cb9-35">'triggering_dataset_events': {},</span>
<span id="cb9-36">**'ts': '2023-06-09T00:30:00+00:00',**</span>
<span id="cb9-37">**'ts_nodash': '20230609T003000',**</span>
<span id="cb9-38">**'ts_nodash_with_tz': '20230609T003000+0000',**</span>
<span id="cb9-39">'var': {'json': None, 'value': None},</span>
<span id="cb9-40">*'yesterday_ds': &lt;Proxy at 0x7f665d5309b0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'yesterday_ds', '2023-06-08')&gt;*,</span>
<span id="cb9-41">*'yesterday_ds_nodash': &lt;Proxy at 0x7f665d530a00 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'yesterday_ds_nodash', '20230608')&gt;}*</span></code></pre></div>
<ul>
<li>위에서, 과거 혼란을 주는 변수들은 italic채로 표시를 했고 출력물을 보면 depreacted될 예정이라고 적혀져 있어 곧 안쓰일 예정이라고 적혀져 있다.</li>
<li>bold채로 쓰여진 출력물이 개선된 명명법으로 이름 붙여진 변수들인데 대부분의 시간들이 data관점에서 logical date를 선정한 것을 알 수 있다. dag 배치 실행 날짜를 보기 위해선 <code>data_interval_end</code>를 보면 2023-06-10이 실행 날짜인 것을 알 수 있다. logical date의 2023-06-10 이전 배치 실행 날짜이다.</li>
<li>실제 업무나 작업시 <code>data_interval_end</code>가 자주 쓰인다.</li>
</ul></li>
</ul>
</section>
</section>
<section id="python-operator-with-template" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python Operator with Template</h1>
<section id="python-operator에서-template-변수-사용" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-operator에서-template-변수-사용"><span class="header-section-number">4.1</span> Python Operator에서 Template 변수 사용</h2>
<ul>
<li><p>Python 오퍼레이터는 어떤 파라미터에 Template을 쓸 수 있는가?</p></li>
<li><p>파라미터</p>
<ul>
<li>python_callable</li>
<li>op_kwargs (templated)</li>
<li>op_args (templated)</li>
<li>templates_dict (templated)</li>
<li>templates_exts</li>
<li>show_return_value_in_logs</li>
</ul></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/python/index.html">Operator Template</a></p>
<ul>
<li>jinja template을 이용하여 runtime date를 얻을 때 2가지 방식이 있음
<ol type="1">
<li>함수를 만들어 op_kwargs에 jinja template 변수를 만들고 이 변수에 저장된 값을 꺼내 쓰는 법</li>
<li>**kwargs로부터 얻음 - 2번째 방법이 더 편한것 같지만 개인 취향에 따름</li>
</ol></li>
<li>함수를 만들어 jinja template를 이용해 연산<br>
</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">def python_function1(start_date, end_date, **kwargs):</span>
<span id="cb10-2">    print(start_date)</span>
<span id="cb10-3">    print(end_date)</span>
<span id="cb10-4"></span>
<span id="cb10-5">python_t1 = PythonOperator(</span>
<span id="cb10-6">    task_id='python_t1',</span>
<span id="cb10-7">    python_callable=python_function,</span>
<span id="cb10-8">    op_kwargs={'start_date':'{{data_interval_start | ds}}', 'end_date':'{{data_interval_end | ds}}'}</span>
<span id="cb10-9">)</span></code></pre></div>
<ul>
<li>파이썬 오퍼레이터는 **kwargs에 Template 변수들을 자동으로 제공해주고 있음</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">@task(task_id='python_t2')</span>
<span id="cb11-2">def python_function2(**kwargs):</span>
<span id="cb11-3">    print(kwargs)</span>
<span id="cb11-4">    print('ds:' + kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ds'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb11-5">    print('ts:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ts'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb11-6">    print('data_interval_start:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_start'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb11-7">    print('data_interval_end:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_end'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb11-8">    print('task_instance': + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb11-9">python_function2()</span></code></pre></div></li>
<li><p>Full Example</p>
<ul>
<li>DAGS</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow import DAG</span>
<span id="cb12-2">import pendulum</span>
<span id="cb12-3">import datetime</span>
<span id="cb12-4">from airflow.operators.python import PythonOperator</span>
<span id="cb12-5">from airflow.decorators import task</span>
<span id="cb12-6"></span>
<span id="cb12-7">with DAG(</span>
<span id="cb12-8">    dag_id="dags_python_template",</span>
<span id="cb12-9">    schedule="30 9 * * *",</span>
<span id="cb12-10">    start_date=pendulum.datetime(2023, 3, 10, tz="Asia/Seoul"),</span>
<span id="cb12-11">    catchup=False</span>
<span id="cb12-12">) as dag:</span>
<span id="cb12-13"></span>
<span id="cb12-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_function1(start_date, end_date, **kwargs):</span></span>
<span id="cb12-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(start_date)</span></span>
<span id="cb12-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(end_date)</span></span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_t1 = PythonOperator(</span></span>
<span id="cb12-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='python_t1',</span></span>
<span id="cb12-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=python_function1,</span></span>
<span id="cb12-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'start_date':'{{data_interval_start | ds}}', 'end_date':'{{data_interval_end | ds}}'}</span></span>
<span id="cb12-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_t2')</span></span>
<span id="cb12-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_function2(**kwargs):</span></span>
<span id="cb12-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs)</span></span>
<span id="cb12-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('ds:' + kwargs['ds'])</span></span>
<span id="cb12-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('ts:' + kwargs['ts'])</span></span>
<span id="cb12-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('data_interval_start:' + str(kwargs['data_interval_start']))</span></span>
<span id="cb12-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('data_interval_end:' + str(kwargs['data_interval_end']))</span></span>
<span id="cb12-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('task_instance:' + str(kwargs['ti']))</span></span>
<span id="cb12-32"></span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_t1 &gt;&gt; python_function2() #decorator사용시 함수를 실행주기만 해도 task가 생성되기 때문에 함수를 task로 연결할 수 있다.</span></span></code></pre></div>
<ul>
<li>Airflow Web Service Result</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"></code></pre></div>
<h1 id="bash-operator-with-macro" data-number="5"><span class="header-section-number">5</span> Bash Operator with Macro</h1></li>
</ul>
</section>
<section id="macro-변수의-이해" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="macro-변수의-이해"><span class="header-section-number">5.1</span> Macro 변수의 이해</h2>
<ul>
<li><p>jinja template 안에서 날짜 연산을 가능하게 해주는 기능</p>
<ul>
<li>파이썬의 datetime + dateutil library로 가능</li>
</ul></li>
<li><p>Macro 변수의 필요성</p>
<ul>
<li>가령, 어떤 DAG의 스케줄은 매일 말일에 도는 스케줄 (0 0 L * *)인데 BETWEEN 값을 전월 마지막일부터 어제 날짜까지 주고 싶은 상황. 즉,</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">sql = f'''</span>
<span id="cb14-2">SELECT NAME, ADDRESS</span>
<span id="cb14-3">FROM TBL_REG</span>
<span id="cb14-4">WHERE REG_DATE BETWEEN ?? AND ??</span>
<span id="cb14-5">'''</span></code></pre></div>
<p>날짜 구간을 hard coding 해놓는게 아니라 DAG이 도는 시점에 따라 알맞게 들어가야 함.</p>
<p>예를 들어, 배치일이 1월 31일이면 12월 31일부터 1월 30일 까지 배치일이 2월 28일이면 1월 31일부터 2월 27일까지 BETWEEN 이 설정되어야함 DAG 스케줄이 월 단위이니까 Template 변수에서 data_interval_start 값은 한달 전 말일이니까 시작일은 해결될 것 같은데 끝 부분은 어떻게 만들지 생각해봐야함 (반드시, data_interval_end 에서 하루 뺀 값이 나와야 하는데)</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">sql = f'''</span>
<span id="cb15-2">SELECT NAME, ADDRESS</span>
<span id="cb15-3">FROM TBL_REG</span>
<span id="cb15-4">WHERE REG_DATE BETWEEN {{ data_interval_start }} AND {{ data_interval_start }} - 1day</span>
<span id="cb15-5">'''</span></code></pre></div>
<p><code>{ data_interval_start } - 1day</code> 이 부분 연산을 하는데 macro 변수가 쓰임</p></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#macros">Template 변수 기반 다양한 날짜 연산이 가능하도록 연산 모듈을 제공하고 있음</a></p>
<table class="table">
<colgroup>
<col style="width: 40%">
<col style="width: 60%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>macros.datetime</strong></td>
<td>The standard lib’s datetime.datetime, python의 datetime library 를 이용가능하게 하거나 datetime library를 template 변수내에서 날짜 연산 기능</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.timedelta</td>
<td>The standard lib’s datetime.timedelta, 날짜 연산 기능</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><strong>macros.dateutil</strong></td>
<td>A reference to the dateutil package, python의 dateutil library를 이용가능하게 하거나 dateutil library를 template 변수내에서 이용가능하게 하여 날짜 연산 기능</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.time</td>
<td>The standard lib’s time, 날짜 연산 기능</td>
</tr>
<tr class="odd">
<td style="text-align: center;">macros.uuid</td>
<td>The standard lib’s uuid, 고유 ID 부여</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.random</td>
<td>The standard lib’s random, python rand() 사용가능하게 해줌</td>
</tr>
</tbody>
</table>
<ul>
<li>macros.datetime &amp; macros.dateutil: 날짜 연산에 유용한 파이썬 라이브러리, 매우 빈번하게 쓰임</li>
<li>예를 들어, <code>macros.dateutil</code>에서 relativedelta.relativedelta() 함수를 쓸수 있도록 해줌. <code>macros.dateutil.relativedelta.relativedelta()</code></li>
</ul></li>
<li><p>Macro를 잘 쓰려면 python의 datetime 및 dateutil library에 익숙해져야 함.</p></li>
</ul>
</section>
<section id="파이썬-datetime-dateutil-라이브러리-이해" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="파이썬-datetime-dateutil-라이브러리-이해"><span class="header-section-number">5.2</span> 파이썬 datetime + dateutil 라이브러리 이해</h2>
<ul>
<li>만약, jupyter notebook (대화형 입력창)이 없는 환경인데 jupyter notebook에서 python을 실행하고 싶으면 terminal에 다음 명령어를 실행해서 설치
<ul>
<li>대화형 입력창: 일련의 명령어들을 한번에 실행시키는 script code 형식이 아니라 명령어 한줄마다 결과값을 볼 수 있는 창</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1">pip install jupyter # 약 5분 소요</span>
<span id="cb16-2">python -m notebook</span></code></pre></div>
<div id="d24559cc" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dateutil <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> relativedelta</span>
<span id="cb17-3"></span>
<span id="cb17-4">now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2003</span>, month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb17-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current time:'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(now))</span>
<span id="cb17-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------month operation-------------'</span>)</span>
<span id="cb17-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#월을 1월로 변경하는 명령어, relativedelta library 사용</span></span>
<span id="cb17-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now.replace(month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 월을 1월로 변경하는 명령어, datetime library 사용, print(now+relativedelta.relativedelta(month=1)) 와 같은 명령어</span></span>
<span id="cb17-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1개월 빼기: 먼저 month 값에서 1을 빼고 그 결과 값(month)의 가장 가까운 말일을 자동으로 선택해줌</span></span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------day operation-------------'</span>)</span>
<span id="cb17-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일로 변경</span></span>
<span id="cb17-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now.replace(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일로 변경</span></span>
<span id="cb17-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일 빼기</span></span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------multiple operations-------------'</span>)</span>
<span id="cb17-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1개월, 1일 빼기. relativedelta library장점이 연산 연러개를 이어 붙일 수 있음</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>current time:2003-03-30 00:00:00
-------------month operation-------------
2003-01-30 00:00:00
2003-01-30 00:00:00
2003-02-28 00:00:00
-------------day operation-------------
2003-03-01 00:00:00
2003-03-01 00:00:00
2003-03-29 00:00:00
-------------multiple operations-------------
2003-02-27 00:00:00</code></pre>
</div>
</div>
</section>
<section id="bash-오퍼레이터에서-macro-변수-활용하기" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="bash-오퍼레이터에서-macro-변수-활용하기"><span class="header-section-number">5.3</span> Bash 오퍼레이터에서 Macro 변수 활용하기</h2>
<ul>
<li><p>예시1. 매월 말일 수행되는 Dag에서 변수 START_DATE: 전월 말일, 변수 END_DATE: 어제로 env 셋팅하기</p></li>
<li><p>예시2. 매월 둘째주 토요일 (6#2)에 수행되는 Dag에서 변수 START_DATE: 2주 전 월요일 변수 END_DATE: 2주 전 토요일로 env 셋팅하기</p></li>
<li><p>변수는 YYYY-MM-DD 형식으로 나오도록 할 것</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1">t1 = BashOperator(</span>
<span id="cb19-2">    task_id='t1',</span>
<span id="cb19-3">    env={'START_DATE':''}, #env 변수에 template 변수를 작성</span>
<span id="cb19-4">)</span></code></pre></div></li>
</ul>
<p>이 부분에 template + macro 활용</p>
<ul>
<li>DAG 예시1.</li>
</ul>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1">from airflow import DAG</span>
<span id="cb20-2">import pendulum</span>
<span id="cb20-3">from airflow.operators.bash import BashOperator</span>
<span id="cb20-4"></span>
<span id="cb20-5">with DAG(</span>
<span id="cb20-6">    dag_id="dags_bash_with_macro_eg1",</span>
<span id="cb20-7">    schedule="10 0 L * *", #매월 말일날 도는 DAG</span>
<span id="cb20-8">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb20-9">    catchup=False</span>
<span id="cb20-10">) as dag:</span>
<span id="cb20-11">    # START_DATE: 전월 말일, END_DATE: 1일 전</span>
<span id="cb20-12">    bash_task_1 = BashOperator(</span>
<span id="cb20-13">        task_id='bash_task_1',</span>
<span id="cb20-14">        env={'START_DATE':'{{ data_interval_start.in_timezone("Asia/Seoul") | ds }}',</span>
<span id="cb20-15">                #template 변수에 꺼내쓰는 모든 날짜 변수는 default로 timezone이 UTC로 맞춰져있기 때문에 현지에 맞게 고쳐줘야한다. 한국 시간에 맞추려면 9시간을 더해야하는데, .in_timezone("Asia/Seoul")로 해결 가능</span>
<span id="cb20-16">                #data_interval_start.in_timezone("Asia/Seoul")는 timestamp형식으로 출력되기 때문에 yyyy-mm-dd로 출력하기위해 ds 연산 붙임</span>
<span id="cb20-17">             'END_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=1)) | ds}}'</span>
<span id="cb20-18">             # 연산자가 -로 되어 있이기 때문에  days=-1로 할필요없음</span>
<span id="cb20-19">        },</span>
<span id="cb20-20">        bash_command='echo "START_DATE: $START_DATE" &amp;&amp; echo "END_DATE: $END_DATE"'</span>
<span id="cb20-21">    )</span></code></pre></div>
<ul>
<li>예시2. DAG full Exmaple</li>
</ul>
<pre><code>from airflow import DAG
import pendulum
from airflow.operators.bash import BashOperator

with DAG(
    dag_id="dags_bash_with_macro_eg2",
    schedule="10 0 * * 6#2",
    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),
    catchup=False
) as dag:
    # START_DATE: 2주전 월요일, END_DATE: 2주전 토요일
    # 예를 들어, 2023-04-01 토요일은 첫째 주 토요일로 인식
    # 2023-04-08 토요일은 둘째 주 토요일로 인식 (군대에서 순서를 세는 방식과 다름)
    # 2023-04-08 토요일을 START_DATE(배치일)로 정하면 END_DATE는 배치일 기준으로부터 2 주를 뺀 토요일은 2023-03-25가 된다.
    # 배치일 기준 (2023-04-08 토요일)으로 그 전 배치의 START_DATE를 구하려면 END_DATE로부터 5일을 뺀 날짜인 2023-03-20 (월요일)이 START_DATE가 된다.
    # 이는 즉, 배치일 기준 (2023-04-08 토요일) 19일을 빼준 날짜와 같다.
    bash_task_2 = BashOperator(
        task_id='bash_task_2',
        env={'START_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=19)) | ds}}', #2주전 월요일
             'END_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=14)) | ds}}' #2주전 툐요일
        },
        bash_command='echo "START_DATE: $START_DATE" &amp;&amp; echo "END_DATE: $END_DATE"'
    )</code></pre>
</section>
</section>
<section id="python-오퍼레이터-with-macro" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Python 오퍼레이터 with macro</h1>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/python/index.html">Template 변수를 지원하는 parameters</a></li>
<li>패러미터
<ul>
<li>python_callable (Callable | None)</li>
<li>op_kwargs (Templated)</li>
<li>op_args (Templated)</li>
<li>templates_dict (Templated)</li>
<li>templates_exts</li>
<li>show_return_value_in_logs</li>
</ul>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb22-1">@task(task_id='task_using_macros',</span>
<span id="cb22-2">    templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul")</span>
<span id="cb22-3">    #templates 변수를 꺼내온 값들을 key:value 형태로 꺼내온 뒤</span>
<span id="cb22-4">    #get_datetime_macro(**kwargs)의 **kwargs에 전달된다. </span>
<span id="cb22-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+ </span>macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}',</span>
<span id="cb22-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 배치일로 부터 한달을 빼고 일 1로 함. 즉, 전월 1일</span></span>
<span id="cb22-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 예를 들어, 배치일이 3월 15일이라면 2월 1일로 end_date를 설정한다.</span></span>
<span id="cb22-8">'end_date': '{{</span>
<span id="cb22-9">(data_interval_end.in_timezone("Asia/Seoul").replace(day=1) +</span>
<span id="cb22-10">macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span>
<span id="cb22-11">    }</span>
<span id="cb22-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># end_date는 배치일이 3월 15일이라면 2월 28일로 된다.</span></span>
<span id="cb22-13"></span>
<span id="cb22-14">)</span>
<span id="cb22-15"></span>
<span id="cb22-16">def get_datetime_macro(**kwargs):</span>
<span id="cb22-17">    templates_dict = kwargs.get('templates_dict') or {} # kwargs.get('templates_dict')이 빈값이면 {}로 할당</span>
<span id="cb22-18">    if templates_dict:</span>
<span id="cb22-19">    start_date = templates_dict.get('start_date') or 'start_date없음'</span>
<span id="cb22-20">    end_date = templates_dict.get('end_date') or 'end_date없음'</span>
<span id="cb22-21">    print(start_date)</span>
<span id="cb22-22">    print(end_date)</span></code></pre></div>
<ul>
<li>get_datetime_macro(<strong>kwargs)의 templates_dict에는 {‘start_date’:’{{ (data_interval_end.in_timezone(“Asia/Seoul”) #templates 변수를 꺼내온 값들을 key:value 형태로 꺼내온 뒤 #get_datetime_macro(</strong>kwargs)의 **kwargs에 전달된다.</li>
<li>macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}‘, ’end_date’: ‘{{ (data_interval_end.in_timezone(“Asia/Seoul”).replace(day=1) + macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}’ } 전체가 들어감</li>
</ul></li>
<li>그러나 Python 오퍼레이터에서 굳이 macro를 사용할 필요가 있을까? 날짜 연산을 python 문법을 이용해서 DAG 안에서 직접 연산하면 macro 변수를 사용안해도 날짜를 계산할 수 있음.
<ul>
<li>macro 사용 : template 변수 내에서 macro를 이용해 날짜를 반환 후에 start_date에 할당</li>
</ul>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb23-1">@task(task_id='task_using_macros',</span>
<span id="cb23-2">    templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul") + macros.dateutil.relativedelta.relativedelta(months=-1,day=1)) | ds }}',</span>
<span id="cb23-3">    'end_date': '{{ (data_interval_end.in_timezone("Asia/Seoul").replace(day=1) +</span>
<span id="cb23-4">    macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span>
<span id="cb23-5">    }</span>
<span id="cb23-6">)</span>
<span id="cb23-7"></span>
<span id="cb23-8">def get_datetime_macro(**kwargs):</span>
<span id="cb23-9">    templates_dict = kwargs.get('templates_dict') or {}</span>
<span id="cb23-10">    if templates_dict:</span>
<span id="cb23-11">        start_date = templates_dict.get('start_date') or 'start_date없음'</span>
<span id="cb23-12">        end_date = templates_dict.get('end_date') or 'end_date없음'</span>
<span id="cb23-13">        print(start_date)</span>
<span id="cb23-14">        print(end_date)</span></code></pre></div>
<ul>
<li>python 문법을 사용하여 직접 연산: 라이브러리를 이용해 날짜를 연산</li>
</ul>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb24-1">@task(task_id='task_direct_calc')</span>
<span id="cb24-2">def get_datetime_calc(**kwargs):</span>
<span id="cb24-3">    from dateutil.relativedelta import relativedelta #relativedelta함수 직접 import</span>
<span id="cb24-4">    data_interval_end = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_end'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> #data_interval_end는 datetime type</span>
<span id="cb24-5">prev_month_day_first = data_interval_end.in_timezone('Asia/Seoul') + relativedelta(months=-1, day=1) #data_interval_end는 datetime type에는 in_timezone() method가 있음</span>
<span id="cb24-6">prev_month_day_last = data_interval_end.in_timezone('Asia/Seoul').replace(day=1) + relativedelta(days=-1)</span>
<span id="cb24-7">print(prev_month_day_first.strftime('%Y-%m-%d')) # | ds 구현</span>
<span id="cb24-8">print(prev_month_day_last.strftime('%Y-%m-%d'))  # | ds 구현</span></code></pre></div></li>
<li>예시: Dags full example</li>
</ul>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb25-1">from airflow import DAG</span>
<span id="cb25-2">import pendulum</span>
<span id="cb25-3">from airflow.decorators import task</span>
<span id="cb25-4"></span>
<span id="cb25-5"></span>
<span id="cb25-6"></span>
<span id="cb25-7">with DAG(</span>
<span id="cb25-8">    dag_id="dags_python_with_macro",</span>
<span id="cb25-9">    schedule="10 0 * * *",</span>
<span id="cb25-10">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb25-11">    catchup=False</span>
<span id="cb25-12">) as dag:</span>
<span id="cb25-13">    </span>
<span id="cb25-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # macro 이용</span></span>
<span id="cb25-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_using_macros',</span></span>
<span id="cb25-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul") + macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}',</span></span>
<span id="cb25-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'end_date': '{{ (data_interval_end.in_timezone("Asia/Seoul").replace(day=1) + macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span></span>
<span id="cb25-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     }</span></span>
<span id="cb25-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb25-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb25-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def get_datetime_macro(**kwargs):</span></span>
<span id="cb25-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb25-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        templates_dict = kwargs.get('templates_dict') or {}</span></span>
<span id="cb25-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if templates_dict:</span></span>
<span id="cb25-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            start_date = templates_dict.get('start_date') or 'start_date없음'</span></span>
<span id="cb25-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            end_date = templates_dict.get('end_date') or 'end_date없음'</span></span>
<span id="cb25-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print(start_date)</span></span>
<span id="cb25-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print(end_date)</span></span>
<span id="cb25-29"></span>
<span id="cb25-30"></span>
<span id="cb25-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # python 이용</span></span>
<span id="cb25-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_direct_calc')</span></span>
<span id="cb25-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def get_datetime_calc(**kwargs):</span></span>
<span id="cb25-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from dateutil.relativedelta import relativedelta # 스케쥴러 부하 경감을 위해 task안에다가 library호출</span></span>
<span id="cb25-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 다시 말해서, scheduler는 dag이 실행되지 않더라도 사용자가 작성한 dag을 주기적으로 문법적인 오류가 있는지를 검사하기 위해 parsing함</span></span>
<span id="cb25-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # DAG이 시작하기 이전 code (즉, `with DAG` 이전 부분) 와 task가 시작하기 이전 code (`as dag:` 이후 부분과 task 선언 이전 부분)를 parsing 및 검사</span></span>
<span id="cb25-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 하지만 operator 안 과 task decorator안에 있는 부분은 parsing 및 검사하지 않음.</span></span>
<span id="cb25-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 실제로 대형 프로젝트에서 겪는 scheduluer부하 문제를 해결하는 팁이 될 수 있음</span></span>
<span id="cb25-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data_interval_end = kwargs['data_interval_end']</span></span>
<span id="cb25-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prev_month_day_first = data_interval_end.in_timezone('Asia/Seoul') + relativedelta(months=-1, day=1)</span></span>
<span id="cb25-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prev_month_day_last = data_interval_end.in_timezone('Asia/Seoul').replace(day=1) +  relativedelta(days=-1)</span></span>
<span id="cb25-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(prev_month_day_first.strftime('%Y-%m-%d'))</span></span>
<span id="cb25-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(prev_month_day_last.strftime('%Y-%m-%d'))</span></span>
<span id="cb25-44"></span>
<span id="cb25-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_datetime_macro() &gt;&gt; get_datetime_calc()</span></span></code></pre></div>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/05.template_variable.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Share</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/06.data_share.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="xcom-definition" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Xcom Definition</h1>
<ul>
<li>Xcom stands for Cross Communication.</li>
<li>Airflow DAG 안 Task 간 작은 데이터 (or Message) 공유를 위해 사용되는 기술 (1개의 Dag 안에 있는 task끼리만 data 공유)
<ul>
<li>예를 들어, Task1의 수행 중 내용이나 결과를 Task2에서 사용 또는 입력으로 주고 싶은 경우</li>
<li>task1 은 push, task2는 pull과 같은 tasks간 데이터 공유에 유용</li>
</ul></li>
<li>주로 작은 규모의 데이터 공유를 위해 사용
<ul>
<li>Xcom 내용은 meta DB의 Xcom 테이블에 값이 저장됨<br>
</li>
<li>1GB 이상의 대용량 데이터 공유를 위해서는 외부 솔루션 사용 필요 (AWS의 S3, GCP의 GCS, HDFS (Hadoop File System) 등)</li>
</ul></li>
</ul>
</section>
<section id="python-오퍼레이터-with-xcom" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Python 오퍼레이터 With Xcom</h1>
<section id="python-오퍼레이터에서-xcom-사용하기" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="python-오퍼레이터에서-xcom-사용하기"><span class="header-section-number">2.1</span> Python 오퍼레이터에서 Xcom 사용하기</h2>
<ul>
<li>크게 두 가지 방법으로 Xcom 사용 가능
<ol type="1">
<li>**kwargs에 존재하는 ti (task_instance) 객체 활용</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">@task(task_id='python_xcom_push_task')</span>
<span id="cb1-2">def xcom_push(**kwargs):</span>
<span id="cb1-3">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-4">    ti.xcom_push(key="result1", value="value_1") </span>
<span id="cb1-5">    ti.xcom_push(key="result2", value=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb1-6">    #xcom_push: xcom에다가 data를 올릴 수 있음</span>
<span id="cb1-7">    #data를 올릴 때는 key:value 형태로 올리기</span>
<span id="cb1-8">    #template 변수에서 task_instance 라는 객체를 얻을 수 있으며 task_instance 객체가 가진 xcom_push 메서드를 활용할 수 있음</span>
<span id="cb1-9"></span>
<span id="cb1-10">@task(task_id='python_xcom_pull_task')</span>
<span id="cb1-11">def xcom_pull(**kwargs):</span>
<span id="cb1-12">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-13">    value_key1 = ti.xcom_pull(key="result1") # value_1이 value_key1에 저장됨</span>
<span id="cb1-14">    value_key2 = ti.xcom_pull(key="result2",</span>
<span id="cb1-15">    task_ids='python_xcom_push_task') # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>이 value_key2에 저장됨</span>
<span id="cb1-16">    #xcom_pull: xcom으로부터 data를 내려 받을 수 있음</span>
<span id="cb1-17">    #data를 올릴 때는 key:value 형태로 올리기</span>
<span id="cb1-18">    print(value_key1)</span>
<span id="cb1-19">    print(value_key2)</span></code></pre></div>
<ul>
<li>xcome_pull()을 할때 key값만 줘도 되고 key값과 task_ids값을 둘다 줘도 된다.
<ul>
<li>key값만 줘도 될때
<ul>
<li>xcom_push를 한 task가 1개 밖에 없을 때 사용 가능</li>
<li>혹은, key값이 중복될 때 xcom_push를 한 task가 여러 개 있을 때도 사용 가능한데 가장 마지막 (최신) task의 key값을 호출 한다.</li>
<li>만약, key값이 중복이 되지 않는 다면 key값만으로도 data를 내려 받을 수 있다.</li>
</ul></li>
<li>key값과 task_ids둘다 줘야할 때
<ul>
<li>key값이 중복되는 xcom_push를 한 task가 여러 개 있을 때 선택적으로 원하는 task의 data를 가지고 오고 싶으면 해당 task의 task_ids를 명시적으로 적어줘야한다.</li>
</ul></li>
<li>예를 들어,</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 5개의 tasks 존재하는</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># task1: xcom_push(key='result1'...)</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># task2: xcom_push(key='result1'...)</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># task3: xcom_push(key='result2'...)</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># task4: xcom_pull(key='result1'...)</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># task5: xcom_pull(key='result1',task_ids=...)</span></span></code></pre></div>
<ul>
<li>task4가 수행이 될때 task1의 xcom을 가져우는게 아니라 가장 최신에 수행된 task2의 xcom을 가져오게 된다.</li>
<li>task1의 xcom을 가지고 오고 싶을땐 task5와 같이 task1의 task_id를 task5의 task_ids에 명시해주면 된다.</li>
<li>가장 안전한 방법은 task의 key값과 task_ids를 명시적으로 적어주는 것이다. 아니면 tasks의 key값을 절대 중복이 되지않도록 적어주는 것이다.</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li>파이썬 함수의 return 값 활용
<ul>
<li>(1안)</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">@task(task_id='xcom_push_by_return')</span>
<span id="cb3-2">def xcom_push_by_return(**kwargs):</span>
<span id="cb3-3">    transaction_value = 'status Good'</span>
<span id="cb3-4">    return transaction_value</span>
<span id="cb3-5">@task(task_id='xcom_pull_by_return')</span>
<span id="cb3-6">def xcom_pull_by_return(status, **kwargs):</span>
<span id="cb3-7">    print(status)</span>
<span id="cb3-8">xcom_pull_by_return(xcom_push_by_return()) </span></code></pre></div>
<ul>
<li><p>xcom을 이용한 task의 flow 정해주는 또 다른 방식</p></li>
<li><p>암묵적인 task의 순서: xcom_push_by_return() &gt;&gt; xcom_pull_by_return()</p></li>
<li><p>위의 스크립트에서 xcom_pull() 또는 xcom_push()가 명시적으로 쓰이지진 않았지만 airflow에서는 <strong>Task 데커레이터 사용시</strong> 함수 입력/출력 관계만으로 Task flow 정의가 된다. 즉, <code>xcom_pull_by_return(xcom_push_by_return())</code> = <code>xcom_push_by_return() &gt;&gt; xcom_pull_by_return()</code></p></li>
<li><p><strong>Task 데커레이터 사용시</strong> custom 함수가 return을 하게 되면 자동으로 xcom에 data가 올라가게 된다.</p></li>
<li><p>(2안)</p></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"></span>
<span id="cb4-2">@task(task_id='xcom_push_by_return')</span>
<span id="cb4-3">def xcom_push_return(**kwargs):</span>
<span id="cb4-4">    transaction_value = 'status Good'</span>
<span id="cb4-5">    return transaction_value</span>
<span id="cb4-6">    # return 한 값은 자동으로 xcom에 key='return_value', task_ids=task_id 로 저장됨</span>
<span id="cb4-7"></span>
<span id="cb4-8">@task(task_id='xcom_pull_by_return')</span>
<span id="cb4-9">def xcom_pull_return_by_method(**kwargs):</span>
<span id="cb4-10">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-11">    pull_value = ti.xcom_pull(key='return_value', task_ids='xcom_push_by_return')</span>
<span id="cb4-12">    # ti.xcom_pull()을 이용하여 return 한 값을 꺼낼 때는 key를 명시하지 않아도 됨. (자동으로 key=return_value 를 찾음)</span>
<span id="cb4-13">    # task_ids='xcom_push_by_return' return한 Task가 여러개 있을 때는 task_ids 를 지정</span>
<span id="cb4-14">    print(pull_value)</span>
<span id="cb4-15"></span>
<span id="cb4-16">xcom_push_by_return() &gt;&gt; xcom_pull_by_return() # 2안에서는 task flow를 명시적으로 적어줘야함.</span></code></pre></div></li>
</ol></li>
<li>DAG Full Example
<ul>
<li><p>1안 DAG Full Exmaple ```markdown from airflow import DAG import pendulum import datetime from airflow.decorators import task</p>
<p>with DAG( dag_id=“dags_python_with_xcom_eg2”, schedule=“30 6 * * *“, start_date=pendulum.datetime(2023, 3, 1, tz=”Asia/Seoul”), catchup=False ) as dag:</p>
<pre><code>  @task(task_id='python_xcom_push_by_return')
  def xcom_push_result(**kwargs):
      return 'Success'


  @task(task_id='python_xcom_pull_1')
  def xcom_pull_1(**kwargs):
      ti = kwargs['ti']
      value1 = ti.xcom_pull(task_ids='python_xcom_push_by_return')
      print('xcom_pull 메서드로 직접 찾은 리턴 값:' + value1)

  @task(task_id='python_xcom_pull_2')
  def xcom_pull_2(status, **kwargs):
      print('함수 입력값으로 받은 값:' + status)


  python_xcom_push_by_return = xcom_push_result() 
  # airflow의 task decorator가 쓰였기 때문에 python_xcom_push_by_return에 
  # 단순한 'Sucess' 스트링이 할당되는게 아니라 decorator object가 할당된다.
  xcom_pull_2(python_xcom_push_by_return)
  python_xcom_push_by_return &gt;&gt; xcom_pull_1()

  # 암묵적인 task flow는
  # xcom_push_result &gt;&gt;[xcom_pull_2, xcom_pull_1] 형태임</code></pre>
<p>```</p></li>
<li><p>2안 DAG Full Example ```markdown from airflow import DAG import pendulum import datetime from airflow.decorators import task</p>
<p>with DAG( dag_id=“dags_python_with_xcom_eg1”, schedule=“30 6 * * *“, start_date=pendulum.datetime(2023, 3, 1, tz=”Asia/Seoul”), catchup=False ) as dag:</p>
<pre><code>  @task(task_id='python_xcom_push_task1')
  def xcom_push1(**kwargs):
      ti = kwargs['ti']
      ti.xcom_push(key="result1", value="value_1")
      ti.xcom_push(key="result2", value=[1,2,3])

  @task(task_id='python_xcom_push_task2')
  def xcom_push2(**kwargs):
      ti = kwargs['ti']
      ti.xcom_push(key="result1", value="value_2") 
      # python_xcom_push_task1의 key값은 같지만 value는 다름
      ti.xcom_push(key="result2", value=[1,2,3,4])

  @task(task_id='python_xcom_pull_task')
  def xcom_pull(**kwargs):
      ti = kwargs['ti']
      value1 = ti.xcom_pull(key="result1")
      value2 = ti.xcom_pull(key="result2", task_ids='python_xcom_push_task1')
      print(value1)
      print(value2)


  xcom_push1() &gt;&gt; xcom_push2() &gt;&gt; xcom_pull()
  # xcom_pull()에서 key값이 result1으로만 명시되었기 때문에 value1에는 xcom_push2()의 'value_2'가 들어감    </code></pre>
<p>```</p></li>
</ul></li>
<li>airflow web service에서 log 대신 xcom을 사용해 결과값을 확인</li>
</ul>
</section>
<section id="summary" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="summary"><span class="header-section-number">2.2</span> Summary</h2>
<ul>
<li>Xcom push 방법
<ul>
<li>ti.xcom_push 명시적 사용</li>
<li>함수 return</li>
</ul></li>
<li>Xcom pull 방법
<ul>
<li>ti.xcom_pull 명시적 사용</li>
<li>return 값을 input으로 사용</li>
</ul></li>
</ul>
</section>
</section>
<section id="bash-오퍼레이터-with-xcom" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Bash 오퍼레이터 With Xcom</h1>
<section id="bash-오퍼레이터에서-xcom-사용하기" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="bash-오퍼레이터에서-xcom-사용하기"><span class="header-section-number">3.1</span> Bash 오퍼레이터에서 Xcom 사용하기</h2>
<ul>
<li>Bash 오퍼레이터에서 template 문법을 쓸수 있는 parameters: env, bash_command</li>
<li>template 이용하여 push/pull</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">bash_push = BashOperator(</span>
<span id="cb7-2">    task_id='bash_push',</span>
<span id="cb7-3">    bash_command="echo START &amp;&amp; "</span>
<span id="cb7-4">                "echo XCOM_PUSHED "</span>
<span id="cb7-5">                "{{ ti.xcom_push(key='bash_pushed',value='first_bash_message') }} &amp;&amp; "</span>
<span id="cb7-6">                "echo COMPLETE" </span>
<span id="cb7-7">                # bash 같은 경우엔 출력하는 값이 return값으로 간주됨. </span>
<span id="cb7-8">                # 위의 경우와 같이 여러 출력물(&amp;&amp;로 연결된 3개의 출력물)이 있을 경우 마지막 출력물(COMPLETE)이 자동으로 return_value 에 저장됨</span>
<span id="cb7-9">)</span>
<span id="cb7-10">bash_pull = BashOperator(</span>
<span id="cb7-11">    task_id='bash_pull',</span>
<span id="cb7-12">    env={'PUSHED_VALUE':"{{ ti.xcom_pull(key='bash_pushed') }}",</span>
<span id="cb7-13">        'RETURN_VALUE':"{{ ti.xcom_pull(task_ids='bash_push') }}"}, </span>
<span id="cb7-14">        # env 는 key: value 형태로 데이터를 받음</span>
<span id="cb7-15">        # task_ids 만 지정하면 key='return_value' 를 의미함</span>
<span id="cb7-16">        # RETURN_VALUE에 'complete'이 들어감</span>
<span id="cb7-17">    bash_command="echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE ",</span>
<span id="cb7-18">    do_xcom_push=False </span>
<span id="cb7-19">    # bash_command에서 출력되는 "echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE "의 </span>
<span id="cb7-20">    # 출력문을 자동으로 xcom에 올리지 말라는 의미</span>
<span id="cb7-21">)</span></code></pre></div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">from airflow import DAG</span>
<span id="cb8-2">import pendulum</span>
<span id="cb8-3">import datetime</span>
<span id="cb8-4">from airflow.operators.bash import BashOperator</span>
<span id="cb8-5"></span>
<span id="cb8-6">with DAG(</span>
<span id="cb8-7">    dag_id="dags_bash_with_xcom",</span>
<span id="cb8-8">    schedule="10 0 * * *",</span>
<span id="cb8-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb8-10">    catchup=False</span>
<span id="cb8-11">) as dag:</span>
<span id="cb8-12">    bash_push = BashOperator(</span>
<span id="cb8-13">    task_id='bash_push',</span>
<span id="cb8-14">    bash_command="echo START &amp;&amp; "</span>
<span id="cb8-15">                 "echo XCOM_PUSHED "</span>
<span id="cb8-16">                 "{{ ti.xcom_push(key='bash_pushed',value='first_bash_message') }} &amp;&amp; "</span>
<span id="cb8-17">                 "echo COMPLETE"</span>
<span id="cb8-18">    )</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_pull = BashOperator(</span></span>
<span id="cb8-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_pull',</span></span>
<span id="cb8-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={'PUSHED_VALUE':"{{ ti.xcom_pull(key='bash_pushed') }}",</span></span>
<span id="cb8-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'RETURN_VALUE':"{{ ti.xcom_pull(task_ids='bash_push') }}"},</span></span>
<span id="cb8-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command="echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE ",</span></span>
<span id="cb8-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        do_xcom_push=False</span></span>
<span id="cb8-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push &gt;&gt; bash_pull</span></span></code></pre></div>
</section>
<section id="summary-1" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="summary-1"><span class="header-section-number">3.2</span> Summary</h2>
<ul>
<li>Bash_command에 의해 출력된 값은 자동으로 return_value로 저장된다 (마지막 출력 문장만)</li>
<li>return_value를 꺼낼 때는 xcom_pull에서 task_ids 값만 줘도 된다.</li>
<li>키가 지정된 xcom 값을 꺼낼 때는 key 값만 줘도 된다 (단, 다른 task에서 동일 key로 push 하지 않았을 때만)</li>
</ul>
</section>
</section>
<section id="python-bash-오퍼레이터-with-xcom" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python &amp; Bash 오퍼레이터 With Xcom</h1>
<section id="python-rightarrow-bash-오퍼레이터-xcom-전달" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-rightarrow-bash-오퍼레이터-xcom-전달"><span class="header-section-number">4.1</span> Python <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> Bash 오퍼레이터 Xcom 전달</h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">@task task_id =='python push'</span>
<span id="cb9-2">def python_push_xcom</span>
<span id="cb9-3">    result_dict = {'status':' Good','data':<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,'options_cnt': 100}</span>
<span id="cb9-4">    return result_dict</span>
<span id="cb9-5">bash_pull = BashOperator(</span>
<span id="cb9-6">    task_id='bash_pull',</span>
<span id="cb9-7">    env={</span>
<span id="cb9-8">        'STATUS': '{{ti.xcom_pull(task ids="python push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"status"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}', #task_ids만 있으면 위의 파이썬 함수에서 리턴값을 자동으로 받음</span>
<span id="cb9-9">        'DATA': '{{ti.xcom_pull(task ids="python push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"data"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}',</span>
<span id="cb9-10">        'OPTIONS_CNT': '{{ti.xcom_pull(task_ids="python_push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"options_cnt"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}'</span>
<span id="cb9-11">    },</span>
<span id="cb9-12">    bash_command = 'echo $STATUS &amp;&amp; echo $DATA &amp;&amp; echo $OPTIONS_CNT'</span>
<span id="cb9-13">)</span>
<span id="cb9-14"> </span>
<span id="cb9-15">python_push_xcom() &gt;&gt; bash_pull</span></code></pre></div>
</section>
<section id="bash-rightarrow-python-오퍼레이터-xcom-전달" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="bash-rightarrow-python-오퍼레이터-xcom-전달"><span class="header-section-number">4.2</span> Bash <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> Python 오퍼레이터 Xcom 전달</h2>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">bash_push = BashOperator(</span>
<span id="cb10-2">task_id ='bash_push',</span>
<span id="cb10-3">bash_command='echo PUSH_START'</span>
<span id="cb10-4">    '{{ti.xcom_push(key="bash_pushed",value=200) }}&amp;&amp; 'echo PUSH_COMPLETE'</span>
<span id="cb10-5">)</span>
<span id="cb10-6"></span>
<span id="cb10-7">@task(task_id =='python_pull')</span>
<span id="cb10-8">def python_pull_xcom(**kwargs): </span>
<span id="cb10-9">    ti = kwargs <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-10">    status_value= ti.xcom_pull(key ='bash_pushed')</span>
<span id="cb10-11">    return_value= ti.xcom_pull(task_ids ='bash_push')</span>
<span id="cb10-12">    print('status_value:'+ str (status_value))</span>
<span id="cb10-13">    print('return_value:'+ return_value)</span>
<span id="cb10-14">    bash_push&gt;&gt; python_pull_xcom()</span></code></pre></div>
<ul>
<li>DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">from airflow import DAG</span>
<span id="cb11-2">import pendulum</span>
<span id="cb11-3">from airflow.decorators import task</span>
<span id="cb11-4">from airflow.operators.bash import BashOperator</span>
<span id="cb11-5"></span>
<span id="cb11-6">with DAG(</span>
<span id="cb11-7">    dag_id="dags_bash_python_with_xcom",</span>
<span id="cb11-8">    schedule="30 9 * * *",</span>
<span id="cb11-9">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb11-10">    catchup=False</span>
<span id="cb11-11">) as dag:</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_push')</span></span>
<span id="cb11-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_push_xcom():</span></span>
<span id="cb11-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        result_dict = {'status':'Good','data':[1,2,3],'options_cnt':100}</span></span>
<span id="cb11-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return result_dict</span></span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_pull = BashOperator(</span></span>
<span id="cb11-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_pull',</span></span>
<span id="cb11-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={</span></span>
<span id="cb11-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'STATUS':'{{ti.xcom_pull(task_ids="python_push")["status"]}}',</span></span>
<span id="cb11-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'DATA':'{{ti.xcom_pull(task_ids="python_push")["data"]}}',</span></span>
<span id="cb11-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'OPTIONS_CNT':'{{ti.xcom_pull(task_ids="python_push")["options_cnt"]}}'</span></span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb11-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo $STATUS &amp;&amp; echo $DATA &amp;&amp; echo $OPTIONS_CNT'</span></span>
<span id="cb11-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb11-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_push_xcom() &gt;&gt; bash_pull</span></span>
<span id="cb11-29"></span>
<span id="cb11-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push = BashOperator(</span></span>
<span id="cb11-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id='bash_push',</span></span>
<span id="cb11-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command='echo PUSH_START '</span></span>
<span id="cb11-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                 '{{ti.xcom_push(key="bash_pushed",value=200)}} &amp;&amp; '</span></span>
<span id="cb11-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                 'echo PUSH_COMPLETE'</span></span>
<span id="cb11-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_pull')</span></span>
<span id="cb11-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_pull_xcom(**kwargs):</span></span>
<span id="cb11-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb11-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        status_value = ti.xcom_pull(key='bash_pushed')</span></span>
<span id="cb11-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return_value = ti.xcom_pull(task_ids='bash_push')</span></span>
<span id="cb11-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('status_value:' + str(status_value))</span></span>
<span id="cb11-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('return_value:' + return_value)</span></span>
<span id="cb11-44"></span>
<span id="cb11-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push &gt;&gt; python_pull_xcom()</span></span></code></pre></div>
</section>
</section>
<section id="python-email-오퍼레이터-with-xcom" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Python &amp; Email 오퍼레이터 With Xcom</h1>
<section id="python-email-오퍼레이터-xcom-전달" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="python-email-오퍼레이터-xcom-전달"><span class="header-section-number">5.1</span> Python → Email 오퍼레이터 Xcom 전달</h2>
<ul>
<li>Email 오퍼레이터를 이용하여 Xcom을 받아와야함</li>
<li>Email 오퍼레이터는 어떤 파라미터에 Template를 쓸 수 있는가?</li>
<li>파라미터
<ul>
<li>to</li>
<li>subject</li>
<li>html_content</li>
<li>files</li>
<li>cc</li>
<li>bcc</li>
<li>nime_subtype</li>
<li>mime_charset</li>
<li>custom_headers</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">@task(task_id='something_task') # python operator를 task decorator로 만듦</span>
<span id="cb12-2">def some_logic(**kwargs):</span>
<span id="cb12-3">    from random import choice </span>
<span id="cb12-4">    #choice 함수: list, tuple, string 중 아무 값이나 꺼낼 수 있게 해주는 함수</span>
<span id="cb12-5">    return choice(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'Success','Fail'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>) # either Success or Fail is return됨</span>
<span id="cb12-6">send_email = EmailOperator(</span>
<span id="cb12-7">    task_id='send_email',</span>
<span id="cb12-8">    to='hjkim_sun@naver.com',</span>
<span id="cb12-9">    subject='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} some_logic 처리결과',</span>
<span id="cb12-10">    html_content='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} 처리 결과는 &lt;br&gt; \ {{ti.xcom_pull(task_ids="something_task")}} 했습니다 &lt;br&gt;'</span>
<span id="cb12-11">)</span></code></pre></div>
<ul>
<li>DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow import DAG</span>
<span id="cb13-2">import pendulum</span>
<span id="cb13-3">import datetime</span>
<span id="cb13-4">from airflow.decorators import task</span>
<span id="cb13-5">from airflow.operators.email import EmailOperator</span>
<span id="cb13-6"></span>
<span id="cb13-7">with DAG(</span>
<span id="cb13-8">    dag_id="dags_python_email_operator",</span>
<span id="cb13-9">    schedule="0 8 1 * *",</span>
<span id="cb13-10">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb13-11">    catchup=False</span>
<span id="cb13-12">) as dag:</span>
<span id="cb13-13">    </span>
<span id="cb13-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='something_task')</span></span>
<span id="cb13-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def some_logic(**kwargs):</span></span>
<span id="cb13-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from random import choice </span></span>
<span id="cb13-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return choice(['Success','Fail'])</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    send_email = EmailOperator(</span></span>
<span id="cb13-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='send_email',</span></span>
<span id="cb13-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        to='hjkim_sun@naver.com',</span></span>
<span id="cb13-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        subject='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} some_logic 처리결과',</span></span>
<span id="cb13-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        html_content='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} 처리 결과는 &lt;br&gt; \</span></span>
<span id="cb13-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    {{ti.xcom_pull(task_ids="something_task")}} 했습니다 &lt;br&gt;'</span></span>
<span id="cb13-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb13-27"></span>
<span id="cb13-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    some_logic() &gt;&gt; send_email</span></span>
<span id="cb13-29"></span></code></pre></div>
</section>
</section>
<section id="전역변수-variable-이용하기" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> 전역변수 Variable 이용하기</h1>
<ul>
<li>Xcom: 특정 DAG, 특정 schedule 에 수행되는 Task 간에만 공유 (즉, 어제 수행한 task와 오늘 수행한 task간에는 xcom을 사용하여 데이터 공유가 안됨)</li>
<li>variable: 모든 DAG 이 공유할 수 있는 전역 변수 사용</li>
<li>Variable 등록하기
<ul>
<li>airflow web service에서 전역 변수 등록 가능
<ul>
<li>airflow web service의 Admin &gt;&gt; Variables &gt;&gt; Plus Button &gt;&gt; Key, Val, Description 작성 &gt;&gt; save</li>
</ul></li>
<li>전역 변수 사용하기: 실제 Variable 의 Key, Value 값은 메타 DB 에 저장됨 (variable 테이블)
<ol type="1">
<li>방법1) Variable 라이브러리 이용 , 파이썬 문법을 이용해 미리 가져오기</li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">from airflow operators bash import BashOperator</span>
<span id="cb14-2">from airflow models import Variable </span>
<span id="cb14-3"></span>
<span id="cb14-4">var_value = Variable.get('sample_key')</span>
<span id="cb14-5">bash_var_1= BashOperator(</span>
<span id="cb14-6">    task_id = "bash_var_1",</span>
<span id="cb14-7">    bash_command = f "echo variable:{var_value}"" </span>
<span id="cb14-8">)</span></code></pre></div>
<ul>
<li>스케줄러의 주기적 DAG 파싱시 Variable.get 개수만큼 DB 연결을 일으켜 불필요한 부하 발생 스케줄러 과부하 원인 중 하나 (권고하지 않음)
<ul>
<li>주기적으로 아래 코드를 실행함</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow models import Variable </span>
<span id="cb15-2">var_value = Variable.get('sample_key')</span></code></pre></div></li>
</ul>
<ol start="2" type="1">
<li>방법2) Jinja 템플릿 이용 , 오퍼레이터 내부에서 가져오기 (권고)
<ul>
<li>스케쥴러는 Operator 안에 작성된 내용은 parsing 및 실행해보지 않음</li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1">from airflow operators bash import BashOperator</span>
<span id="cb16-2">bash_var_2= BashOperator(</span>
<span id="cb16-3">task_id="bash_var_2",</span>
<span id="cb16-4">bash_command= f "echo variable: {{var.value.sample_key}}"</span>
<span id="cb16-5">)</span></code></pre></div></li>
</ol></li>
</ul></li>
<li>그런데 이 전역변수는 언제 , 어떻게 쓰면 좋을까
<ul>
<li>협업 환경에서 표준화된 dag 을 만들기 위해 주로 사용. 개발자들마다 서로 다르게 사용하지 말아야할 주로 상수 (CONST) 로 지정해서 사용할 변수들 셋팅할 때 사용</li>
<li>예) base_sh_dir = /opt/airflow/plugins/shell. shell file 의 위치를 고정</li>
<li>예) base_file_dir = /opt/airflow/plugins/files</li>
<li>예) email, Alert 메시지를 받을 담당자의 email 주소 정보</li>
</ul></li>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1"></span>
<span id="cb17-2">from airflow import DAG</span>
<span id="cb17-3">import pendulum</span>
<span id="cb17-4">from airflow.operators.bash import BashOperator</span>
<span id="cb17-5">from airflow.models import Variable</span>
<span id="cb17-6"></span>
<span id="cb17-7">with DAG(</span>
<span id="cb17-8">    dag_id="dags_bash_with_variable",</span>
<span id="cb17-9">    schedule="10 9 * * *",</span>
<span id="cb17-10">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb17-11">    catchup=False</span>
<span id="cb17-12">) as dag:</span>
<span id="cb17-13">    </span>
<span id="cb17-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    #권고하지 않음</span></span>
<span id="cb17-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    var_value = Variable.get("sample_key")</span></span>
<span id="cb17-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_var_1 = BashOperator(</span></span>
<span id="cb17-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id="bash_var_1",</span></span>
<span id="cb17-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command=f"echo variable:{var_value}"</span></span>
<span id="cb17-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb17-20"></span>
<span id="cb17-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    #권고함</span></span>
<span id="cb17-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_var_2 = BashOperator(</span></span>
<span id="cb17-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id="bash_var_2",</span></span>
<span id="cb17-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command="echo variable:{{var.value.sample_key}}"</span></span>
<span id="cb17-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/06.data_share.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Task Handling Techniques</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/07.task_handling.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="task-분기-처리하기-with-branchpythonoperator" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Task 분기 처리하기 With BranchPythonOperator</h1>
<section id="task-분기-처리-유형" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="task-분기-처리-유형"><span class="header-section-number">1.1</span> Task 분기 처리 유형</h2>
<ul>
<li>Task 분기처리가 필요한 이유</li>
</ul>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 189.55 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 185.55,-205 185.55,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 173.55,-193 173.55,-8 8,-8"></polygon>
<text text-anchor="middle" x="90.78" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- task1 -->
<g id="node1" class="node">
<title>task1</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon>
<text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- task2_1 -->
<g id="node2" class="node">
<title>task2_1</title>
<polygon fill="none" stroke="black" points="165.33,-52 106.22,-52 106.22,-16 165.33,-16 165.33,-52"></polygon>
<text text-anchor="middle" x="135.78" y="-29.8" font-family="Times,serif" font-size="14.00">task2_1</text>
</g>
<!-- task1&#45;&gt;task2_1 -->
<g id="edge1" class="edge">
<title>task1-&gt;task2_1</title>
<path fill="none" stroke="black" d="M70.26,-72.38C78.66,-67.38 88.14,-61.74 97.18,-56.36"></path>
<polygon fill="black" stroke="black" points="99.23,-59.22 106.04,-51.1 95.65,-53.2 99.23,-59.22"></polygon>
</g>
<!-- task2_2 -->
<g id="node3" class="node">
<title>task2_2</title>
<polygon fill="none" stroke="black" points="165.33,-106 106.22,-106 106.22,-70 165.33,-70 165.33,-106"></polygon>
<text text-anchor="middle" x="135.78" y="-83.8" font-family="Times,serif" font-size="14.00">task2_2</text>
</g>
<!-- task1&#45;&gt;task2_2 -->
<g id="edge2" class="edge">
<title>task1-&gt;task2_2</title>
<path fill="none" stroke="black" d="M70.26,-88C78.22,-88 87.15,-88 95.77,-88"></path>
<polygon fill="black" stroke="black" points="96.04,-91.5 106.04,-88 96.04,-84.5 96.04,-91.5"></polygon>
</g>
<!-- task2_3 -->
<g id="node4" class="node">
<title>task2_3</title>
<polygon fill="none" stroke="black" points="165.33,-160 106.22,-160 106.22,-124 165.33,-124 165.33,-160"></polygon>
<text text-anchor="middle" x="135.78" y="-137.8" font-family="Times,serif" font-size="14.00">task2_3</text>
</g>
<!-- task1&#45;&gt;task2_3 -->
<g id="edge3" class="edge">
<title>task1-&gt;task2_3</title>
<path fill="none" stroke="black" d="M70.26,-103.62C78.66,-108.62 88.14,-114.26 97.18,-119.64"></path>
<polygon fill="black" stroke="black" points="95.65,-122.8 106.04,-124.9 99.23,-116.78 95.65,-122.8"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>위와 같이 task1이 실행된 후 여러 후차적인 task를 병렬로 실행되어야 할 때<br>
</li>
<li>task flow에서 task1의 결과에 따라 선택적으로 task2-x 중 하나만 수행되도록 구성해야 할 때가 있다.</li>
<li>eg) Task1 의 결과로 ‘Good’,’Bad’,’Pending’ 이라는 결과 3 개 중 하나가 나오고 그에 따라 ask2-1 ~ task2-3 중 하나가 실행되도록 해야 할 경우</li>
</ul>
</section>
<section id="airflow에서-지원하는-task-분기처리-방법" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="airflow에서-지원하는-task-분기처리-방법"><span class="header-section-number">1.2</span> Airflow에서 지원하는 Task 분기처리 방법</h2>
<ul>
<li>Task 분기처리 방법 3가지
<ul>
<li>BranchPythonOperator</li>
<li>task.branch decorator 이용</li>
<li>BaseBranchOperator 클래스를 상속하여 직접 개발</li>
</ul></li>
</ul>
<section id="branchpythonoperator" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="branchpythonoperator"><span class="header-section-number">1.2.1</span> BranchPythonOperator</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"></span>
<span id="cb1-2">def select_random():</span>
<span id="cb1-3">    import random</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    item_lst= ['A','B','C']</span></span>
<span id="cb1-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    selected_item = random.choice(item_lst)</span></span>
<span id="cb1-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    if selected_item == 'A';</span></span>
<span id="cb1-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return 'task_a' # task_id를 string 값으로 return해야함</span></span>
<span id="cb1-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    elif selected_item in ['B','C] </span></span>
<span id="cb1-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return ['task_b','task_c'] # 여러 task를 동시에 수행시킬 땐 string 리스트로 반환</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 일반 operator의 parameter도 있음</span></span>
<span id="cb1-13">python_branch_task = BranchPythonOperator(</span>
<span id="cb1-14">    task_id ='python_branch_task',</span>
<span id="cb1-15">    python_callable=select_random #select_random function 호출</span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18">python_branch_task &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 259.53 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 255.53,-205 255.53,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 243.53,-193 243.53,-8 8,-8"></polygon>
<text text-anchor="middle" x="125.77" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- python_branch_task -->
<g id="node1" class="node">
<title>python_branch_task</title>
<polygon fill="none" stroke="black" points="145.3,-106 16.23,-106 16.23,-70 145.3,-70 145.3,-106"></polygon>
<text text-anchor="middle" x="80.77" y="-83.8" font-family="Times,serif" font-size="14.00">python_branch_task</text>
</g>
<!-- task_a -->
<g id="node2" class="node">
<title>task_a</title>
<polygon fill="none" stroke="black" points="235.53,-52 181.53,-52 181.53,-16 235.53,-16 235.53,-52"></polygon>
<text text-anchor="middle" x="208.53" y="-29.8" font-family="Times,serif" font-size="14.00">task_a</text>
</g>
<!-- python_branch_task&#45;&gt;task_a -->
<g id="edge1" class="edge">
<title>python_branch_task-&gt;task_a</title>
<path fill="none" stroke="black" d="M123.99,-69.87C139.56,-63.18 157.04,-55.68 171.96,-49.27"></path>
<polygon fill="black" stroke="black" points="173.55,-52.4 181.35,-45.24 170.78,-45.97 173.55,-52.4"></polygon>
</g>
<!-- task_b -->
<g id="node3" class="node">
<title>task_b</title>
<polygon fill="none" stroke="black" points="235.53,-106 181.53,-106 181.53,-70 235.53,-70 235.53,-106"></polygon>
<text text-anchor="middle" x="208.53" y="-83.8" font-family="Times,serif" font-size="14.00">task_b</text>
</g>
<!-- python_branch_task&#45;&gt;task_b -->
<g id="edge2" class="edge">
<title>python_branch_task-&gt;task_b</title>
<path fill="none" stroke="black" d="M145.39,-88C154.28,-88 163.16,-88 171.3,-88"></path>
<polygon fill="black" stroke="black" points="171.53,-91.5 181.53,-88 171.53,-84.5 171.53,-91.5"></polygon>
</g>
<!-- task_c -->
<g id="node4" class="node">
<title>task_c</title>
<polygon fill="none" stroke="black" points="235.53,-160 181.53,-160 181.53,-124 235.53,-124 235.53,-160"></polygon>
<text text-anchor="middle" x="208.53" y="-137.8" font-family="Times,serif" font-size="14.00">task_c</text>
</g>
<!-- python_branch_task&#45;&gt;task_c -->
<g id="edge3" class="edge">
<title>python_branch_task-&gt;task_c</title>
<path fill="none" stroke="black" d="M123.99,-106.13C139.56,-112.82 157.04,-120.32 171.96,-126.73"></path>
<polygon fill="black" stroke="black" points="170.78,-130.03 181.35,-130.76 173.55,-123.6 170.78,-130.03"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">from airflow import DAG</span>
<span id="cb2-2">import pendulum</span>
<span id="cb2-3">from airflow.operators.python import PythonOperator</span>
<span id="cb2-4">from airflow.operators.python import BranchPythonOperator</span>
<span id="cb2-5"></span>
<span id="cb2-6">with DAG(</span>
<span id="cb2-7">    dag_id='dags_branch_python_operator',</span>
<span id="cb2-8">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'), </span>
<span id="cb2-9">    schedule='0 1 * * *',</span>
<span id="cb2-10">    catchup=False</span>
<span id="cb2-11">) as dag:</span>
<span id="cb2-12">    def select_random():</span>
<span id="cb2-13">        import random</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        item_lst = ['A','B','C']</span></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        selected_item = random.choice(item_lst)</span></span>
<span id="cb2-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if selected_item == 'A':</span></span>
<span id="cb2-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return 'task_a' # task_id를 string 값으로 return해야함</span></span>
<span id="cb2-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        elif selected_item in ['B','C']:</span></span>
<span id="cb2-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return ['task_b','task_c'] # 여러 task를 동시에 수행시킬 땐 리스트로 반환</span></span>
<span id="cb2-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 일반 operator의 parameter도 있음</span></span>
<span id="cb2-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_branch_task = BranchPythonOperator(</span></span>
<span id="cb2-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='python_branch_task',</span></span>
<span id="cb2-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=select_random</span></span>
<span id="cb2-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 후행 task 3개</span></span>
<span id="cb2-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def common_func(**kwargs):</span></span>
<span id="cb2-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs['selected'])</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = PythonOperator(</span></span>
<span id="cb2-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb2-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'A'}</span></span>
<span id="cb2-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_b = PythonOperator(</span></span>
<span id="cb2-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_b',</span></span>
<span id="cb2-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'B'}</span></span>
<span id="cb2-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_c = PythonOperator(</span></span>
<span id="cb2-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_c',</span></span>
<span id="cb2-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'C'}</span></span>
<span id="cb2-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_branch_task &gt;&gt; [task_a, task_b, task_c]</span></span></code></pre></div>
<ul>
<li>나의 경우 airflow web service상에서 1회 실행 시켰을 때 selected_item의 값이 task_b, task_b가 선택됐음
<ul>
<li>graph 버튼을 눌러 보면 가장 최근에 돌았던 task들이 return 된다.</li>
<li>task_a가 분홍색 박스로 skipped 상태인 것을 확인 할 수 있다.</li>
<li>graph에서 python_branch_task를 누르고 xcom을 누르면 다음과 같은 table을 확인할 수 있다.</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;">Key</th>
<th style="text-align: left;">Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">skipmixin_key</td>
<td style="text-align: left;">{‘followed’: [‘task_c’, ‘task_b’]}</td>
</tr>
<tr class="even">
<td style="text-align: left;">return_value</td>
<td style="text-align: left;">[‘task_b’, ‘task_c’]</td>
</tr>
</tbody>
</table>
<ul>
<li>여기서 <code>skipmixin_key</code> 의 value값의 key 값이 ‘followed’ 이고 [‘task_c’, ‘task_b’] 인 것을 볼 수 있다. 필요시 어떤 task들이 선택되었는지 확인하려면 xcom을 통해 확인 가능하다.</li>
<li>log 를 보면</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {python.py:183} INFO - Done. Returned value was: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {python.py:216} INFO - Branch callable return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {skipmixin.py:161} INFO - Following branch <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {skipmixin.py:221} INFO - Skipping tasks <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_a'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    </span></code></pre></div></li>
</ul>
</section>
</section>
</section>
<section id="task-분기처리하기-with-task.branch" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Task 분기처리하기 with task.branch</h1>
<section id="task.branch-이해-branchpythonoperator-vs-task.branch-decorator" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="task.branch-이해-branchpythonoperator-vs-task.branch-decorator"><span class="header-section-number">2.1</span> Task.branch 이해: BranchPythonOperator vs task.branch Decorator</h2>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">from airflow.operators.python import BranchPythonOperator</span>
<span id="cb4-2">def select_random(): </span>
<span id="cb4-3">    import random</span>
<span id="cb4-4">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A','B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-5">    selected_item = random.choice(item_lst)</span>
<span id="cb4-6">    if selected_item == 'A':</span>
<span id="cb4-7">        return 'task_a'</span>
<span id="cb4-8">    elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-9">        return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">python_branch_task = BranchPythonOperator(</span>
<span id="cb4-12">    task_id= 'branching',</span>
<span id="cb4-13">    python_callable = select_random</span>
<span id="cb4-14">)</span>
<span id="cb4-15">python_branch_task &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">from airflow.operators.python import task</span>
<span id="cb5-2"></span>
<span id="cb5-3">@task.branch(task_id='python_branch_task')</span>
<span id="cb5-4">def select_random(): </span>
<span id="cb5-5">    import random</span>
<span id="cb5-6">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A','B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-7">    selected_item = random.choice(item_lst)</span>
<span id="cb5-8">    if selected_item == 'A':</span>
<span id="cb5-9">        return 'task_a'</span>
<span id="cb5-10">    elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-11">        return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">select_random() &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
<ul>
<li>BranchPythonOperator와 비교하여 select_random()을 호출 또는 맵핑 하는 방식이 decorator에서는 <code>@task.branch(task_id='python_branch_task')</code>으로 표현 되었고 task flow를 표현하는 task connection 방식도 <code>select_random() &gt;&gt; [task_a , task_b , task_c]</code> 로 표현 됐다.</li>
<li>BranchPythonOperator의 <code>python_branch_task</code> object와 task.branch (decorator)의 select_random()는 사실상 같은 객체이다.</li>
<li>차이점은 <code>BranchPythonOperator(...)</code>를 실행시킨 것과 <code>select_random(...)</code> 함수를 실행한 것 외엔 그 역할과 기능은 같다 (같은 object 반환).</li>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">from airflow import DAG</span>
<span id="cb6-2">from datetime import datetime</span>
<span id="cb6-3">from airflow.operators.python import PythonOperator</span>
<span id="cb6-4">from airflow.decorators import task</span>
<span id="cb6-5"></span>
<span id="cb6-6">with DAG(</span>
<span id="cb6-7">    dag_id='dags_python_with_branch_decorator',</span>
<span id="cb6-8">    start_date=datetime(2023,4,1),</span>
<span id="cb6-9">    schedule=None,</span>
<span id="cb6-10">    catchup=False</span>
<span id="cb6-11">) as dag:</span>
<span id="cb6-12">    @task.branch(task_id='python_branch_task')</span>
<span id="cb6-13">    def select_random():</span>
<span id="cb6-14">        import random</span>
<span id="cb6-15">        item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A', 'B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-16">        selected_item = random.choice(item_lst)</span>
<span id="cb6-17">        if selected_item == 'A':</span>
<span id="cb6-18">            return 'task_a'</span>
<span id="cb6-19">        elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>:</span>
<span id="cb6-20">            return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-21">    </span>
<span id="cb6-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def common_func(**kwargs):</span></span>
<span id="cb6-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs['selected'])</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = PythonOperator(</span></span>
<span id="cb6-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb6-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'A'}</span></span>
<span id="cb6-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-30"></span>
<span id="cb6-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_b = PythonOperator(</span></span>
<span id="cb6-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_b',</span></span>
<span id="cb6-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'B'}</span></span>
<span id="cb6-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-36"></span>
<span id="cb6-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_c = PythonOperator(</span></span>
<span id="cb6-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_c',</span></span>
<span id="cb6-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'C'}</span></span>
<span id="cb6-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-42"></span>
<span id="cb6-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    select_random() &gt;&gt; [task_a, task_b, task_c]</span></span></code></pre></div>
<ul>
<li>airflow web service의 결과물은 BranchPythonOperator나 decorator나 같았음</li>
</ul>
</section>
</section>
<section id="task-분기처리하기-with-basebranchoperator" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task 분기처리하기 With BaseBranchOperator</h1>
<p>BaseBranchOperator 클래스 상속해서 직접 함수를 개발해서 사용해야함.</p>
<section id="basebranchoperator-이해-요약" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="basebranchoperator-이해-요약"><span class="header-section-number">3.1</span> BaseBranchOperator 이해 요약</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">from airflow.operators.branch import BaseBranchOperator</span>
<span id="cb7-2">with DAG(...</span>
<span id="cb7-3">) as dag:</span>
<span id="cb7-4">    class CustomBranchOperator(BaseBranchOperator): #클래스 이름은 임의로 지정해 줌</span>
<span id="cb7-5">    #Python의 class 상속 syntax: class MyclassName(상속할className):</span>
<span id="cb7-6">    #Python은 다중 상속가능</span>
<span id="cb7-7">        def choose_branch(self,context): </span>
<span id="cb7-8">        # 함수 재정의 : Overriding, 함수 이름 바꾸면 안됨!</span>
<span id="cb7-9">        # parameter도 바꾸면 안됨</span>
<span id="cb7-10">            import random</span>
<span id="cb7-11">            print(context) # context에 어떤 내용이 있는지 출력</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            item_lst = ['A', 'B','C]</span></span>
<span id="cb7-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            selected_item = random.choice(item_lst)</span></span>
<span id="cb7-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if selected_item == 'A':</span></span>
<span id="cb7-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return 'task_a'</span></span>
<span id="cb7-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            elif selected_item in ['B','C']:</span></span>
<span id="cb7-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return ['task_b','task_c']</span></span>
<span id="cb7-19"></span>
<span id="cb7-20">custom_branch_operator = CustomBranchOperator(task_id ='python_branch_task') # 클래스 실행하여 custom_branch_operator object 생성</span>
<span id="cb7-21">custom_branch_operator &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<ul>
<li><p>클래스 상속하여 새로운 클래스 만들어야함: BaseBranchOperator 상속시 choose_branch 함수를 구현해 줘야 함</p></li>
<li><p><code>CustomBranchOperator</code> 클래스 이름은 임의로 지정해준 이름</p></li>
<li><p>class 선언시 <code>class childClass(상속할parentClass):</code> 상속할 부모클래스를 2개이상 지정하는 다중 상속이 가능하긴 하지만 권고하지 않음.</p></li>
<li><p><code>choose_branch()</code> 함수를 만든 이유를 알기 위해선 BaseBranchOperator class에 대해서 알아야함</p>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/branch/index.html">airflow operators-airflow.operators.branch or google ‘airflow operators’</a> :::{.callout-note} ## Description</li>
</ul>
<p>Bases: airflow.models.baseoperator.BaseOperator, airflow.models.skipmixin.SkipMixin A base class for creating operators with branching functionality, like to BranchPythonOperator. <strong>Users should create a subclass from this operator and implement the function choose_branch(self, context). This should run whatever business logic is needed to determine the branch, and return either the task_id for a single task (as a str) or a list of task_ids</strong>. The operator will continue with the returned task_id(s), and all other tasks directly downstream of this operator will be skipped. :::</p>
<ul>
<li>함수명과 인자(argument)명도 반드시 일치시켜야함</li>
<li><code>choose_branch(self,context)</code>의 context는 pythonOperator 쓸때 **kwargs의 parameters들을 사용할 수 있게 해주는 parameter
<ul>
<li>context 인자엔 op_kargs와 같이 data_interval_start, data_interval_end 등과 같은 정보를 제공해주는 인자</li>
</ul></li>
<li><code>print(context)</code> 결과</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-24, 00:29:33 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {logging_mixin.py:149} INFO - {'conf': &lt;***.configuration.AirflowConfigParser object at 0x7fc3d5dd2cd0&gt;, 'dag': &lt;DAG: dags_base_branch_operator&gt;, 'dag_run': &lt;DagRun dags_base_branch_operator @ 2023-06-24 00:29:31.444830+00:00: manual__2023-06-24T00:29:31.444830+00:00, state:running, queued_at: 2023-06-24 00:29:31.455604+00:00. externally triggered: True&gt;, 'data_interval_end': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'data_interval_start': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'ds': '2023-06-24', 'ds_nodash': '20230624', 'execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'expanded_ti_count': None, 'inlets': [], 'logical_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'macros': &lt;module '***.macros' from '/home/***/.local/lib/python3.7/site-packages/***/macros/__init__.py'&gt;, 'next_ds': '2023-06-24', 'next_ds_nodash': '20230624', 'next_execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'outlets': [], 'params': {}, 'prev_data_interval_start_success': None, 'prev_data_interval_end_success': None, 'prev_ds': '2023-06-24', 'prev_ds_nodash': '20230624', 'prev_execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'prev_execution_date_success': None, 'prev_start_date_success': None, 'run_id': 'manual__2023-06-24T00:29:31.444830+00:00', 'task': &lt;Task(CustomBranchOperator): python_branch_task&gt;, 'task_instance': &lt;TaskInstance: dags_base_branch_operator.python_branch_task manual__2023-06-24T00:29:31.444830+00:00 [running]&gt;, 'task_instance_key_str': 'dags_base_branch_operator__python_branch_task__20230624', 'test_mode': False, 'ti': &lt;TaskInstance: dags_base_branch_operator.python_branch_task manual__2023-06-24T00:29:31.444830+00:00 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">running</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>&gt;, 'tomorrow_ds': '2023-06-25', 'tomorrow_ds_nodash': '20230625', 'triggering_dataset_events': &lt;Proxy at 0x7fc3ab28c8c0 with factory &lt;function TaskInstance.get_template_context.&lt;locals&gt;.get_triggering_events at 0x7fc3ab277c20&gt;&gt;, 'ts': '2023-06-24T00:29:31.444830+00:00', 'ts_nodash': '20230624T002931', 'ts_nodash_with_tz': '20230624T002931.444830+0000', 'var': {'json': None, 'value': None}, 'conn': None, 'yesterday_ds': '2023-06-23', 'yesterday_ds_nodash': '20230623'}</span></code></pre></div>
<p>context결과물은 위와 같은 시간 정보를 담고 있기 때문에 꺼내쓸 수 있다.</p></li>
<li><p>분기 처리 결과는 다른 2 방식의 결과와 같음</p></li>
<li><p>DAG Full Example</p></li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">from airflow import DAG</span>
<span id="cb9-2">import pendulum</span>
<span id="cb9-3">from airflow.operators.branch import BaseBranchOperator</span>
<span id="cb9-4">from airflow.operators.python import PythonOperator</span>
<span id="cb9-5"></span>
<span id="cb9-6">with DAG(</span>
<span id="cb9-7">    dag_id='dags_base_branch_operator',</span>
<span id="cb9-8">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb9-9">    schedule=None,</span>
<span id="cb9-10">    catchup=False</span>
<span id="cb9-11">) as dag:</span>
<span id="cb9-12">    class CustomBranchOperator(BaseBranchOperator):</span>
<span id="cb9-13">        def choose_branch(self, context):</span>
<span id="cb9-14">            import random</span>
<span id="cb9-15">            print(context) # context에 어떤 내용이 있는지 출력</span>
<span id="cb9-16">            </span>
<span id="cb9-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            item_lst = ['A', 'B', 'C']</span></span>
<span id="cb9-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            selected_item = random.choice(item_lst)</span></span>
<span id="cb9-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if selected_item == 'A':</span></span>
<span id="cb9-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return 'task_a'</span></span>
<span id="cb9-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            elif selected_item in ['B','C']:</span></span>
<span id="cb9-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return ['task_b','task_c']</span></span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    custom_branch_operator = CustomBranchOperator(task_id='python_branch_task')</span></span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def common_func(**kwargs):</span></span>
<span id="cb9-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs['selected'])</span></span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = PythonOperator(</span></span>
<span id="cb9-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb9-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb9-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'A'}</span></span>
<span id="cb9-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb9-36"></span>
<span id="cb9-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_b = PythonOperator(</span></span>
<span id="cb9-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_b',</span></span>
<span id="cb9-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb9-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'B'}</span></span>
<span id="cb9-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb9-42"></span>
<span id="cb9-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_c = PythonOperator(</span></span>
<span id="cb9-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_c',</span></span>
<span id="cb9-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb9-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'C'}</span></span>
<span id="cb9-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb9-48"></span>
<span id="cb9-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    custom_branch_operator &gt;&gt; [task_a, task_b, task_c]</span></span></code></pre></div>
</section>
<section id="summary" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="summary"><span class="header-section-number">3.2</span> Summary</h2>
<ul>
<li>Task 분기처리 방법
<ol type="1">
<li>BranchPythonOperator (자주 사용)</li>
<li>task.branch 데커레이터 이용 (자주 사용)</li>
<li>BaseBranchOperator 상속 , choose_branch 를 재정의해야 함 (덜 사용)</li>
</ol></li>
<li>공통적으로 리턴 값으로 후행 Task 의 id 를 str 또는 list 로 리턴해야 함</li>
<li>3가지 분기처리 방법은 방법만 다를 뿐 결과는 동일함</li>
<li>3 보다는 1 또는 2를 주로 사용함</li>
</ul>
</section>
</section>
<section id="trigger-rule" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Trigger Rule</h1>
<section id="trigger-rule-종류" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="trigger-rule-종류"><span class="header-section-number">4.1</span> Trigger Rule 종류</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 180,-205 180,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 168,-193 168,-8 8,-8"></polygon>
<text text-anchor="middle" x="88" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- task1 -->
<g id="node1" class="node">
<title>task1</title>
<polygon fill="none" stroke="black" points="70,-160 16,-160 16,-124 70,-124 70,-160"></polygon>
<text text-anchor="middle" x="43" y="-137.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- task4 -->
<g id="node4" class="node">
<title>task4</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon>
<text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task4</text>
</g>
<!-- task1&#45;&gt;task4 -->
<g id="edge1" class="edge">
<title>task1-&gt;task4</title>
<path fill="none" stroke="black" d="M70.4,-125.8C78.83,-120.63 88.29,-114.82 97.22,-109.34"></path>
<polygon fill="black" stroke="black" points="99.23,-112.22 105.92,-104 95.57,-106.25 99.23,-112.22"></polygon>
</g>
<!-- task2 -->
<g id="node2" class="node">
<title>task2</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon>
<text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task2</text>
</g>
<!-- task2&#45;&gt;task4 -->
<g id="edge2" class="edge">
<title>task2-&gt;task4</title>
<path fill="none" stroke="black" d="M70.4,-88C78.39,-88 87.31,-88 95.82,-88"></path>
<polygon fill="black" stroke="black" points="95.92,-91.5 105.92,-88 95.92,-84.5 95.92,-91.5"></polygon>
</g>
<!-- task3 -->
<g id="node3" class="node">
<title>task3</title>
<polygon fill="none" stroke="black" points="70,-52 16,-52 16,-16 70,-16 70,-52"></polygon>
<text text-anchor="middle" x="43" y="-29.8" font-family="Times,serif" font-size="14.00">task3</text>
</g>
<!-- task3&#45;&gt;task4 -->
<g id="edge3" class="edge">
<title>task3-&gt;task4</title>
<path fill="none" stroke="black" d="M70.4,-50.2C78.83,-55.37 88.29,-61.18 97.22,-66.66"></path>
<polygon fill="black" stroke="black" points="95.57,-69.75 105.92,-72 99.23,-63.78 95.57,-69.75"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>branch와 반대되는 개념으로 여러 상위 tasks가 하나의 하위 task로 연결되는 flow로 만들때 사용</li>
<li>즉, 여러 상위 Task 들의 상태에 따라 후행 task의 수행여부 결정할 때 쓰인다</li>
<li>기본 값 : 여러 상위 Task들이 모두 성공시에만 수행</li>
<li>상위 task의 수행 상태에 따라 조건적으로 후행 task의 수행 여부를 결정할 수 있다.</li>
<li>trigger option은 하위 task를 이용하여 줄 수 있다.</li>
<li>모든 airflow operator는 trigger rule option을 줄 수 있다.</li>
<li>11가지 trigger rules</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 73%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Default</th>
<th style="text-align: left;">Left</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">all_success (default)</td>
<td style="text-align: left;">상위 tasks 가 모두 성공하면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">all_failed</td>
<td style="text-align: left;">상위 tasks 가 모두 실패하면 실행</td>
</tr>
<tr class="odd">
<td style="text-align: left;">all_done</td>
<td style="text-align: left;">상위 tasks 가 모두 수행되면 실행 (실패도 수행된것에 포함)</td>
</tr>
<tr class="even">
<td style="text-align: left;">all_skipped</td>
<td style="text-align: left;">상위 tasks 가 모두 Skipped 상태면 실행</td>
</tr>
<tr class="odd">
<td style="text-align: left;">one_failed</td>
<td style="text-align: left;">상위 tasks 중 하나 이상 실패하면 실행 (모든 상위 Tasks의 완료를 기다리지 않음)</td>
</tr>
<tr class="even">
<td style="text-align: left;">one_success</td>
<td style="text-align: left;">상위 tasks 중 하나 이상 성공하면 실행 (모든 상위 Tasks의 완료를 기다리지 않음)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">one_done</td>
<td style="text-align: left;">상위 tasks 중 하나 이상 성공 또는 실패 하면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">none_failed</td>
<td style="text-align: left;">상위 task s중 실패가 없는 경우 실행 (성공 또는 Skipped 상태)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">none_failed_min_one_success</td>
<td style="text-align: left;">상위 tasks 중 실패가 없고 성공한 Task가 적어도 1개 이상이면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">none_skipped</td>
<td style="text-align: left;">Skip된 상위 Task가 없으면 실행 (상위 Task가 성공, 실패하여도 무방)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">always</td>
<td style="text-align: left;">언제나 실행</td>
</tr>
</tbody>
</table>
<ul>
<li>위의 표에서 모든 상위 <strong>task를 기다리지 않음</strong>은 각 각의 상위 task들의 처리 시간이 다를 때 가장 빠르게 처리되는 상위 task에 따라서 후행 task가 수행된다는 것을 의미한다. 예를 들어, one_failed의 경우
<ul>
<li>상위 task1 (2분소요)</li>
<li>상위 task2 (10분소요)</li>
<li>상위 task3 (20분소요) 일때,</li>
<li>상위 task 3개 중 task1의 결과가 먼저 fail이 나올 경우 task2,3 을 기다리지 않고 바로 triger가 발동되어 하위 task4가 수행된다.</li>
</ul></li>
</ul>
</section>
<section id="trigger-rule-실습-trigger_rule-all_done" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="trigger-rule-실습-trigger_rule-all_done"><span class="header-section-number">4.2</span> 2. Trigger Rule 실습) trigger_rule = all_done</h2>
<ul>
<li>아래 예시에서 4개의 task가 정의됨</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1"></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 상위 task1</span></span>
<span id="cb10-3">bash_upstream_1 = BashOperator(</span>
<span id="cb10-4">    task_id = 'bash_upstream_1',</span>
<span id="cb10-5">    bash_command = 'echo upstream1'</span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8">@task(task_id =='python_upstream_1') # 상위 task2</span>
<span id="cb10-9">def python_upstream_1():</span>
<span id="cb10-10">    AirflowException('downstream_1 Exception!') # AirflowException() fail을 반환하여 무조건 task 실패처리가되도록 설정</span>
<span id="cb10-11"></span>
<span id="cb10-12">@task(task_id =='python_upstream_2') # 상위 task3</span>
<span id="cb10-13">def python_upstream_2():</span>
<span id="cb10-14">    print('정상 처리')</span>
<span id="cb10-15"></span>
<span id="cb10-16">@task(task_id ='python_downstream_1', trigger_rule ='all_done') #하위 task4</span>
<span id="cb10-17">def python_downstream_1():</span>
<span id="cb10-18">    print('정상 처리')</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">bash_upstream_1 , python_upstream_1(), python_upstream_2()</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; python_downstream_1()</span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 347.52 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 343.52,-205 343.52,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 331.52,-193 331.52,-8 8,-8"></polygon>
<text text-anchor="middle" x="169.76" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- bash_upstream_1 -->
<g id="node1" class="node">
<title>bash_upstream_1</title>
<polygon fill="none" stroke="black" points="136.58,-160 22.62,-160 22.62,-124 136.58,-124 136.58,-160"></polygon>
<text text-anchor="middle" x="79.6" y="-137.8" font-family="Times,serif" font-size="14.00">bash_upstream_1</text>
</g>
<!-- python_downstream_1 -->
<g id="node4" class="node">
<title>python_downstream_1</title>
<polygon fill="none" stroke="black" points="323.68,-106 179.05,-106 179.05,-70 323.68,-70 323.68,-106"></polygon>
<text text-anchor="middle" x="251.37" y="-83.8" font-family="Times,serif" font-size="14.00">python_downstream_1</text>
</g>
<!-- bash_upstream_1&#45;&gt;python_downstream_1 -->
<g id="edge1" class="edge">
<title>bash_upstream_1-&gt;python_downstream_1</title>
<path fill="none" stroke="black" d="M136.66,-124.17C151.78,-119.36 168.28,-114.11 183.9,-109.14"></path>
<polygon fill="black" stroke="black" points="185.03,-112.46 193.5,-106.09 182.91,-105.79 185.03,-112.46"></polygon>
</g>
<!-- python_upstream_1 -->
<g id="node2" class="node">
<title>python_upstream_1</title>
<polygon fill="none" stroke="black" points="143.31,-106 15.9,-106 15.9,-70 143.31,-70 143.31,-106"></polygon>
<text text-anchor="middle" x="79.6" y="-83.8" font-family="Times,serif" font-size="14.00">python_upstream_1</text>
</g>
<!-- python_upstream_1&#45;&gt;python_downstream_1 -->
<g id="edge2" class="edge">
<title>python_upstream_1-&gt;python_downstream_1</title>
<path fill="none" stroke="black" d="M143.33,-88C151.68,-88 160.34,-88 168.95,-88"></path>
<polygon fill="black" stroke="black" points="169.02,-91.5 179.02,-88 169.02,-84.5 169.02,-91.5"></polygon>
</g>
<!-- python_upstream_2 -->
<g id="node3" class="node">
<title>python_upstream_2</title>
<polygon fill="none" stroke="black" points="143.31,-52 15.9,-52 15.9,-16 143.31,-16 143.31,-52"></polygon>
<text text-anchor="middle" x="79.6" y="-29.8" font-family="Times,serif" font-size="14.00">python_upstream_2</text>
</g>
<!-- python_upstream_2&#45;&gt;python_downstream_1 -->
<g id="edge3" class="edge">
<title>python_upstream_2-&gt;python_downstream_1</title>
<path fill="none" stroke="black" d="M137.6,-52.13C152.38,-56.83 168.42,-61.93 183.65,-66.78"></path>
<polygon fill="black" stroke="black" points="182.93,-70.22 193.52,-69.92 185.05,-63.55 182.93,-70.22"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>bash_upstream_1(성공), python_upstream_1(실패), python_upstream_2(성공).</li>
<li>triger rule이 all done이기 때문에 python_upstream_1(실패)여도 python_downstream_1은 수행되어야 한다.</li>
<li>다른 Operator such as BashOperator, pythonOperator의 경우도 <code>trigger_rule =='all_done'</code> parameter 똑같이 넣어주면 됨</li>
</ul>
</section>
<section id="trigger-rule-실습-triger_rule-none_skipped" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="trigger-rule-실습-triger_rule-none_skipped"><span class="header-section-number">4.3</span> 2. Trigger Rule 실습) triger_rule = none_skipped</h2>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">@task.branch(task_id ='branching') #상위 task1</span>
<span id="cb11-2">def random_branch():</span>
<span id="cb11-3">    import random</span>
<span id="cb11-4">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">' A', ' B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-5">    selected_item = random.choice(item_lst)</span>
<span id="cb11-6">    if selected_item == 'A':</span>
<span id="cb11-7">        return 'task_a'</span>
<span id="cb11-8">    elif selected_item == 'B':</span>
<span id="cb11-9">        return 'task_b'</span>
<span id="cb11-10">    elif selected_item == 'C':</span>
<span id="cb11-11">        return 'task_c'</span>
<span id="cb11-12"></span>
<span id="cb11-13">#상위 task2</span>
<span id="cb11-14">task_a = BashOperator(</span>
<span id="cb11-15">    task_id ='task_a',</span>
<span id="cb11-16">    bash_command = 'echo upstream1'</span>
<span id="cb11-17">    )</span>
<span id="cb11-18"></span>
<span id="cb11-19">#상위 task3</span>
<span id="cb11-20">@task(task_id ='task_b')</span>
<span id="cb11-21">def task_b():</span>
<span id="cb11-22">    print('정상 처리')</span>
<span id="cb11-23"></span>
<span id="cb11-24">#상위 task4</span>
<span id="cb11-25">@task(task_id =='task_c')</span>
<span id="cb11-26">def task_c():</span>
<span id="cb11-27">    print('정상 처리')</span>
<span id="cb11-28"></span>
<span id="cb11-29">#하위 task5</span>
<span id="cb11-30">@task(task_id =='task_d', trigger_rule ='none_skipped')</span>
<span id="cb11-31">def task_d():</span>
<span id="cb11-32">    print('정상 처리')</span>
<span id="cb11-33"></span>
<span id="cb11-34">random_branch() &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b(), task_c()</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task_d()</span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 323.86 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 319.86,-205 319.86,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 307.86,-193 307.86,-8 8,-8"></polygon>
<text text-anchor="middle" x="157.93" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- random_branch -->
<g id="node1" class="node">
<title>random_branch</title>
<polygon fill="none" stroke="black" points="119.78,-106 16.07,-106 16.07,-70 119.78,-70 119.78,-106"></polygon>
<text text-anchor="middle" x="67.93" y="-83.8" font-family="Times,serif" font-size="14.00">random_branch</text>
</g>
<!-- task_a -->
<g id="node2" class="node">
<title>task_a</title>
<polygon fill="none" stroke="black" points="209.86,-52 155.86,-52 155.86,-16 209.86,-16 209.86,-52"></polygon>
<text text-anchor="middle" x="182.86" y="-29.8" font-family="Times,serif" font-size="14.00">task_a</text>
</g>
<!-- random_branch&#45;&gt;task_a -->
<g id="edge1" class="edge">
<title>random_branch-&gt;task_a</title>
<path fill="none" stroke="black" d="M106.85,-69.87C119.61,-63.76 133.8,-56.98 146.37,-50.97"></path>
<polygon fill="black" stroke="black" points="148.1,-54.02 155.62,-46.55 145.08,-47.7 148.1,-54.02"></polygon>
</g>
<!-- task_b -->
<g id="node3" class="node">
<title>task_b</title>
<polygon fill="none" stroke="black" points="209.86,-106 155.86,-106 155.86,-70 209.86,-70 209.86,-106"></polygon>
<text text-anchor="middle" x="182.86" y="-83.8" font-family="Times,serif" font-size="14.00">task_b</text>
</g>
<!-- random_branch&#45;&gt;task_b -->
<g id="edge2" class="edge">
<title>random_branch-&gt;task_b</title>
<path fill="none" stroke="black" d="M120.11,-88C128.71,-88 137.47,-88 145.6,-88"></path>
<polygon fill="black" stroke="black" points="145.84,-91.5 155.84,-88 145.84,-84.5 145.84,-91.5"></polygon>
</g>
<!-- task_c -->
<g id="node4" class="node">
<title>task_c</title>
<polygon fill="none" stroke="black" points="209.86,-160 155.86,-160 155.86,-124 209.86,-124 209.86,-160"></polygon>
<text text-anchor="middle" x="182.86" y="-137.8" font-family="Times,serif" font-size="14.00">task_c</text>
</g>
<!-- random_branch&#45;&gt;task_c -->
<g id="edge3" class="edge">
<title>random_branch-&gt;task_c</title>
<path fill="none" stroke="black" d="M106.85,-106.13C119.61,-112.24 133.8,-119.02 146.37,-125.03"></path>
<polygon fill="black" stroke="black" points="145.08,-128.3 155.62,-129.45 148.1,-121.98 145.08,-128.3"></polygon>
</g>
<!-- task_d -->
<g id="node5" class="node">
<title>task_d</title>
<polygon fill="none" stroke="black" points="299.86,-106 245.86,-106 245.86,-70 299.86,-70 299.86,-106"></polygon>
<text text-anchor="middle" x="272.86" y="-83.8" font-family="Times,serif" font-size="14.00">task_d</text>
</g>
<!-- task_a&#45;&gt;task_d -->
<g id="edge4" class="edge">
<title>task_a-&gt;task_d</title>
<path fill="none" stroke="black" d="M210.26,-50.2C218.69,-55.37 228.15,-61.18 237.08,-66.66"></path>
<polygon fill="black" stroke="black" points="235.42,-69.75 245.77,-72 239.08,-63.78 235.42,-69.75"></polygon>
</g>
<!-- task_b&#45;&gt;task_d -->
<g id="edge5" class="edge">
<title>task_b-&gt;task_d</title>
<path fill="none" stroke="black" d="M210.26,-88C218.25,-88 227.17,-88 235.68,-88"></path>
<polygon fill="black" stroke="black" points="235.77,-91.5 245.77,-88 235.77,-84.5 235.77,-91.5"></polygon>
</g>
<!-- task_c&#45;&gt;task_d -->
<g id="edge6" class="edge">
<title>task_c-&gt;task_d</title>
<path fill="none" stroke="black" d="M210.26,-125.8C218.69,-120.63 228.15,-114.82 237.08,-109.34"></path>
<polygon fill="black" stroke="black" points="239.08,-112.22 245.77,-104 235.42,-106.25 239.08,-112.22"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>skip이 있기 때문에 실제로 task_d가 돌지 말아야한다.</li>
<li>Dags Full Example</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow import DAG</span>
<span id="cb12-2">from airflow.decorators import task</span>
<span id="cb12-3">from airflow.operators.python import PythonOperator</span>
<span id="cb12-4">from airflow.operators.bash import BashOperator</span>
<span id="cb12-5">from airflow.exceptions import AirflowException</span>
<span id="cb12-6"></span>
<span id="cb12-7">import pendulum</span>
<span id="cb12-8"></span>
<span id="cb12-9">with DAG(</span>
<span id="cb12-10">    dag_id='dags_python_with_trigger_rule_eg1',</span>
<span id="cb12-11">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb12-12">    schedule=None,</span>
<span id="cb12-13">    catchup=False</span>
<span id="cb12-14">) as dag:</span>
<span id="cb12-15">    bash_upstream_1 = BashOperator(</span>
<span id="cb12-16">        task_id='bash_upstream_1',</span>
<span id="cb12-17">        bash_command='echo upstream1'</span>
<span id="cb12-18">    )</span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_upstream_1')</span></span>
<span id="cb12-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_upstream_1():</span></span>
<span id="cb12-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        raise AirflowException('downstream_1 Exception!')</span></span>
<span id="cb12-23"></span>
<span id="cb12-24"></span>
<span id="cb12-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_upstream_2')</span></span>
<span id="cb12-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_upstream_2():</span></span>
<span id="cb12-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb12-28"></span>
<span id="cb12-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_downstream_1', trigger_rule='all_done')</span></span>
<span id="cb12-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_downstream_1():</span></span>
<span id="cb12-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb12-32"></span>
<span id="cb12-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [bash_upstream_1, python_upstream_1(), python_upstream_2()] &gt;&gt; python_downstream_1()</span></span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow import DAG</span>
<span id="cb13-2">from airflow.decorators import task</span>
<span id="cb13-3">from airflow.operators.python import PythonOperator</span>
<span id="cb13-4">from airflow.operators.bash import BashOperator</span>
<span id="cb13-5">from airflow.exceptions import AirflowException</span>
<span id="cb13-6"></span>
<span id="cb13-7">import pendulum</span>
<span id="cb13-8"></span>
<span id="cb13-9">with DAG(</span>
<span id="cb13-10">    dag_id='dags_python_with_trigger_rule_eg2',</span>
<span id="cb13-11">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb13-12">    schedule=None,</span>
<span id="cb13-13">    catchup=False</span>
<span id="cb13-14">) as dag:</span>
<span id="cb13-15">    @task.branch(task_id='branching')</span>
<span id="cb13-16">    def random_branch():</span>
<span id="cb13-17">        import random</span>
<span id="cb13-18">        item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A', 'B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-19">        selected_item = random.choice(item_lst)</span>
<span id="cb13-20">        if selected_item == 'A':</span>
<span id="cb13-21">            return 'task_a'</span>
<span id="cb13-22">        elif selected_item == 'B':</span>
<span id="cb13-23">            return 'task_b'</span>
<span id="cb13-24">        elif selected_item == 'C':</span>
<span id="cb13-25">            return 'task_c'</span>
<span id="cb13-26"></span>
<span id="cb13-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = BashOperator(</span></span>
<span id="cb13-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb13-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo upstream1'</span></span>
<span id="cb13-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb13-31"></span>
<span id="cb13-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_b')</span></span>
<span id="cb13-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_b():</span></span>
<span id="cb13-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb13-35"></span>
<span id="cb13-36"></span>
<span id="cb13-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_c')</span></span>
<span id="cb13-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_c():</span></span>
<span id="cb13-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb13-40"></span>
<span id="cb13-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_d', trigger_rule='none_skipped')</span></span>
<span id="cb13-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_d():</span></span>
<span id="cb13-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb13-44"></span>
<span id="cb13-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    random_branch() &gt;&gt; [task_a, task_b(), task_c()] &gt;&gt; task_d()</span></span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="task-group" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Task Group</h1>
<section id="task-group-개념" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="task-group-개념"><span class="header-section-number">5.1</span> Task Group 개념</h2>
<ul>
<li>tasks를 모아 관리</li>
<li>Task들의 모음: dags안에 task가 많을 경우 비슷한 기능의 tasks 그룹으로 모아서 관리
<ul>
<li>예를 들어, dag안에 50개의 tasks 있다고 할 때, 5개 tasks가 서로 연관성이 높은 connection을 이루고 이런 group이 10개가 있을 수 있다.</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#taskgroups">link: UI Graph탭에서 Task 들을 Group 화하여 보여줌-TaskGroups or google ‘airflow dags’</a>
<ul>
<li>content &gt;&gt; Core Concepts &gt;&gt; DAGs &gt;&gt; DAG Visualization &gt;&gt; Task Groups</li>
</ul></li>
<li>Task Group 안에 Task Group 을 중첩하여 계층적으로 구성 가능</li>
<li>위의 링크에서 section1 과 section2 로 grouping되어 있고 section2에는 inner_section_2 라는 또 다른 task group이 있다.</li>
<li>꼭 써야하는 이유는 성능적인 면에서 딱히 없지만 task flow의 가독성이 높아짐</li>
</ul>
</section>
<section id="task-group-실습" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="task-group-실습"><span class="header-section-number">5.2</span> Task Group 실습</h2>
<ol type="1">
<li>task_group 데커레이터 이용</li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">from airflow.decorators import task_group</span>
<span id="cb14-2">with DAG(...</span>
<span id="cb14-3">) as dag:</span>
<span id="cb14-4">    @task_group(group_id ='first_group')</span>
<span id="cb14-5">    def group_1():</span>
<span id="cb14-6">    ''' task_group 데커레이터를 이용한 첫 번째 그룹''' # docstring: 함수를 설명하는 기법</span>
<span id="cb14-7">    # airflow UI에서는 tooltip이라고 표시됨</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id ='inner_function1')</span></span>
<span id="cb14-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def inner_func1(**kwargs):</span></span>
<span id="cb14-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('첫 번째 TaskGroup 내 첫 번째 task 입니다')</span></span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inner_function2 = PythonOperator(</span></span>
<span id="cb14-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id ='inner_function2',</span></span>
<span id="cb14-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable = inner_func,</span></span>
<span id="cb14-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'msg':'첫 번째 TaskGroup 내 두 번쨰 task 입니다.'}</span></span>
<span id="cb14-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb14-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inner_func1() &gt;&gt; inner_function2</span></span></code></pre></div>
<ol start="2" type="1">
<li>task_group 데커레이터 이용하지 않음 (클래스 이용)</li>
</ol>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow.utils.task_group import TaskGroup</span>
<span id="cb15-2">    with TaskGroup(group_id ='second_group', tooltip='두 번째 그룹') as group_2: # with MyClassName(arg1,age2,...) </span>
<span id="cb15-3">    # tooltipe은 decorator를 이용한 task_group 생성때의 docstring과 같은 역할을 함</span>
<span id="cb15-4">        @task(task_id ='inner_function1')</span>
<span id="cb15-5">        def inner_func1 (**kwargs):</span>
<span id="cb15-6">            print('두 번째 TaskGroup 내 첫 번째 task 입니다.')</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb15-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id = 'inner_function2',</span></span>
<span id="cb15-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_collable = inner_func,</span></span>
<span id="cb15-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs = {'msg': '두 번째 TaskGroup 내 두 번째 task 입니다'}</span></span>
<span id="cb15-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb15-13">inner_func1() &gt;&gt; inner_function2</span></code></pre></div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1">from airflow import DAG</span>
<span id="cb16-2">import pendulum</span>
<span id="cb16-3">import datetime</span>
<span id="cb16-4">from airflow.operators.python import PythonOperator</span>
<span id="cb16-5">from airflow.decorators import task</span>
<span id="cb16-6">from airflow.decorators import task_group</span>
<span id="cb16-7">from airflow.utils.task_group import TaskGroup</span>
<span id="cb16-8"></span>
<span id="cb16-9">with DAG(</span>
<span id="cb16-10">    dag_id="dags_python_with_task_group",</span>
<span id="cb16-11">    schedule=None,</span>
<span id="cb16-12">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb16-13">    catchup=False</span>
<span id="cb16-14">) as dag:</span>
<span id="cb16-15">    def inner_func(**kwargs):</span>
<span id="cb16-16">        msg = kwargs.get('msg') or '' </span>
<span id="cb16-17">        print(msg)</span>
<span id="cb16-18"></span>
<span id="cb16-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task_group(group_id='first_group')</span></span>
<span id="cb16-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def group_1():</span></span>
<span id="cb16-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ''' task_group 데커레이터를 이용한 첫 번째 그룹 '''</span></span>
<span id="cb16-22"></span>
<span id="cb16-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        @task(task_id='inner_function1')</span></span>
<span id="cb16-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        def inner_func1(**kwargs):</span></span>
<span id="cb16-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print('첫 번째 TaskGroup 내 첫 번째 task입니다.')</span></span>
<span id="cb16-26"></span>
<span id="cb16-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb16-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id='inner_function2',</span></span>
<span id="cb16-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_callable=inner_func,</span></span>
<span id="cb16-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs={'msg':'첫 번째 TaskGroup내 두 번쨰 task입니다.'}</span></span>
<span id="cb16-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb16-32"></span>
<span id="cb16-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_func1() &gt;&gt; inner_function2</span></span>
<span id="cb16-34"></span>
<span id="cb16-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with TaskGroup(group_id='second_group', tooltip='두 번째 그룹') as group_2:</span></span>
<span id="cb16-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ''' 클래스 안에 적은 docstring은 표시되지 않음'''</span></span>
<span id="cb16-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        @task(task_id='inner_function1')</span></span>
<span id="cb16-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        def inner_func1(**kwargs):</span></span>
<span id="cb16-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print('두 번째 TaskGroup 내 첫 번째 task입니다.')</span></span>
<span id="cb16-40"></span>
<span id="cb16-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb16-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id='inner_function2',</span></span>
<span id="cb16-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_callable=inner_func,</span></span>
<span id="cb16-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs={'msg': '두 번째 TaskGroup내 두 번째 task입니다.'}</span></span>
<span id="cb16-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb16-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_func1() &gt;&gt; inner_function2</span></span>
<span id="cb16-47"></span>
<span id="cb16-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    group_1() &gt;&gt; group_2</span></span></code></pre></div>
<ul>
<li>위에서 task_id와 group_id가 같지만 에러가 안나는 이유가 task group이 다르기 때문.</li>
<li>위에서 볼 수 있듯이 task group 또한 flow 설정할 수 있음 <code>group_1() &gt;&gt; group_2</code></li>
</ul>
</section>
<section id="요약" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="요약"><span class="header-section-number">5.3</span> 요약</h2>
<ul>
<li>Task Group 작성 방법은 2 가지가 존재함 (데커레이터 &amp; 클래스)</li>
<li>Task Group 안에 Task Group 중첩하여 정의 가능</li>
<li>Task Group 간에도 Flow 정의 가능</li>
<li>Group이 다르면 task_id 가 같아도 무방</li>
<li>Tooltip 파라미터를 이용해 UI 화면에서 Task group 에 대한 설명 제공 가능 (데커레이터 활용시 docstring 으로도 가능)</li>
</ul>
</section>
</section>
<section id="edge-label" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Edge label</h1>
<section id="edge-label-개념" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="edge-label-개념"><span class="header-section-number">6.1</span> Edge Label 개념</h2>
<ul>
<li>Task 연결에 대한 설명 (즉 edge에 대한 Comment)</li>
</ul>
</section>
<section id="edge-label-만들기" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="edge-label-만들기"><span class="header-section-number">6.2</span> Edge Label 만들기</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 819.47 140.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 136)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-136 815.47,-136 815.47,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-124 803.47,-124 803.47,-8 8,-8"></polygon>
<text text-anchor="middle" x="405.73" y="-107.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- ingest -->
<g id="node1" class="node">
<title>ingest</title>
<polygon fill="none" stroke="black" points="70,-71 16,-71 16,-35 70,-35 70,-71"></polygon>
<text text-anchor="middle" x="43" y="-48.8" font-family="Times,serif" font-size="14.00">ingest</text>
</g>
<!-- analyze -->
<g id="node2" class="node">
<title>analyze</title>
<polygon fill="none" stroke="black" points="165.62,-71 107.13,-71 107.13,-35 165.62,-35 165.62,-71"></polygon>
<text text-anchor="middle" x="136.37" y="-48.8" font-family="Times,serif" font-size="14.00">analyze</text>
</g>
<!-- ingest&#45;&gt;analyze -->
<g id="edge1" class="edge">
<title>ingest-&gt;analyze</title>
<path fill="none" stroke="black" d="M70.43,-53C78.69,-53 87.97,-53 96.88,-53"></path>
<polygon fill="black" stroke="black" points="97.09,-56.5 107.09,-53 97.09,-49.5 97.09,-56.5"></polygon>
</g>
<!-- check_integrity -->
<g id="node3" class="node">
<title>check_integrity</title>
<polygon fill="none" stroke="black" points="305.86,-71 202.71,-71 202.71,-35 305.86,-35 305.86,-71"></polygon>
<text text-anchor="middle" x="254.28" y="-48.8" font-family="Times,serif" font-size="14.00">check_integrity</text>
</g>
<!-- analyze&#45;&gt;check_integrity -->
<g id="edge2" class="edge">
<title>analyze-&gt;check_integrity</title>
<path fill="none" stroke="black" d="M165.73,-53C173.9,-53 183.14,-53 192.48,-53"></path>
<polygon fill="black" stroke="black" points="192.61,-56.5 202.61,-53 192.61,-49.5 192.61,-56.5"></polygon>
</g>
<!-- describe_integrity -->
<g id="node4" class="node">
<title>describe_integrity</title>
<polygon fill="none" stroke="black" points="533.21,-53 416.06,-53 416.06,-17 533.21,-17 533.21,-53"></polygon>
<text text-anchor="middle" x="474.63" y="-30.8" font-family="Times,serif" font-size="14.00">describe_integrity</text>
</g>
<!-- check_integrity&#45;&gt;describe_integrity -->
<g id="edge3" class="edge">
<title>check_integrity-&gt;describe_integrity</title>
<path fill="none" stroke="black" d="M305.9,-38.33C311.9,-37.05 317.97,-35.95 323.82,-35.2 350.47,-31.78 380,-31.09 405.75,-31.48"></path>
<polygon fill="black" stroke="black" points="405.72,-34.98 415.79,-31.68 405.86,-27.98 405.72,-34.98"></polygon>
<text text-anchor="middle" x="360.96" y="-39.2" font-family="Times,serif" font-size="14.00">Errors Found</text>
</g>
<!-- save -->
<g id="node7" class="node">
<title>save</title>
<polygon fill="none" stroke="black" points="605.17,-90 551.17,-90 551.17,-54 605.17,-54 605.17,-90"></polygon>
<text text-anchor="middle" x="578.17" y="-67.8" font-family="Times,serif" font-size="14.00">save</text>
</g>
<!-- check_integrity&#45;&gt;save -->
<g id="edge6" class="edge">
<title>check_integrity-&gt;save</title>
<path fill="none" stroke="black" d="M305.93,-55.99C371.27,-59.85 483.33,-66.46 540.82,-69.85"></path>
<polygon fill="black" stroke="black" points="540.7,-73.35 550.89,-70.45 541.12,-66.37 540.7,-73.35"></polygon>
<text text-anchor="middle" x="360.96" y="-65.2" font-family="Times,serif" font-size="14.00">No Errors</text>
</g>
<!-- email_error -->
<g id="node5" class="node">
<title>email_error</title>
<polygon fill="none" stroke="black" points="704.62,-53 623.02,-53 623.02,-17 704.62,-17 704.62,-53"></polygon>
<text text-anchor="middle" x="663.82" y="-30.8" font-family="Times,serif" font-size="14.00">email_error</text>
</g>
<!-- describe_integrity&#45;&gt;email_error -->
<g id="edge4" class="edge">
<title>describe_integrity-&gt;email_error</title>
<path fill="none" stroke="black" d="M533.32,-35C558.79,-35 588.45,-35 612.95,-35"></path>
<polygon fill="black" stroke="black" points="613.1,-38.5 623.1,-35 613.1,-31.5 613.1,-38.5"></polygon>
</g>
<!-- report -->
<g id="node6" class="node">
<title>report</title>
<polygon fill="none" stroke="black" points="795.47,-72 741.47,-72 741.47,-36 795.47,-36 795.47,-72"></polygon>
<text text-anchor="middle" x="768.47" y="-49.8" font-family="Times,serif" font-size="14.00">report</text>
</g>
<!-- email_error&#45;&gt;report -->
<g id="edge5" class="edge">
<title>email_error-&gt;report</title>
<path fill="none" stroke="black" d="M704.5,-42.35C713.34,-43.98 722.67,-45.71 731.36,-47.32"></path>
<polygon fill="black" stroke="black" points="730.72,-50.76 741.19,-49.14 732,-43.88 730.72,-50.76"></polygon>
</g>
<!-- save&#45;&gt;report -->
<g id="edge7" class="edge">
<title>save-&gt;report</title>
<path fill="none" stroke="black" d="M605.6,-70.25C630.98,-68.48 670.39,-65.52 704.47,-62 713.22,-61.1 722.63,-59.98 731.45,-58.87"></path>
<polygon fill="black" stroke="black" points="731.97,-62.33 741.44,-57.58 731.08,-55.39 731.97,-62.33"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="edge-label-실습-1" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="edge-label-실습-1"><span class="header-section-number">6.3</span> Edge Label 실습 1</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1"></span>
<span id="cb17-2">from airflow.utils.edgemodifier import Label</span>
<span id="cb17-3">empty_1 = EmptyOperator(</span>
<span id="cb17-4">    task_id ='empty_1'</span>
<span id="cb17-5">)</span>
<span id="cb17-6"></span>
<span id="cb17-7">empty_2 = EmptyOperator(</span>
<span id="cb17-8">    task_id='empty_2'</span>
<span id="cb17-9">)</span>
<span id="cb17-10">empty_1 &gt;&gt; Label ('1 과 2 사이') &gt;&gt; empty_2</span></code></pre></div>
</section>
<section id="edge-label-실습-2" class="level2" data-number="6.4">
<h2 data-number="6.4" class="anchored" data-anchor-id="edge-label-실습-2"><span class="header-section-number">6.4</span> Edge Label 실습 2</h2>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1"></span>
<span id="cb18-2">from airflow.utils.edgemodifier import Label</span>
<span id="cb18-3">empty_2 = EmptyOperator(</span>
<span id="cb18-4">    task_id = 'empty_2'</span>
<span id="cb18-5">)</span>
<span id="cb18-6"></span>
<span id="cb18-7">empty_3 = EmptyOperator(</span>
<span id="cb18-8">    task_id ='empty_3'</span>
<span id="cb18-9">)</span>
<span id="cb18-10"></span>
<span id="cb18-11">empty_4 = EmptyOperator(</span>
<span id="cb18-12">    task_id ='empty_4'</span>
<span id="cb18-13">)</span>
<span id="cb18-14"></span>
<span id="cb18-15">empty_5 = EmptyOperator(</span>
<span id="cb18-16">    task_id ='empty_5'</span>
<span id="cb18-17">)</span>
<span id="cb18-18"></span>
<span id="cb18-19">empty_6 = EmptyOperator(</span>
<span id="cb18-20">    task_id ='empty_6'</span>
<span id="cb18-21">)</span>
<span id="cb18-22"></span>
<span id="cb18-23">empty_2 &gt;&gt; Label('Start Branch') &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">empty_3, empty_4, empty_5 </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; Label('End Branch') &gt;&gt; empty_6</span></code></pre></div>
<ul>
<li>이렇게 분기가 펼쳐지고 모아지는 경우 모든 분기 edges에 label이 붙게 된다.</li>
<li>Full DAG Example</li>
</ul>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1">from airflow import DAG</span>
<span id="cb19-2">import pendulum</span>
<span id="cb19-3">from airflow.operators.empty import EmptyOperator</span>
<span id="cb19-4">from airflow.utils.edgemodifier import Label</span>
<span id="cb19-5"></span>
<span id="cb19-6"></span>
<span id="cb19-7">with DAG(</span>
<span id="cb19-8">    dag_id="dags_empty_with_edge_label",</span>
<span id="cb19-9">    schedule=None,</span>
<span id="cb19-10">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb19-11">    catchup=False</span>
<span id="cb19-12">) as dag:</span>
<span id="cb19-13">    </span>
<span id="cb19-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_1 = EmptyOperator(</span></span>
<span id="cb19-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_1'</span></span>
<span id="cb19-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-17"></span>
<span id="cb19-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_2 = EmptyOperator(</span></span>
<span id="cb19-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_2'</span></span>
<span id="cb19-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-21"></span>
<span id="cb19-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_1 &gt;&gt; Label('1과 2사이') &gt;&gt; empty_2</span></span>
<span id="cb19-23"></span>
<span id="cb19-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_3 = EmptyOperator(</span></span>
<span id="cb19-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_3'</span></span>
<span id="cb19-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-27"></span>
<span id="cb19-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_4 = EmptyOperator(</span></span>
<span id="cb19-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_4'</span></span>
<span id="cb19-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-31"></span>
<span id="cb19-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_5 = EmptyOperator(</span></span>
<span id="cb19-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_5'</span></span>
<span id="cb19-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-35"></span>
<span id="cb19-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_6 = EmptyOperator(</span></span>
<span id="cb19-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='empty_6'</span></span>
<span id="cb19-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb19-39"></span>
<span id="cb19-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    empty_2 &gt;&gt; Label('Start Branch') &gt;&gt; [empty_3,empty_4,empty_5] &gt;&gt; Label('End Branch') &gt;&gt; empty_6</span></span></code></pre></div>
<ul>
<li>empty operator이기 때문에 실행은 airflow web servce에서 실행은 안해도 된다.</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/07.task_handling.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>More Operators</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/08.more_operators.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="more-operators" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> More Operators</h1>
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 14%">
<col style="width: 9%">
<col style="width: 57%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">File Path</th>
<th style="text-align: left;">Operator (Class)</th>
<th>Importance</th>
<th style="text-align: left;">Note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">airflow.models.bashoperator</td>
<td style="text-align: left;">BaseOperator</td>
<td>***</td>
<td style="text-align: left;">* base operator는 직접 쓰는게 아니라 user가 custom operator를 직접 개발하고싶은 경우 이 클래스를 상속하여 개발하기 위해 만든 operator (execute() 함수를 재정의(Override)하여 사용) <br> * 아래 오퍼레이터들은 모두 이 클래스를 상속하여 개발되어 있음 <br> * Airflow를 잘 쓰려면 이 오퍼레이터 상속/개발하는 것을 자유자재로 할 줄 알아야 함.</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.bash</td>
<td style="text-align: left;">BashOperator</td>
<td>***</td>
<td style="text-align: left;">* bash 쉘 스크립트를 실행 <br> * 가장 많이 사용하는 오퍼레이터 중 하나임</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.branch</td>
<td style="text-align: left;">BaseBranchOperator</td>
<td>**</td>
<td style="text-align: left;">* 직접 사용할 수는 없음. <br> * 이 클래스를 상속하여 choose_branch 함수를 구현해야 함 (그냥 사용시 에러 발생) <br> * 그러나 이 클래스 상속해서 사용하는것보다 <span class="citation" data-cites="task.branch">@task.branch</span> 데코레이터 사용을 권장</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.datetime</td>
<td style="text-align: left;">BranchDateTimeOperator</td>
<td></td>
<td style="text-align: left;">* 특정 Datetime 구간을 주어 Job 수행 날짜가 구간에 속하는지 여부에 따라 분기 결정</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.email</td>
<td style="text-align: left;">EmailOperator</td>
<td></td>
<td style="text-align: left;">이메일 전송하는 오퍼레이터 (Airflow 파라미터에 SMTP 서버 등 사전 셋팅 필요)</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.generic_transfer</td>
<td style="text-align: left;">GenericTransfer</td>
<td></td>
<td style="text-align: left;">데이터를 소스에서 타겟으로 전송 (Airflow 커넥션에 등록되어 있는 대상만 가능)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.latest_only</td>
<td style="text-align: left;">LatestOnlyOperator</td>
<td></td>
<td style="text-align: left;">dag을 수행시킬 때 스케쥴이 아니라 backfill(과거 날짜로 dag 수행) 이 Task 뒤에 연결되어 있는 task들을 모두 가장 최근에 설정된 스케쥴에 의해서만 task가 실행되게끔 하는 오퍼레이터. 수작업으로 dag을 수행 시켰거나 과거날짜로 dag을 수행시켰을 때는 후행 task들은 돌아가지 않음. 가장 최근에 설정된 job에 의해서만 후행 task들이 돌아감.</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.subdag</td>
<td style="text-align: left;">SubDagOperator</td>
<td></td>
<td style="text-align: left;">* 일종의 task 그룹화, dag안에 또다른 dag을 불러올 수 있음. 해당 오퍼레이터 안에 다른 오퍼레이터를 둘 수 있음 (Task group과 유사)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.trigger_dagrun</td>
<td style="text-align: left;">TriggerDagRunOperator</td>
<td>**</td>
<td style="text-align: left;">* 다른 DAG을 수행시키기 위한 오퍼레이터. 예를 들어 task1에 의해 다른 dag이 수행되도록 설정할 수 있다.</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.weekday</td>
<td style="text-align: left;">BranchDayOfWeekOperator</td>
<td></td>
<td style="text-align: left;">* 특정 요일에 따라 분기처리할 수 있는 오퍼레이터</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.python</td>
<td style="text-align: left;">PythonOperator</td>
<td>***</td>
<td style="text-align: left;">* 어떤 파이썬 함수를 실행시키기 위한 오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.python</td>
<td style="text-align: left;">BranchPythonOperator</td>
<td>*</td>
<td style="text-align: left;">* 파이썬 함수 실행 결과에 따라 task를 선택적으로 실행시킬 때 사용되는 오퍼레이터</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.python</td>
<td style="text-align: left;">ShortCircuitOperator</td>
<td></td>
<td style="text-align: left;">* 파이썬 함수 return 값이 False면 후행 Tasks를 Skip처리하고 dag을 종료시키는 오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: left;">airflow.operators.python</td>
<td style="text-align: left;">PythonVirtualenvOperator</td>
<td></td>
<td style="text-align: left;">* 파이썬 가상환경 생성후 Job 수행하고 마무리되면 가상환경을 삭제해주는 오퍼레이터</td>
</tr>
<tr class="odd">
<td style="text-align: left;">airflow.operators.python</td>
<td style="text-align: left;">ExternalPythonOperator</td>
<td></td>
<td style="text-align: left;">* 기존에 존재하는 파이썬 가상환경에서 Job 수행하게 하는 오퍼레이터</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/index.html">more oeprators-airflow operators</a></li>
</ul>
<section id="provider-operator" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="provider-operator"><span class="header-section-number">1.1</span> Provider Operator</h2>
<ul>
<li>airflow web service &gt;&gt; Admin &gt;&gt; Providers 에서 확인할 수 있음</li>
<li>solution 제공 업체에서 본인들의 solution을 잘 다루게 하기 위해 만든 airflow에 제공한 operator</li>
<li>솔루션 제공 업체: AWS, GCP, MS Azure 등</li>
<li>솔루션이란?
<ul>
<li>제품 또는 서비스 패키지: 여기서 “solution”은 특정 사용 사례에 맞춰진, 사전 구성된 클라우드 서비스의 세트를 말한다. 이는 고객이 보다 쉽고 빠르게 해당 기술을 도입하고 활용할 수 있도록 도와주는 ‘패키지’ 형태의 제품이나 서비스를 의미한다.</li>
<li>기술적 해결책 또는 구현: 이 경우, “solution”은 특정 비즈니스 요구사항이나 기술적 문제를 해결하기 위한 방법론, 소프트웨어, 서비스, 아키텍처의 조합을 의미한다. 예를 들어, 데이터 분석, 웹 호스팅, 머신 러닝 모델 훈련과 같은 특정 목적을 위한 AWS나 GCP의 기능 및 서비스의 집합을 “solution”이라고 할 수 있다.</li>
<li>첫 번째 뜻으로 이해해도 많은 context 커버 가능</li>
</ul></li>
<li>예를 들어, airflow web service &gt;&gt; Admin &gt;&gt; Providers &gt;&gt; apache-airflow-providers-amazon &gt;&gt; Python API &gt;&gt; [airflow.providers.amazon.aws.hooks, airflow.providers.amazon.aws.operators]</li>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-google/10.0.0/_api/airflow/providers/google/index.html">참고로 airflow는 <strong>GCP</strong>와 궁합이 잘맞음</a>
<ul>
<li>transfer: data 이동</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-http/4.3.0/_api/airflow/providers/http/index.html">apache-airflow-providers-http</a>
<ul>
<li>SimpleHttpOperator를 이용하여 API 값을 얻어 올 수 있음.</li>
</ul></li>
</ul>
</section>
</section>
<section id="triggerdagrun-operator" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> TriggerDagRun Operator</h1>
<section id="dag간-의존관계-설정" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="dag간-의존관계-설정"><span class="header-section-number">2.1</span> DAG간 의존관계 설정</h2>
<ul>
<li>의존 관계 : dag간 선 후행 관계</li>
<li>DAG 의존관계 설정 방법
<ol type="1">
<li>TriggerDagRun Operator</li>
</ol></li>
</ul>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 180,-205 180,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 168,-193 168,-8 8,-8"></polygon>
<text text-anchor="middle" x="88" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- task1 -->
<g id="node1" class="node">
<title>task1</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon>
<text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- task2 -->
<g id="node2" class="node">
<title>task2</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon>
<text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task2</text>
</g>
<!-- task1&#45;&gt;task2 -->
<g id="edge1" class="edge">
<title>task1-&gt;task2</title>
<path fill="none" stroke="black" d="M70.4,-71.8C78.83,-66.63 88.29,-60.82 97.22,-55.34"></path>
<polygon fill="black" stroke="black" points="99.23,-58.22 105.92,-50 95.57,-52.25 99.23,-58.22"></polygon>
</g>
<!-- task3 -->
<g id="node3" class="node">
<title>task3</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon>
<text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task3</text>
</g>
<!-- task1&#45;&gt;task3 -->
<g id="edge2" class="edge">
<title>task1-&gt;task3</title>
<path fill="none" stroke="black" d="M70.4,-88C78.39,-88 87.31,-88 95.82,-88"></path>
<polygon fill="black" stroke="black" points="95.92,-91.5 105.92,-88 95.92,-84.5 95.92,-91.5"></polygon>
</g>
<!-- task4 -->
<g id="node4" class="node">
<title>task4</title>
<polygon fill="none" stroke="black" points="160,-160 106,-160 106,-124 160,-124 160,-160"></polygon>
<text text-anchor="middle" x="133" y="-137.8" font-family="Times,serif" font-size="14.00">task4</text>
</g>
<!-- task1&#45;&gt;task4 -->
<g id="edge3" class="edge">
<title>task1-&gt;task4</title>
<path fill="none" stroke="black" d="M70.4,-104.2C78.83,-109.37 88.29,-115.18 97.22,-120.66"></path>
<polygon fill="black" stroke="black" points="95.57,-123.75 105.92,-126 99.23,-117.78 95.57,-123.75"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>task를 만들 때 task내에 dag_id를 명시하는 parameter가 있음</li>
<li>task1: PythonOperator 등</li>
<li>task2,3,4: TriggerDagRun 오퍼레이터로 다른 DAG 을 실행시키는 오퍼레이터</li>
</ul>
<ol start="2" type="1">
<li>ExternalTask Sensor</li>
</ol>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 181.61 263.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 259)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-259 177.61,-259 177.61,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-8 8,-247 82.77,-247 82.77,-8 8,-8"></polygon>
<text text-anchor="middle" x="45.39" y="-230.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- sensor1 -->
<g id="node1" class="node">
<title>sensor1</title>
<polygon fill="none" stroke="black" points="74.66,-214 16.11,-214 16.11,-178 74.66,-178 74.66,-214"></polygon>
<text text-anchor="middle" x="45.39" y="-191.8" font-family="Times,serif" font-size="14.00">sensor1</text>
</g>
<!-- task1 -->
<g id="node5" class="node">
<title>task1</title>
<ellipse fill="none" stroke="black" cx="142.19" cy="-115" rx="31.34" ry="18"></ellipse>
<text text-anchor="middle" x="142.19" y="-110.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- sensor1&#45;&gt;task1 -->
<g id="edge1" class="edge">
<title>sensor1-&gt;task1</title>
<path fill="none" stroke="black" d="M71.71,-177.76C75.47,-174.89 79.26,-171.91 82.77,-169 94.63,-159.17 107.25,-147.65 117.72,-137.78"></path>
<polygon fill="black" stroke="black" points="120.42,-140.04 125.25,-130.61 115.59,-134.97 120.42,-140.04"></polygon>
</g>
<!-- sensor2 -->
<g id="node2" class="node">
<title>sensor2</title>
<polygon fill="none" stroke="black" points="74.66,-160 16.11,-160 16.11,-124 74.66,-124 74.66,-160"></polygon>
<text text-anchor="middle" x="45.39" y="-137.8" font-family="Times,serif" font-size="14.00">sensor2</text>
</g>
<!-- sensor2&#45;&gt;task1 -->
<g id="edge2" class="edge">
<title>sensor2-&gt;task1</title>
<path fill="none" stroke="black" d="M74.83,-133.9C83.98,-131.29 94.26,-128.37 103.94,-125.61"></path>
<polygon fill="black" stroke="black" points="105.09,-128.92 113.75,-122.82 103.17,-122.19 105.09,-128.92"></polygon>
</g>
<!-- sensor3 -->
<g id="node3" class="node">
<title>sensor3</title>
<polygon fill="none" stroke="black" points="74.66,-106 16.11,-106 16.11,-70 74.66,-70 74.66,-106"></polygon>
<text text-anchor="middle" x="45.39" y="-83.8" font-family="Times,serif" font-size="14.00">sensor3</text>
</g>
<!-- sensor3&#45;&gt;task1 -->
<g id="edge3" class="edge">
<title>sensor3-&gt;task1</title>
<path fill="none" stroke="black" d="M74.83,-96.1C83.98,-98.71 94.26,-101.63 103.94,-104.39"></path>
<polygon fill="black" stroke="black" points="103.17,-107.81 113.75,-107.18 105.09,-101.08 103.17,-107.81"></polygon>
</g>
<!-- sensor4 -->
<g id="node4" class="node">
<title>sensor4</title>
<polygon fill="none" stroke="black" points="74.66,-52 16.11,-52 16.11,-16 74.66,-16 74.66,-52"></polygon>
<text text-anchor="middle" x="45.39" y="-29.8" font-family="Times,serif" font-size="14.00">sensor4</text>
</g>
<!-- sensor4&#45;&gt;task1 -->
<g id="edge4" class="edge">
<title>sensor4-&gt;task1</title>
<path fill="none" stroke="black" d="M71.71,-52.24C75.47,-55.11 79.26,-58.09 82.77,-61 94.63,-70.83 107.25,-82.35 117.72,-92.22"></path>
<polygon fill="black" stroke="black" points="115.59,-95.03 125.25,-99.39 120.42,-89.96 115.59,-95.03"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>sensor를 통해 task를 만들기 때문에 여기서 sensor는 task를 의미함</li>
<li>sensor를 만들 때도 감지해야할 dag_id를 명시해줘야함 (task_id도 명시 가능)</li>
<li>ExternalTask Sensor는 다른 여러 DAGs의 Tasks의 완료를 기다리는 센서</li>
<li>DAG간 의존관계 설정
<ul>
<li>방식
<ul>
<li>TriggerDagRun Operator: 실행할 다른 DAG 의 ID 를 지정하여 수행</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5Cquad%20Dag%20%5Csubset%20B%5Cquad%20Dag"> 일 때, B Dag이 A Dag을 trigger한다.<br>
</li>
<li>ExternalTask 센서: 본 Task 가 수행되기 전 다른 DAG 의 완료를 기다린 후 수행</li>
</ul></li>
<li>권고 사용 시점
<ul>
<li>TriggerDagRun Operator: Trigger 되는 DAG 의 선행 DAG 이 <strong>하나</strong>만 있을 경우</li>
<li>ExternalTask 센서: Trigger 되는 DAG 의 선행 DAG 이 <strong>2 개 이상</strong>인 경우</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="triggerdagrun-오퍼레이터" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="triggerdagrun-오퍼레이터"><span class="header-section-number">2.2</span> TriggerDagRun 오퍼레이터</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"></span>
<span id="cb1-2">from airflow.operators.trigger_dagrun import TriggerDagRunOperator</span>
<span id="cb1-3"></span>
<span id="cb1-4">with DAG(...) as dag:</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task = BashOperator(</span></span>
<span id="cb1-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='start_task',</span></span>
<span id="cb1-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo "start!"',</span></span>
<span id="cb1-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    trigger_dag_task = TriggerDagRunOperator(</span></span>
<span id="cb1-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='trigger_dag_task', #필수값</span></span>
<span id="cb1-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_dag_id='dags_python_operator', #필수값</span></span>
<span id="cb1-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_run_id=None, # 중요: run_id 값 직접 지정</span></span>
<span id="cb1-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        execution_date='{{data_interval_start}}',</span></span>
<span id="cb1-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        reset_dag_run=True,</span></span>
<span id="cb1-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        wait_for_completion=False,</span></span>
<span id="cb1-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=60,</span></span>
<span id="cb1-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        allowed_states=['success'],</span></span>
<span id="cb1-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        failed_states=None</span></span>
<span id="cb1-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task &gt;&gt; trigger_dag_task</span></span></code></pre></div>
</section>
<section id="triggerdagrun-오퍼레이터-의-run_id" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="triggerdagrun-오퍼레이터-의-run_id"><span class="header-section-number">2.3</span> TriggerDagRun 오퍼레이터 의 run_id</h2>
<ul>
<li>run_id: DAG의 수행 방식과 시간을 유일하게 식별해주는 키</li>
<li>같은 시간이라 해도 수행 방식 (Schedule, manual, Backfill) 에 따라 키가 달라짐
<ul>
<li>스케쥴: 스케줄에 의해 실행된 경우 scheduled__{{data_interval_start}} 값을 가짐</li>
<li>manual: airflow ui web에서 수작업 수행. manual__{{data_interval_start}} 값을 가짐
<ul>
<li>manual__{{data_interval_start}}은 수작업 수행 시간이 아니라 수작업으로 실행시킨 스케쥴의 구간값 중 data_interval_start값을 의미</li>
</ul></li>
<li>Backfill: 과거 날짜를 이용해 수행. backfill__{{data_interval_start}} 값을 가짐</li>
</ul></li>
<li>run_id를 보는 방법
<ul>
<li>airflow ui web service &gt;&gt; dag &gt;&gt; grid &gt;&gt; 초록색 긴막대기 &gt;&gt; status Run ID 있음</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"></span>
<span id="cb2-2">from airflow.operators.trigger_dagrun import TriggerDagRunOperator</span>
<span id="cb2-3"></span>
<span id="cb2-4">with DAG(...) as dag:</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task = BashOperator(</span></span>
<span id="cb2-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='start_task',</span></span>
<span id="cb2-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo "start!"',</span></span>
<span id="cb2-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    trigger_dag_task = TriggerDagRunOperator(</span></span>
<span id="cb2-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='trigger_dag_task', </span></span>
<span id="cb2-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_dag_id='dags_python_operator',</span></span>
<span id="cb2-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_run_id=None, # rund_id 값 직접 지정</span></span>
<span id="cb2-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        execution_date='{{data_interval_start}}', # manual_{{execution_date}} 로 수행 (여기에 값을 주면 메뉴얼 방식으로 trigger로 된걸로 간주)</span></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        reset_dag_run=True, # 이미 run_id 값으로 수행된 이력이 있는 경우에도 dag을 재수행할 것 인지 결정. True면 재수행</span></span>
<span id="cb2-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        wait_for_completion=False,</span></span>
<span id="cb2-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=60,</span></span>
<span id="cb2-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        allowed_states=['success'],</span></span>
<span id="cb2-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        failed_states=None</span></span>
<span id="cb2-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task &gt;&gt; trigger_dag_task</span></span></code></pre></div>
<ul>
<li>wait_for_completion:</li>
</ul>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 383.75 139.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 135)">
<title>G</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-135 379.75,-135 379.75,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster0</title>
<polygon fill="none" stroke="black" points="8,-46 8,-123 367.75,-123 367.75,-46 8,-46"></polygon>
<text text-anchor="middle" x="187.87" y="-106.4" font-family="Times,serif" font-size="14.00">Task Flow</text>
</g>
<!-- task1 -->
<g id="node1" class="node">
<title>task1</title>
<polygon fill="none" stroke="black" points="70,-90 16,-90 16,-54 70,-54 70,-90"></polygon>
<text text-anchor="middle" x="43" y="-67.8" font-family="Times,serif" font-size="14.00">task1</text>
</g>
<!-- task2_by_trigger_dag_run -->
<g id="node2" class="node">
<title>task2_by_trigger_dag_run</title>
<polygon fill="none" stroke="black" points="269.62,-90 106.13,-90 106.13,-54 269.62,-54 269.62,-90"></polygon>
<text text-anchor="middle" x="187.87" y="-67.8" font-family="Times,serif" font-size="14.00">task2_by_trigger_dag_run</text>
</g>
<!-- task1&#45;&gt;task2_by_trigger_dag_run -->
<g id="edge1" class="edge">
<title>task1-&gt;task2_by_trigger_dag_run</title>
<path fill="none" stroke="black" d="M70.21,-72C77.78,-72 86.5,-72 95.7,-72"></path>
<polygon fill="black" stroke="black" points="95.84,-75.5 105.84,-72 95.83,-68.5 95.84,-75.5"></polygon>
</g>
<!-- task3 -->
<g id="node3" class="node">
<title>task3</title>
<polygon fill="none" stroke="black" points="359.75,-90 305.75,-90 305.75,-54 359.75,-54 359.75,-90"></polygon>
<text text-anchor="middle" x="332.75" y="-67.8" font-family="Times,serif" font-size="14.00">task3</text>
</g>
<!-- task2_by_trigger_dag_run&#45;&gt;task3 -->
<g id="edge2" class="edge">
<title>task2_by_trigger_dag_run-&gt;task3</title>
<path fill="none" stroke="black" d="M269.91,-72C278.74,-72 287.38,-72 295.26,-72"></path>
<polygon fill="black" stroke="black" points="295.49,-75.5 305.49,-72 295.49,-68.5 295.49,-75.5"></polygon>
</g>
<!-- dag_c -->
<g id="node4" class="node">
<title>dag_c</title>
<polygon fill="none" stroke="black" points="359.75,-36 305.75,-36 305.75,0 359.75,0 359.75,-36"></polygon>
<text text-anchor="middle" x="332.75" y="-13.8" font-family="Times,serif" font-size="14.00">dag_c</text>
</g>
<!-- task2_by_trigger_dag_run&#45;&gt;dag_c -->
<g id="edge3" class="edge">
<title>task2_by_trigger_dag_run-&gt;dag_c</title>
<path fill="none" stroke="black" d="M236.84,-53.87C256.27,-46.53 278.3,-38.2 296.24,-31.42"></path>
<polygon fill="black" stroke="black" points="297.63,-34.64 305.75,-27.83 295.15,-28.09 297.63,-34.64"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li>wait_for_completion=True 의 의미: task2가 dag_c를 돌리고 dag_c가 성공한 상태 후 task2역시 성공 상태가 된 후에 task3을 돌리는 경우</li>
<li>wait_for_completion=False 의 의미: dag_c의 성공여부와 상관없이 task2가 성공 상태로 빠져나옴</li>
<li>poke_interval=60 : dag_c의 성공여부를 모니터링 하는 주기 60초</li>
<li>allowed_states=[‘success’]: trigger dag의 task2가 성공상태로 끝나기 위해 dag_c가 어떤 상태로 수행이 끝나야하는지 명시. 만약 dag_c가 fail상태여도 task2가 성공 상태로 마킹이 되길 원한다면 allowed_states=[‘success’,‘fail’] 로 명시</li>
<li>failed_states=None: task2가 실패 상태로 마킹이 되기 위해 dag_c가 어떤 상태로 작업 수행이 완료 되어야 하는지 명시. failed_states=fail이면 dag_c가 실패가 되어야 task2도 실패로 마킹 된다.</li>
<li>Dag Full example</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Package Import</span></span>
<span id="cb3-2">from airflow import DAG</span>
<span id="cb3-3">from airflow.operators.bash import BashOperator</span>
<span id="cb3-4">from airflow.operators.trigger_dagrun import TriggerDagRunOperator</span>
<span id="cb3-5">import pendulum</span>
<span id="cb3-6"></span>
<span id="cb3-7">with DAG(</span>
<span id="cb3-8">    dag_id='dags_trigger_dag_run_operator',</span>
<span id="cb3-9">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb3-10">    schedule='30 9 * * *', #9시 30분 daily schedule</span>
<span id="cb3-11">    catchup=False</span>
<span id="cb3-12">) as dag:</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task = BashOperator(</span></span>
<span id="cb3-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='start_task',</span></span>
<span id="cb3-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo "start!"',</span></span>
<span id="cb3-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    trigger_dag_task = TriggerDagRunOperator(</span></span>
<span id="cb3-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='trigger_dag_task',</span></span>
<span id="cb3-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_dag_id='dags_python_operator',</span></span>
<span id="cb3-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_run_id=None,</span></span>
<span id="cb3-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        execution_date='{{data_interval_start}}', #9시 30분 daily schedule</span></span>
<span id="cb3-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        reset_dag_run=True,</span></span>
<span id="cb3-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        wait_for_completion=False,</span></span>
<span id="cb3-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=60,</span></span>
<span id="cb3-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        allowed_states=['success'],</span></span>
<span id="cb3-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        failed_states=None</span></span>
<span id="cb3-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_task &gt;&gt; trigger_dag_task</span></span></code></pre></div>
</section>
</section>
<section id="obtaining-public-data-api-key" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Obtaining Public Data API Key</h1>
<p>SimpleHttp 오퍼레이터를 이용하여 공공데이터 키 발급받기</p>
<section id="public-data-api-key-obtaining-steps" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="public-data-api-key-obtaining-steps"><span class="header-section-number">3.1</span> Public Data API Key Obtaining Steps</h2>
<ul>
<li>“Public Data API Key”를 발급받는 과정은 대개 다음과 같은 단계를 포함한다. 이는 일반적인 절차로, 특정 공공 데이터 API 제공자에 따라 약간의 차이가 있을 수 있다.
<ol type="1">
<li>공공 데이터 포털 접속: 대부분의 국가에서는 공공 데이터를 제공하기 위한 중앙화된 포털을 운영한다.. 예를 들어, 한국에서는 ’<a href="https://data.go.kr">공공데이터포털</a>’이 있다.</li>
<li>회원가입 및 로그인: 포털에 접속한 후, 사용자 계정을 생성하고 로그인한다.</li>
<li>API 키 신청: 로그인 후, API 키를 신청할 수 있는 섹션을 찾는다. 이는 보통 ‘API 키 관리’, ‘내 어플리케이션’, ‘API 신청’ 등의 메뉴에서 찾을 수 있다.</li>
<li>애플리케이션 등록: API 키를 신청하기 위해서는 대부분의 경우 애플리케이션을 등록해야 하는데 이 과정에서 애플리케이션 이름, 용도, URL 등의 정보를 입력해야 할 수도 있다.</li>
<li>API 키 발급: 애플리케이션 등록이 완료되면, API 키가 발급된다. 이 키는 API를 호출할 때 필요하므로 안전하게 보관해야 한다.</li>
<li>API 문서 확인: API를 효과적으로 사용하기 위해서는 해당 API의 문서를 확인하는 것이 중요한데 문서에서는 API의 엔드포인트, 요청 방식, 필요한 파라미터 등의 정보를 제공한다.</li>
<li>API 호출 시험: API 키를 사용하여 간단한 API 호출하여 API가 정상적으로 작동하는지 확인한다.</li>
<li>각 공공 데이터 포털의 구체적인 지침과 절차는 웹사이트를 참조해야 한다.</li>
</ol></li>
</ul>
</section>
<section id="서울시-공공데이터-보기" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="서울시-공공데이터-보기"><span class="header-section-number">3.2</span> 서울시 공공데이터 보기</h2>
<ul>
<li><a href="https://data.seoul.go.kr/">서울시 열린데이터 광장 portal</a></li>
<li>서울시가 보유한 데이터 다운로드 가능</li>
<li>일회성 다운로드 : Csv, json, xml 등을 직접 다운로드</li>
<li>스케쥴에 의한 주기성 다운로드 : openAPI(<a href="../../../../../docs/blog/posts/Engineering/web/http_method.html">http method</a>를 통해 data를 다운로드 할 수 있도록 개방해놓은 API) 통해 다운 가능</li>
<li>데이터 검색
<ul>
<li>먼저, 어떤 종류의 데이터를 다운로드 받을 수 있는지 확인하기 위해 서울 열린데이터 광장 검색창에 데이터 검색하거나 데이터 카테고리 선택하여 openAI Tag붙은 데이터를 선택해야 한다 (본인은 문화/관광 선택).<br>
<img src="kmink3225.netlify.app/images/airflow/seoul_public_data_open_api.PNG" class="img-fluid" alt="seoul_public_data"><br>
<img src="kmink3225.netlify.app/images/airflow/seoul_public_data_open_api_tag.PNG" class="img-fluid" alt="api_tag"><br>
open API tag없으면 manual로 데이터 셋 다운로드 받아야함.<br>
<img src="kmink3225.netlify.app/images/airflow/openAPI_example.PNG" class="img-fluid" alt="api_example"><br>
</li>
<li>Sample URL: 서울시립미술관 전시 현황 <strong>http://openapi.seoul.go.kr:8088/(인증키)/xml/ListExhibitionOfSeoulMOAInfo/1/5/</strong></li>
<li>Sample URL 작성은 요청 인자를 참고하여 적어 넣으면 된다. 예를 들어,
<ul>
<li>http://openapi.seoul.go.kr:8088/(인증키)/xml/ListExhibitionOfSeoulMOAInfo/1/5/ 은 아래와 같은 요청 인자 양식에 의해 적혀져 있다.</li>
<li>http://openapi.seoul.go.kr:8088/(API key)/(data type)/(service)/(data start_index)/(data end_index)/</li>
<li>1 부터 1000행 까지는 한번에 가져올 수 있지만 1000행 넘어가면 에러 발생
<ul>
<li>그래서, 1~1000행, 10001행~2000행, … 와 같이 끊어서 가져가야 함</li>
</ul></li>
<li>요청 인자 중: DP_SEQ, DP_NAME이 있는데 특정 값을 입력하면 filtering되어 조건에 만족하는 데이터만 query해서 가져올 수 있음.</li>
</ul></li>
<li>다른 Sample URL 예시: 서울시 자랑스러운 한국음식점 정보 (한국어)
<ul>
<li>url 양식: http://openapi.seoul.go.kr:8088/(key:인증키)/(type)/(servicec)/(type)/(start_index)/(end_index)/(main_key 혹은 날짜)</li>
<li>샘플 URL: http://openapi.seoul.go.kr:8088/(인증키)/xml/SebcKoreanRestaurantsKor/1/5</li>
</ul></li>
<li>이렇게 Sample URL 양식은 http://openapi.seoul.go.kr:8088/(key:인증키)/(type)/(servicec)/(type)/(start_index)/(end_index) 까지는 공통됨.</li>
</ul></li>
<li>openAPI 이용할 경우 api KEY 발급받아야 함 로그인 필요
<ul>
<li>로그인 &gt;&gt; 이용 안내 &gt;&gt; open API 소개 &gt;&gt; API Key 신청 &gt;&gt; 애플리케이션 등록</li>
<li>API Key 신청: 일반 인증키 신청 or 실시간 지하철 인증키 신청
<ul>
<li>sheet는 최대 1,000건 (행) 까지 노출됨. 전체 데이터는 CSV파일을 내려받아 확인해야함.</li>
</ul></li>
<li>애플리케이션 등록
<ul>
<li>서비스(사용) 환경: 웹사이트 개발</li>
<li>사용 URL: localhost (or 이 데이터를 사용할 여러분들의 홈패이지 주소)</li>
<li>관리용 대표 이메일: 홍길동@naver.com</li>
<li>활용용도: 블로그 개발 (자유형식 - 적당히 내용 채워 넣음)</li>
<li>내용: 문화/전시 관련 소식을 스케쥴을 이용해 전달 받음 (자유형식 - 적당히 내용 채워 넣음)</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="api-사용을-위한-키-발급-받기" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="api-사용을-위한-키-발급-받기"><span class="header-section-number">3.3</span> API 사용을 위한 키 발급 받기</h2>
<section id="simplehttp-operator를-이용한-api-받아오기" class="level3" data-number="3.3.1">
<h3 data-number="3.3.1" class="anchored" data-anchor-id="simplehttp-operator를-이용한-api-받아오기"><span class="header-section-number">3.3.1</span> SimpleHttp Operator를 이용한 API 받아오기</h3>
<section id="simplehttpoperator-란" class="level4" data-number="3.3.1.1">
<h4 data-number="3.3.1.1" class="anchored" data-anchor-id="simplehttpoperator-란"><span class="header-section-number">3.3.1.1</span> SimpleHttpOperator 란?</h4>
<ul>
<li>HTTP 요청을 하고 결과로 text 를 리턴 받는 오퍼레이터 리턴 값은 Xcom 에 저장</li>
<li>HTTP 를 이용하여 API 를 처리하는 RestAPI 호출시 사용 가능
<ul>
<li>RestAPI: API 방법 중 하나로 http의 protocol을 이용해서 API data를 제공하거나, 다운로드, 변경할 수 있는 API를 제공하는 방식</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>REST API는 Representational State Transfer의 약자로, 웹 기반의 서비스 간에 통신을 위한 일반적인 규칙(아키텍처 스타일)을 의미</li>
<li>REST API는 인터넷에서 데이터를 교환하기 위한 표준 방법 중 하나로 널리 사용되는데 간단히 말해서, REST API는 웹 애플리케이션에서 다른 시스템과 정보를 주고받기 위한 방법이다.</li>
<li>REST API의 주요 특징
<ul>
<li>클라이언트-서버 구조: REST API는 클라이언트(예: 웹 브라우저)와 서버 간의 분리를 기반으로 함. 클라이언트는 사용자 인터페이스와 사용자 상호작용을 관리하고, 서버는 데이터 저장 및 백엔드 로직을 처리</li>
<li>무상태(Stateless): 각 요청은 독립적. 즉, 이전 요청의 상태를 서버가 기억하지 않는다는 의미. 모든 필요한 정보는 각 요청과 함께 전송되어야 한다.</li>
<li>캐시 가능: REST API 응답은 캐시될 수 있으므로, 성능을 향상시키고 서버의 부하를 줄일 수 있다.</li>
<li>유니폼 인터페이스(Uniform Interface): REST API는 표준화된 방법을 사용하여 서버의 리소스에 접근. 이는 HTTP 메서드를 활용하는데, 예를 들어 GET(읽기), POST(생성), PUT(수정), DELETE(삭제) 등이 있다.</li>
<li>리소스 기반: REST API에서 ’리소스’는 웹에서의 객체, 데이터 또는 서비스를 의미하며, 각 리소스는 고유한 URI(Uniform Resource Identifier)를 통해 식별됨.</li>
</ul></li>
</ul>
</div>
</div>
<ul>
<li>SimpleHttpOperator를 이용해서 RestAPI를 호출</li>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-http/4.3.0/">http://localhost:8080/provider/apache-airflow-providers-http</a> 에서 오퍼레이터 명세 확인하기</li>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-http/4.3.0/_api/airflow/providers/http/index.html">python API click</a>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-http/4.3.0/_api/airflow/providers/http/operators/http/index.html">http Operator click</a> 의 자주 쓰는 parameters
<ul>
<li>http_conn_id (str) – The http connection to run the operator against: full url의 ‘<strong>xxxx.com</strong>/(나머지)’ 의 <strong>xxxx.com</strong> 을 넣어줌</li>
<li>endpoint (str | None) – The relative part of the full url. (templated): full url의 ‘xxxx.com/<strong>(나머지)</strong>’ 의 <strong>(나머지)</strong>를 넣어줌</li>
<li>method (str) – The <a href="../../../../../docs/blog/posts/Engineering/web/http_method.html">HTTP method</a> to use, default = “POST”: http의 4개 methods
<ul>
<li>GET: data 가져오기</li>
<li>POST: data insert</li>
<li>PUT: data 변경/update</li>
<li>DELETE: data 삭제하기</li>
</ul></li>
<li>data (Any) – The data to pass. POST-data in POST/PUT and params in the URL for a GET request. (templated)
<ul>
<li>POST의 경우: insert할 data 값</li>
<li>GET의 경우: HTTP Protocol을 GET으로 줬으면 GET요청의 parameter를 dictionary 형태로 입력해주면 됨</li>
</ul></li>
<li>headers (dict[str, str] | None) – The HTTP headers to be added to the GET request</li>
<li>response_check (Callable[…, bool] | None) – A check against the ‘requests’ response object. The callable takes the response object as the first positional argument and optionally any number of keyword arguments available in the context dictionary. It should return True for ‘pass’ and False otherwise.
<ul>
<li>data 요청시 응답이 제대로 왔는지 확인</li>
<li>data를 일회성으로 가져올 때 데이터 1000 행이 제대로 들어왔는지 간단한 조회로 알아볼 수 있지만</li>
<li>data를 open API를 이용하여 주기적으로 내려받는 자동화의 경우 일일히 확인하는게 아니라 데이터가 잘 내려 받았는지 확인하는 함수를 하나 만들어 이 parameter에 할당하면 됨.</li>
<li>true로 resturn하면 API가 정상적으로 실행된 것으로 간주</li>
</ul></li>
<li>response_filter (Callable[…, Any] | None) – A function allowing you to manipulate the response text. e.g response_filter=lambda response: json.loads(response.text). The callable takes the response object as the first positional argument and optionally any number of keyword arguments available in the context dictionary.
<ul>
<li>API의 요청 결과가 dictionary 형태의 string으로 출력됨. 나중에 dictionary type으로 바꿔주고 key: value 형태로 access하여 원하는 데이터를 가져 와야 한다.</li>
<li>이런 전처리 과정을 수행하는 함수를 만들어 reponse_filter parameter에 넣어줘야함.</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="커넥션-등록" class="level3" data-number="3.3.2">
<h3 data-number="3.3.2" class="anchored" data-anchor-id="커넥션-등록"><span class="header-section-number">3.3.2</span> 커넥션 등록</h3>
<ul>
<li>http_conn_id에 들어갈 connection id 만들기
<ul>
<li>airflow web service &gt;&gt; Admin &gt;&gt; Plus button</li>
<li>Conn_id: 다른 conn 이름과 중복되지 않게 string으로 작성</li>
</ul></li>
<li>Connection_type: HTTP</li>
<li>Host: openapi.seoul.go.kr (Open Data 명세를 보고 적음. http://openapi.seoul.go.kr:8088/(key:인증키)/(type)/(servicec)/(type)/(start_index)/(end_index)/(main_key 혹은 날짜) 중에서 <strong>openapi.seoul.go.kr</strong> 만 적으면 됨 )</li>
<li>token값에 의해 인증되는 방식이기 때문에 schema/login/password 필요없음</li>
<li>Port: 8088</li>
<li>Test 버튼 클릭시 “405:Method Not Allowed” 가 뜨지만 무방함<br>
<img src="kmink3225.netlify.app/images/airflow/connection_registration.PNG" class="img-fluid" alt="connection_registration"></li>
</ul>
</section>
<section id="simplehttpoperator-작성" class="level3" data-number="3.3.3">
<h3 data-number="3.3.3" class="anchored" data-anchor-id="simplehttpoperator-작성"><span class="header-section-number">3.3.3</span> SimpleHttpOperator 작성</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">from airflow.providers.http.operators.http import SimpleHttpOperator</span>
<span id="cb4-2">with DAG(...) as dag:</span>
<span id="cb4-3">  tb_cycle_station_info = SimpleHttpOperator(</span>
<span id="cb4-4">    task_id ='tb_cycle_station_info',</span>
<span id="cb4-5">    http_conn_id = 'openapi.seoul.go.kr',</span>
<span id="cb4-6">    endpoint ='{{var.value.apikey_openpai_seoul_go_kr}}/json/ListExhibitionOfSeoulMOAInfo/1/1000/',</span>
<span id="cb4-7">    method ='GET',</span>
<span id="cb4-8">    headers ={'Content-Type: 'application/json',</span>
<span id="cb4-9">              charset': 'utf-8',</span>
<span id="cb4-10">              'Accept': '*/*'</span>
<span id="cb4-11">              }</span>
<span id="cb4-12">  )</span></code></pre></div>
<section id="dag에-실제-api-key값을-작성하면-문제가-되는-이슈" class="level4" data-number="3.3.3.1">
<h4 data-number="3.3.3.1" class="anchored" data-anchor-id="dag에-실제-api-key값을-작성하면-문제가-되는-이슈"><span class="header-section-number">3.3.3.1</span> DAG에 실제 API key값을 작성하면 문제가 되는 이슈</h4>
<ul>
<li>SimpleHttpOperator를 1000개의 DAGs 에 작성했는데 API 키가 바뀐다면 1000개의 스크립트를 다 바꿔줘야하나?</li>
<li>DAG에다가 바로 인증키를 복붙하면 다른 사람들도 API키를 볼 수 있어 보안상의 문제가 될 수 있다.</li>
<li>위의 2가지 문제를 해결하기 위해 global variable을 이용하여 적을 것.
<ul>
<li>API key를 variable을 이용하여 등록: airflow web service &gt;&gt; admin &gt;&gt; Variables
<ul>
<li>key:value 형태로 등록 가능</li>
<li>관리자가 DB에 들어가면 API Key값 볼 수 있음</li>
</ul></li>
</ul></li>
<li>Key에 아래 이름이 있을 경우 val 을 자동 마스킹처리하여 보여줌
<ul>
<li>‘access_token’,</li>
<li>‘api_key’,</li>
<li>‘apikey’,</li>
<li>‘authorization’,</li>
<li>‘passphrase’,</li>
<li>‘passwd’,</li>
<li>‘password’,</li>
<li>‘private_key’,</li>
<li>‘secret’,</li>
<li>‘token’</li>
</ul></li>
<li>global variable 설정하면
<ul>
<li>서울시 공공데이터 추출하는 DAG 이 여러 개 있어도 API 키를 하나로 관리 가능</li>
<li>API 키를 코드에 노출시키지 않음</li>
</ul></li>
<li>DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Package Import</span></span>
<span id="cb5-2">from airflow import DAG</span>
<span id="cb5-3">from airflow.operators.bash import BashOperator</span>
<span id="cb5-4">from airflow.providers.http.operators.http import SimpleHttpOperator</span>
<span id="cb5-5">from airflow.decorators import task</span>
<span id="cb5-6">import pendulum</span>
<span id="cb5-7"></span>
<span id="cb5-8">with DAG(</span>
<span id="cb5-9">    dag_id='dags_simple_http_operator',</span>
<span id="cb5-10">    start_date=pendulum.datetime(2023, 4, 1, tz='Asia/Seoul'),</span>
<span id="cb5-11">    catchup=False,</span>
<span id="cb5-12">    schedule=None</span>
<span id="cb5-13">) as dag:</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''서울시립 전시 정보'''</span></span>
<span id="cb5-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    seoul_exhibition_info = SimpleHttpOperator(</span></span>
<span id="cb5-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='seoul_exhibition_info',</span></span>
<span id="cb5-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        http_conn_id='openapi.seoul.go.kr',</span></span>
<span id="cb5-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        endpoint='{{var.value.apikey_openapi_seoul_go_kr}}/json/ListExhibitionOfSeoulMOAInfo/1/1000/',</span></span>
<span id="cb5-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        method='GET',</span></span>
<span id="cb5-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        headers={'Content-Type': 'application/json',</span></span>
<span id="cb5-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        'charset': 'utf-8',</span></span>
<span id="cb5-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        'Accept': '*/*'</span></span>
<span id="cb5-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        }</span></span>
<span id="cb5-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 이 task는 seoul_exhibition_info가 xcom 에 넣었던 data를 빼오는 것</span></span>
<span id="cb5-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_2')</span></span>
<span id="cb5-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_2(**kwargs):</span></span>
<span id="cb5-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb5-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        rslt = ti.xcom_pull(task_ids='seoul_exhibition_info')</span></span>
<span id="cb5-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import json</span></span>
<span id="cb5-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from pprint import pprint</span></span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pprint(json.loads(rslt))</span></span>
<span id="cb5-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb5-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    seoul_exhibition_info &gt;&gt; python_2()</span></span></code></pre></div>
</section>
</section>
</section>
</section>
<section id="custom-오퍼레이터" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Custom 오퍼레이터</h1>
<p>simpleHttpOperator는 기능상 불편한 점이 있을 수 있지만 .custom operator 개발을 하면 나에게 맞춤화된 operator를 만들 수 있다.</p>
<section id="airflow-의-꽃-custom-오퍼레이터-만드는-법" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="airflow-의-꽃-custom-오퍼레이터-만드는-법"><span class="header-section-number">4.1</span> Airflow 의 꽃 , Custom 오퍼레이터 만드는 법</h2>
<ul>
<li>Airflow는 오퍼레이터를 직접 만들어 사용할 수 있도록 클래스를 제공 (BaseOperator)
<ul>
<li>BaseOperator를 상속 받아 나만의 custom operator를 만들 수 있다.</li>
</ul></li>
<li>확장성을 비약적으로 높여주는 기능으로 airflow가 인기가 많은 이유가 됨</li>
<li>BaseOperator 상속한 자식 operator가 custom operator가 됨</li>
<li>BaseOperator 상속시 두 가지 메서드를 재정의해야 함 (Overriding)
<ul>
<li>Overriding: 객체 지향 언어에서 부모 클래스가 가지고있던 method를 자식 class에서 재정의</li>
</ul>
<ol type="1">
<li>생성자 (<code>def __init__</code>) 재정의</li>
</ol>
<ul>
<li>클래스에서 객체 생성시 객체에 대한 초기값 지정하는 함수</li>
</ul>
<ol start="2" type="1">
<li><code>def execute(self, context)</code> 재정의</li>
</ol>
<ul>
<li>자식 클래스에서 똑같은 이름으로 써야함: <code>def execute(self, context)</code> 자체를 이용해야함 변경하면 안됨</li>
<li><strong>init</strong> 생성자로 객체를 얻은 후 execute 메서드를 실행시키도록 되어 있음</li>
<li>비즈니스 로직은 execute 에 구현해야함</li>
</ul></li>
<li>예를 들어, 다음과 같은 custom operator만들고 싶을 땐 <code>mardkown     custom_task=CustomOperator(       task_id='xxxxx',       A='aaaa',       B='bbbb'     )     custom_task &gt;&gt; python_task</code>
<ul>
<li>생성자 (<code>def __init__</code>)에 parameter A와 B에 대한 내용이 들어가 있어야함</li>
<li><code>custom_task &gt;&gt; python_task</code> 실행이 되면 <code>execute()</code> 함수가 내부적으로 실행되는 구조.</li>
</ul></li>
<li>Custom Operator를 만들 때, 오퍼레이터의 기능 정의를 명확하게 해줘야함
<ul>
<li>기존에 있던 operator들로 job을 수행하기에 제한적이었던 점을 보완할 기능을 정의해야함</li>
<li>simpleHttpOperator에서 불편했던 점 2가지
<ul>
<li>첫 번째, 매번 endpoint에 시작행/끝행을 넣어서 호출 해줘야 했음 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> custom operator에서는 이것을 1000행씩 불러오도록 하는 기능이 필요</li>
<li>두 번째, xcom에서 data를 가지고 온후 data에 접근할 수 있는 형태로 전처리를 해줘야하는 부분이 있었음 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> custom operator에서는 전처리없이 local에다가 바로 저장할 수 있도록 하는 기능이 필요</li>
</ul></li>
</ul></li>
<li>Custom Operator 기능 정의
<ul>
<li>서울시 공공데이터 API 를 호출하여 전체 데이터를 받은 후 .csv 파일로 저장하기</li>
<li>dag과 operator의 위치
<ul>
<li><p>dag 위치: <code>/dags/dags_seoul_api.py</code> 생성</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">from operators.seoul_api_to_csv_operator # airflow container가 plugins까지는 인식하기 때문에 그 하위 directory인 operators부터 path를 적어주면 됨.</span>
<span id="cb6-2">import SeoulApiToCsvOperator #클래스명</span></code></pre></div></li>
</ul></li>
<li>operator의 위치: <code>/plugins/operators/seoul_api_to_csv_operator.py</code> 생성</li>
</ul></li>
<li>Template 문법을 사용할 수 있는 Template을 지정
<ul>
<li><code>op_kwards, op_args, param</code> 과 같은 사용 가능한 파라미터 지정하기</li>
</ul></li>
<li>Custom Operator 작성 예시
<ul>
<li>아래의 <code>HelloOperator</code>는 <code>__init__</code>과 <code>execute(self, context)</code> 둘다 재정의 해줬기 때문에 코드상으론 심플하지만 이미 custom operator로서의 기능을 할 수 있다.</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">class HelloOperator(BaseOperator):</span>
<span id="cb7-2">  template_fields: Sequence<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = ("name",) </span>
<span id="cb7-3">  # 어떤 parameter에 template 문법을 적용할지 지정해주면 됨</span>
<span id="cb7-4">  # 생성자 함수 __init__ 의 member들로 template 문법을 적용할 paratemer 지정</span>
<span id="cb7-5">  # 현재 name만 template 문법 적용</span>
<span id="cb7-6"></span>
<span id="cb7-7">  def __init__(self, name: str, world: str, **kwargs) -&gt; None:</span>
<span id="cb7-8">    super().__init__(**kwargs)</span>
<span id="cb7-9">    self.name = name</span>
<span id="cb7-10">    self.world = world</span>
<span id="cb7-11"></span>
<span id="cb7-12">  def execute(self, context):</span>
<span id="cb7-13">    message = f"Hello {self.world} it's {self.name}!"</span>
<span id="cb7-14">    print(message)</span>
<span id="cb7-15">    return message</span>
<span id="cb7-16"></span>
<span id="cb7-17">with dag:</span>
<span id="cb7-18">  hello_task = HelloOperator(</span>
<span id="cb7-19">    task_id='task_id_1', # task_id는 생성자에서 명시 않았지만 기본적으로 생성자에 들어가도록 설계되어 있음</span>
<span id="cb7-20">    name '{{ task_instance.task_id }}', # 이 name에 template 문법을 적용하면 '{{ task_instance.task_id }}'의 값이 생성자 함수의 name 인자에 들어가게 된다.</span>
<span id="cb7-21">    # HelloOperator의 객체가 생성되게 될때 self.name은 실제값으로 치환됨</span>
<span id="cb7-22">    world='Earth' #world는  Sequence<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = ("name",) 에 명시되어 있지 않기 때문에 치환안됨</span>
<span id="cb7-23">  )</span></code></pre></div></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/custom-operator.html">Google ‘Airflow Custom Operator’ : creating a custom operator</a></li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">from airflow.models.baseoperator import BaseOperator</span>
<span id="cb8-2"></span>
<span id="cb8-3"></span>
<span id="cb8-4">class HelloOperator(BaseOperator):</span>
<span id="cb8-5">    def __init__(self, name: str, **kwargs) -&gt; None:</span>
<span id="cb8-6">        super().__init__(**kwargs) # 부모함수(BaseOperator)의 생성자를 호출</span>
<span id="cb8-7">        self.name = name</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def execute(self, context):</span></span>
<span id="cb8-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        message = f"Hello {self.name}"</span></span>
<span id="cb8-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(message)</span></span>
<span id="cb8-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return message</span></span></code></pre></div>
<ul>
<li>이렇게 아래와 같이 <code>HelloOperator object</code>가 생성이 되면 <code>name</code>의 ’xxxx’값이 <code>def __init__(self, name: str, **kwargs)</code>의 <code>name: str</code>에 할당된다.</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">hello_task=HelloOperator(</span>
<span id="cb9-2">  task_id='xxx', </span>
<span id="cb9-3">  name='xxxx'</span>
<span id="cb9-4">)</span></code></pre></div>
<ul>
<li>위의 <code>task_id</code>는 <code>def __init__(self, name: str, **kwargs)</code> 의 <code>**kwargs</code>에 할당됨. 이어서 그 값이 <code>super().__init__(**kwargs)</code> 에도 할당되어 부모 함수까지 전달됨</li>
<li>이런 메카니즘으로, 생성자에 <code>task_id</code>를 명시해서 적어줄 필요 없음</li>
<li>그리고, 가지고 온 <code>name</code>값을 <code>self.name</code>에 할당</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/custom_operator.PNG" class="img-fluid figure-img"></p>
<figcaption>Airflow Custom Operator Example</figcaption>
</figure>
</div>
</section>
</section>
<section id="custom-오퍼레이터-개발" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Custom 오퍼레이터 개발</h1>
<section id="custom-오퍼레이터-만들기" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="custom-오퍼레이터-만들기"><span class="header-section-number">5.1</span> Custom 오퍼레이터 만들기</h2>
<ul>
<li><strong>init</strong> 생성자 재정의</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">class SeoulApiToCsvOperator(BaseOperator):</span>
<span id="cb10-2">  template_fields = (' endpoint', ' path','file_ name','base_dt')</span>
<span id="cb10-3">  </span>
<span id="cb10-4">  def __init__(self , dataset_nm , path , file_name , base_dt=None , **kwargs):</span>
<span id="cb10-5">    # 생성자의 인자s: dataset_nm , path , file_name , base_dt를 user로부터 받겠다는 것을 명시</span>
<span id="cb10-6">    super().__init__(**kwargs)</span>
<span id="cb10-7">    self.http_conn_id = 'openapi.seoul.go.kr' #hard coding: 무조건 이 값을 사용</span>
<span id="cb10-8">    self.path = path</span>
<span id="cb10-9">    self.file_name = file_name</span>
<span id="cb10-10">    self.endpoint = '{{var.value.apikey_openapi_seoul_go_kr}}/json/' + datset_nm # template 문법 적용하여 variable 값을 호출</span>
<span id="cb10-11">    self.base_dt =base_dt</span>
<span id="cb10-12">    # template 문법이 적용될 수 있도록 self.path 을 path로, self.file_name을 file_name로, self.endpoint 을 '{{var.value.apikey_openapi_seoul_go_kr}}/json/' + datset_nm로, self.base_dt을 base_dt로 지정</span></code></pre></div>
<ul>
<li>위의 생성자에 들어갈 parameters 의 갯수는 operator 객체를 만들때 입력받아야 하는 인자들을 의미한다.</li>
<li>예를 들어, 아래와 같이 클래스 object를 생성해서 아래의 4가지 인자만 입력받아도 task는 생성이 된다.
<ul>
<li><code>task_id</code>는 <code>__init__()</code>의 <code>**kwars</code>에 할당</li>
<li><code>dataset_nm</code>은 <code>__init__()</code>의 <code>dataset_nm</code>에 할당</li>
<li><code>path</code>는 <code>__init__()</code>의 <code>path</code> 에 할당</li>
<li><code>file_name</code>은 <code>__init__()</code>의 <code>file_name</code>에 할당</li>
<li><code>base_dt</code>는 <code>none</code>으로 되어있기 때문에 값을 입력안해줘도 되고 값을 입력해주면 <code>__init__()</code>의 <code>base_dt</code>에 할당됨</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">seoul_task = SeoulApiToCsvOperator(</span>
<span id="cb11-2">  task_id='xxxx',</span>
<span id="cb11-3">  dataset_nm='xxxx',</span>
<span id="cb11-4">  path='xxxx',</span>
<span id="cb11-5">  file_name='xxxx'</span>
<span id="cb11-6">)</span></code></pre></div></li>
<li>Class full example
<ul>
<li>위치: <code>airflow/plugins/operators/seoul_api_to_csv_operator.py</code></li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow.models.baseoperator import BaseOperator</span>
<span id="cb12-2">from airflow.hooks.base import BaseHook</span>
<span id="cb12-3">import pandas as pd </span>
<span id="cb12-4"></span>
<span id="cb12-5">class SeoulApiToCsvOperator(BaseOperator):</span>
<span id="cb12-6">    template_fields = ('endpoint', 'path','file_name','base_dt')</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def __init__(self, dataset_nm, path, file_name, base_dt=None, **kwargs):</span></span>
<span id="cb12-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        super().__init__(**kwargs)</span></span>
<span id="cb12-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.http_conn_id = 'openapi.seoul.go.kr'</span></span>
<span id="cb12-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.path = path</span></span>
<span id="cb12-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.file_name = file_name</span></span>
<span id="cb12-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.endpoint = '{{var.value.apikey_openapi_seoul_go_kr}}/json/' + dataset_nm</span></span>
<span id="cb12-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.base_dt = base_dt</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def execute(self, context):</span></span>
<span id="cb12-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb12-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    url:8080/endpoint</span></span>
<span id="cb12-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    endpoint=apikey/type/dataset_nm/start/end</span></span>
<span id="cb12-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    즉, url:8080/apikey/type/dataset_nm/start/end 로 줬어야 했다.</span></span>
<span id="cb12-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    execute logic의 concept</span></span>
<span id="cb12-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - 모든 데이터를 다 가져와야 함</span></span>
<span id="cb12-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - seoul open api양식에 맞게 데이터의 시작행과 끝행 입력하는 번거러움을 없앰    </span></span>
<span id="cb12-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb12-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import os</span></span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        connection = BaseHook.get_connection(self.http_conn_id) #airflow webservice ui 화면에서 만들었던 connection 정보를 get_connection()로 가져올 수 있음</span></span>
<span id="cb12-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.base_url = f'http://{connection.host}:{connection.port}/{self.endpoint}' #connection.host &amp; connection.port: user가 입력했던 host와 port정보 호출</span></span>
<span id="cb12-29"></span>
<span id="cb12-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 데이터의 start행과 end행 처리는 아래의 while loop으로 처리</span></span>
<span id="cb12-31"></span>
<span id="cb12-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        total_row_df = pd.DataFrame()</span></span>
<span id="cb12-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        start_row = 1</span></span>
<span id="cb12-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        end_row = 1000</span></span>
<span id="cb12-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        while True:</span></span>
<span id="cb12-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            self.log.info(f'시작:{start_row}')</span></span>
<span id="cb12-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            self.log.info(f'끝:{end_row}')</span></span>
<span id="cb12-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            row_df = self._call_api(self.base_url, start_row, end_row)</span></span>
<span id="cb12-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            total_row_df = pd.concat([total_row_df, row_df])</span></span>
<span id="cb12-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if len(row_df) &lt; 1000:</span></span>
<span id="cb12-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                break</span></span>
<span id="cb12-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            else:</span></span>
<span id="cb12-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                start_row = end_row + 1 #1, 1001, 2001, ...</span></span>
<span id="cb12-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                end_row += 1000 #1000, 2000, 3000, ...</span></span>
<span id="cb12-45"></span>
<span id="cb12-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # len(row_df)가 1000 미만이면 데이터 다 받은 것 아래의 조건문을 탐</span></span>
<span id="cb12-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if not os.path.exists(self.path): #directory 유/무검사</span></span>
<span id="cb12-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            os.system(f'mkdir -p {self.path}')</span></span>
<span id="cb12-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        total_row_df.to_csv(self.path + '/' + self.file_name, encoding='utf-8', index=False)</span></span>
<span id="cb12-50"></span>
<span id="cb12-51"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def _call_api(self, base_url, start_row, end_row):</span></span>
<span id="cb12-52"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import requests #http의 get 요청을 하는 library</span></span>
<span id="cb12-53"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import json </span></span>
<span id="cb12-54"></span>
<span id="cb12-55"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        headers = {'Content-Type': 'application/json',</span></span>
<span id="cb12-56"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  'charset': 'utf-8',</span></span>
<span id="cb12-57"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  'Accept': '*/*'</span></span>
<span id="cb12-58"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  }</span></span>
<span id="cb12-59"></span>
<span id="cb12-60"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        #요청할 url 주소 완성</span></span>
<span id="cb12-61"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        request_url = f'{base_url}/{start_row}/{end_row}/' </span></span>
<span id="cb12-62"></span>
<span id="cb12-63"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if self.base_dt is not None:</span></span>
<span id="cb12-64"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            request_url = f'{base_url}/{start_row}/{end_row}/{self.base_dt}'</span></span>
<span id="cb12-65"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        response = requests.get(request_url, headers) # request library의 get함수 사용. response는 dictionary형태의 string으로 들어옴</span></span>
<span id="cb12-66"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        contents = json.loads(response.text) # json.loads()이 string을 dictionary로 반환함. 즉 contents에는 dictionary type</span></span>
<span id="cb12-67"></span>
<span id="cb12-68"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        key_nm = list(contents.keys())[0]</span></span>
<span id="cb12-69"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        row_data = contents.get(key_nm).get('row')</span></span>
<span id="cb12-70"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        row_df = pd.DataFrame(row_data)</span></span>
<span id="cb12-71"></span>
<span id="cb12-72"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return row_df</span></span></code></pre></div></li>
<li>dictionary data example: 1행
<ul>
<li>key: ‘ListExhibitionOfSeoulMOAInfo’</li>
<li>value: {‘RESULT’: {‘CODE’: ‘INFO-000’,…}}</li>
<li><code>key_nm = list(contents.keys())[0]</code>의 값은 <code>'ListExhibitionOfSeoulMOAInfo'</code></li>
<li><code>row_data = contents.get(key_nm).get('row')</code> 은 <code>key_nm</code>의 value 호출. 이것은 다시 dictionary type이기 때문에 다시 key값 <code>row</code>에 해당되는 값을 호출</li>
<li>그 다음 데이터프래임으로 만듦</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">{'ListExhibitionOfSeoulMOAInfo': {'RESULT': {'CODE': 'INFO-000',</span>
<span id="cb13-2">                                            'MESSAGE': '정상 처리되었습니다'},</span>
<span id="cb13-3">                                  'list_total_count': 738,</span>
<span id="cb13-4">                                  'row': <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{'DP_ARTIST': '박미나, Sasa[44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>',</span>
<span id="cb13-5">                                          'DP_ART_CNT': '180여 점',</span>
<span id="cb13-6">                                          'DP_ART_PART': '회화, 설치, 아카이브, 사운드, '</span>
<span id="cb13-7">                                                          '영상 등',</span>
<span id="cb13-8">                                          'DP_DATE': '2024-01-24',</span>
<span id="cb13-9">                                          'DP_END': '2024-03-31',</span>
<span id="cb13-10">                                          'DP_EVENT': '',</span>
<span id="cb13-11">                                          'DP_EX_NO': '1255383',</span>
<span id="cb13-12">                                          'DP_HOMEPAGE': 'https://semaaa.seoul.go.kr/front/main.do',</span>
<span id="cb13-13">                                          'DP_INFO': '&lt;p&gt;《이력서: 박미나와 '</span>
<span id="cb13-14">                                                      'Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>》는 사물과 정보를 '</span>
<span id="cb13-15">                                                      '조사-수집-분석하는 방법론을 발전시켜 온 '</span>
<span id="cb13-16">                                                      '박미나와 Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>의 2인전입니다. '</span>
<span id="cb13-17">                                                      '두 작가는 2002년 첫 협업 전시를 '</span>
<span id="cb13-18">                                                      '시작으로 생산과 소비, 원본과 복제의 전후 '</span>
<span id="cb13-19">                                                      '관계에 대한 문제의식을 공유했고, '</span>
<span id="cb13-20">                                                      '현재까지도 실험적 관계 설정을 통해 개인 '</span>
<span id="cb13-21">                                                      '작업과 공동 작업을 병행하고 있습니다. '</span>
<span id="cb13-22">                                                      '이번 전시는 박미나와 Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>가 '</span>
<span id="cb13-23">                                                      '지난 20여 년간 따로, 또 함께 선보인 '</span>
<span id="cb13-24">                                                      '전시와 그 기록들을 이력서의 형식을 빌려 '</span>
<span id="cb13-25">                                                      '하나의 전시로 '</span>
<span id="cb13-26">                                                      '재구성합니다.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;이력서는 '</span>
<span id="cb13-27">                                                      '한 사람이 거쳐 온 학업, 직업, 경험 등 '</span>
<span id="cb13-28">                                                      '개인의 활동을 기록하는 문서의 양식입니다. '</span>
<span id="cb13-29">                                                      '개인의 경험은 사회적 인식을 반영하는 '</span>
<span id="cb13-30">                                                      '항목에 맞춰 정보로 조직되고, 타인에게 '</span>
<span id="cb13-31">                                                      '나의 공적 서사를 전시하는 수단으로 '</span>
<span id="cb13-32">                                                      '쓰입니다. 이력서가 정보를 구조화하는 '</span>
<span id="cb13-33">                                                      '하나의 체계이듯, 박미나와 '</span>
<span id="cb13-34">                                                      'Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>는 자료 수집과 조사 연구를 '</span>
<span id="cb13-35">                                                      '기반으로 자신들의 작업 세계를 직조하는 '</span>
<span id="cb13-36">                                                      '체계적인 방법론을 설계해왔습니다. 박미나가 '</span>
<span id="cb13-37">                                                      '회화의 색채를 물감 유통 체계와 연결 짓고 '</span>
<span id="cb13-38">                                                      '회화의 동시대적 조건을 탐구한다면, '</span>
<span id="cb13-39">                                                      'Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>는 시대의 지표가 되는 각종 '</span>
<span id="cb13-40">                                                      '자료를 수집하고 피처링, 샘플링, 매시업 '</span>
<span id="cb13-41">                                                      '등 대중음악의 방법을 전유해 새로운 의미의 '</span>
<span id="cb13-42">                                                      '층위를 '</span>
<span id="cb13-43">                                                      '발생시킵니다.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;전시는 '</span>
<span id="cb13-44">                                                      '이력서의 양식에 따라 ‘전시 이력’과 '</span>
<span id="cb13-45">                                                      '‘참고문헌’으로 나뉩니다. ‘전시 '</span>
<span id="cb13-46">                                                      '이력’에서는 박미나와 Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>의 '</span>
<span id="cb13-47">                                                      '주요 전시를 가로지르며 초기작과 대표작, '</span>
<span id="cb13-48">                                                      '미발표작 140여 점을 살펴볼 수 '</span>
<span id="cb13-49">                                                      '있습니다. 각각의 작업들은 과거의 전시와 '</span>
<span id="cb13-50">                                                      '현재를 매개하는 장치이면서, 작업 간의 '</span>
<span id="cb13-51">                                                      '연계를 강조하는 분류와 배치에 의해 새로운 '</span>
<span id="cb13-52">                                                      '의미를 드러냅니다. ‘참고문헌’은 '</span>
<span id="cb13-53">                                                      '2001년부터 2022년까지 발행된 국내외 '</span>
<span id="cb13-54">                                                      '신문, 잡지 등의 연속간행물 중 박미나와 '</span>
<span id="cb13-55">                                                      'Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>가 언급된 1,259개의 '</span>
<span id="cb13-56">                                                      '기사를 수집하여 한 권의 책과 사운드 '</span>
<span id="cb13-57">                                                      '작업으로 재구성하였습니다. 이 전시는 '</span>
<span id="cb13-58">                                                      '박미나와 Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>의 작업 세계를 '</span>
<span id="cb13-59">                                                      '경유하여 수집과 아카이브, 기록의 의미를 '</span>
<span id="cb13-60">                                                      '탐구하고 새로운 방식으로 자료 수집과 '</span>
<span id="cb13-61">                                                      '연구의 과정을 포착해 보려는 '</span>
<span id="cb13-62">                                                      '시도입니다.&lt;/p&gt;',</span>
<span id="cb13-63">                                          'DP_LNK': 'https://sema.seoul.go.kr/kr/whatson/exhibition/detail?exNo=1255383',</span>
<span id="cb13-64">                                          'DP_MAIN_IMG': 'http://sema.seoul.go.kr/common/imageView?FILE_PATH=%2Fex%2FEXI01%2F2023%2F&amp;FILE_NM=20231226080317_f421712f05eb4e75a9e63d0de2a61f8b_2b1155dcb3954a43b4cc090868e3f111',</span>
<span id="cb13-65">                                          'DP_NAME': '이력서: 박미나와 Sasa<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">44</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>',</span>
<span id="cb13-66">                                          'DP_PLACE': '서울시립 미술아카이브',</span>
<span id="cb13-67">                                          'DP_SEQ': '000738',</span>
<span id="cb13-68">                                          'DP_SPONSOR': '서울시립미술관',</span>
<span id="cb13-69">                                          'DP_START': '2023-12-21',</span>
<span id="cb13-70">                                          'DP_SUBNAME': '',</span>
<span id="cb13-71">                                          'DP_VIEWCHARGE': '',</span>
<span id="cb13-72">                                          'DP_VIEWPOINT': '',</span>
<span id="cb13-73">                                          'DP_VIEWTIME': ''}]}}</span></code></pre></div></li>
</ul>
</section>
</section>
<section id="dag-full-example" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> DAG Full Example</h1>
<ul>
<li>COVID19 data download</li>
<li><code>seoul_api_to_csv_operator.py</code> 에서 class 상속 받아 custom operator 생성</li>
</ul>
<pre class="mardkown"><code>
from operators.seoul_api_to_csv_operator import SeoulApiToCsvOperator
from airflow import DAG
import pendulum

with DAG(
    dag_id='dags_seoul_api_corona',
    schedule='0 7 * * *',
    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),
    catchup=False
) as dag:
    '''서울시 코로나19 확진자 발생동향'''
    tb_corona19_count_status = SeoulApiToCsvOperator(
        task_id='tb_corona19_count_status',
        dataset_nm='TbCorona19CountStatus',
        path='/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}', # worker container 위치, files directory를 worker container와 연결시켜줘야함
        file_name='TbCorona19CountStatus.csv'
    )
    
    '''서울시 코로나19 백신 예방접종 현황'''
    tv_corona19_vaccine_stat_new = SeoulApiToCsvOperator(
        task_id='tv_corona19_vaccine_stat_new',
        dataset_nm='tvCorona19VaccinestatNew',
        path='/opt/airflow/files/tvCorona19VaccinestatNew/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}',
        file_name='tvCorona19VaccinestatNew.csv'
    )

    tb_corona19_count_status &gt;&gt; tv_corona19_vaccine_stat_new</code></pre>
<ul>
<li>tb_corona19_count_status = SeoulApiToCsvOperator() 의 수행은 wokrer_container가 주체</li>
<li>SeoulApiToCsvOperator()의 path=‘/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone(“Asia/Seoul”) | ds_nodash }}’.
<ul>
<li>여기서 worker container는 ‘/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone(“Asia/Seoul”) | ds_nodash }}’ 연결이 안되어 있기 때문에</li>
<li>container가 내려갔다가 다시 올라오면 files의 내용은 다 사라짐</li>
<li>docker_compose.yaml에서 경로 지정을 해줘야 자동으로 인식하여 wsl/files에 csv가 자동으로 저장된다.</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">  volumes:</span>
<span id="cb15-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags</span>
<span id="cb15-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb15-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb15-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugin</span>
<span id="cb15-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/airflow/files:/opt/airflow/files</span></code></pre></div>
<ul>
<li>실행 날짜로 저장된 directory명안에 csv를 vi editor로 열고 <code>se nu</code> 명령어로 건수를 확인</li>
</ul></li>
</ul>
</section>
<section id="dags_seoul_api_corona.py-error" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> dags_seoul_api_corona.py error</h1>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2024-01-25, 10:57:24 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {taskinstance.py:1824} ERROR - Task failed with exception</span>
<span id="cb16-2">Traceback (most recent call last):</span>
<span id="cb16-3">  File "/opt/airflow/plugins/operators/seoul_api_to_csv_operator.py", line 38, in execute</span>
<span id="cb16-4">    total_row_df.to_csv(self.path + '/' + self.file_name, encoding='utf-8', index=False)</span>
<span id="cb16-5">  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/core/generic.py", line 3482, in to_csv</span>
<span id="cb16-6">    storage_options=storage_options,</span>
<span id="cb16-7">  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/formats/format.py", line 1105, in to_csv</span>
<span id="cb16-8">    csv_formatter.save()</span>
<span id="cb16-9">  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/formats/csvs.py", line 243, in save</span>
<span id="cb16-10">    storage_options=self.storage_options,</span>
<span id="cb16-11">  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/common.py", line 707, in get_handle</span>
<span id="cb16-12">    newline="",</span>
<span id="cb16-13">FileNotFoundError: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Errno 2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> No such file or directory: '/opt/airflow/files/TbCorona19CountStatus/20240125/TbCorona19CountStatus.csv'</span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2024-01-25, 10:57:24 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {taskinstance.py:1350} INFO - Marking task as FAILED. dag_id=dags_seoul_api_corona, task_id=tb_corona19_count_status, execution_date=20240125T105722, start_date=20240125T105724, end_date=20240125T105724</span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2024-01-25, 10:57:24 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {standard_task_runner.py:109} ERROR - Failed to execute job 493 for task tb_corona19_count_status (<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Errno 2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> No such file or directory: '/opt/airflow/files/TbCorona19CountStatus/20240125/TbCorona19CountStatus.csv'; 33640)</span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2024-01-25, 10:57:24 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {local_task_job_runner.py:225} INFO - Task exited with return code 1</span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2024-01-25, 10:57:24 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {taskinstance.py:2651} INFO - 0 downstream tasks scheduled from follow-on schedule check</span></code></pre></div>
<ul>
<li><code>FileNotFoundError: [Errno 2] No such file or directory: '/opt/airflow/files/TbCorona19CountStatus/20240125/TbCorona19CountStatus.csv'</code> 발생시</li>
<li>csv를 저장하려는데 저장할 디렉토리가 없어서 발생하는 에러: <code>seoul_api_to_csv_operator</code> 파일의 36번째 라인에서 디렉토리를 미리 생성할 수 있도록 하고 있는데, 저 명령이 제대로 실행이 안됐을 가능성이 있음.</li>
<li>저 명령문이 진짜 제대로 실행되지 않았는지 확인해보기 위해 dag 수행 후 실패가 발생했을때 worker 컨테이너 안에 들어가서 /opt/airflow/files/TbCorona19CountStatus/{연월일} 디렉토리가 잘 생성됐는지 확인해야함.</li>
<li>저 디렉토리가 없다면 36번째 라인이 제대로 실행되지 않은 것</li>
<li>워커 컨테이너로 들어가는 것은 wsl 터미널에서 <code>sudo docker exec -it {worker컨테이어id} bash</code> 치면 들어갈 수 있음</li>
<li>실행 결과 <code>TbCorona19CountStatus</code> directory 없음 <img src="kmink3225.netlify.app/images/airflow/seoul_api_to_csv_operator.py_error.PNG" class="img-fluid" alt="os.system(f’mkdir -p {self.path}’) error"></li>
</ul>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">default@436d1afa88b7:/opt/airflow$ ls -al</span>
<span id="cb17-2">total 104</span>
<span id="cb17-3">drwxrwxr-x  1 airflow root  4096 Jan 24 23:07 .</span>
<span id="cb17-4">drwxr-xr-x  1 root    root  4096 May 16  2023 ..</span>
<span id="cb17-5">-rw-r--r--  1 default root     2 Jan 24 23:07 airflow-worker.pid</span>
<span id="cb17-6">-rw-------  1 default root 58175 Jan 24 23:07 airflow.cfg</span>
<span id="cb17-7">drwxr-xr-x  2 root    root  4096 Jan 18 05:52 config</span>
<span id="cb17-8">drwxr-xr-x  3 default root  4096 Jan 25 10:54 dags</span>
<span id="cb17-9">drwxr-xr-x  0 root    root     0 Jan 18 05:52 files</span>
<span id="cb17-10">drwxr-xr-x 27 default root  4096 Jan 25 10:57 logs</span>
<span id="cb17-11">drwxr-xr-x  7 default root  4096 Jan 18 05:49 plugins</span>
<span id="cb17-12">-rw-rw-r--  1 default root  4771 Jan 24 23:07 webserver_config.py</span></code></pre></div>
<ul>
<li><code>drwxr-xr-x  0 root    root     0 Jan 18 05:52 files</code> files에 root 권한이 있다. <code>/opt/airflow</code> 아래의 <code>files</code> 디렉토리의 owner가 root 권한으로 만들어져있다. <code>dags</code>나 <code>plugins</code> 같은 다른 디렉토리의 owner는 default 인데 files 만 root로 만들어진 이유는 아마도 WSL터미널에서 <code>files</code> 디렉토리를 생성할 때 <code>sudo mkdir files</code> 명령으로 만들었을 것. <code>sudo</code> 를 붙이면 root 권한을 빌려 만들면 <code>files</code> 디렉토리는 root owner 에 root group으로 생성된다. 따라서 도커 컨테이너도 files 디렉토리를 root owner로 연결된다. <code>/opt/airflow/files</code> 디렉토리가 root owner 이니 <code>default uid(1000)</code> 로는 권한이 없어서 디렉토리 생성이 불가능</li>
<li>WSL 터미널에서 <code>files</code> 디렉토리를 지우고 <code>sudo</code> 없이 그냥 <code>mkdir files</code> 디렉토리를 만들면됨.</li>
<li>만약 files directory가 사용중이서 안지워진다면 컨테이너 서비스를 다시 내렸다가 올려 볼것. <code>sudo docker compose down</code>으로 껐다가 <code>sudo docker compose up</code>으로 다시 킴</li>
<li>안 그러면 어떤 프로그램이 지우고자 하는 directory를 사용하고 있는지 직접 찾아서 <code>kill</code>을 해야함</li>
</ul>
<section id="summary" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="summary"><span class="header-section-number">7.1</span> Summary</h2>
<ul>
<li>Custom 오퍼레이터를 만들면 왜 좋을까 ?
<ul>
<li>원하는대로 로직을 만들 수 있다.</li>
<li>비효율성 제거
<ul>
<li>만약 custom 오퍼레이터를 만들지 않았다면</li>
<li>개발자마다 각자 서울 공공데이터 데이터셋 추출 저장하는 파이썬 파일을 만들어 PythonOperator 를 이용해 개발했을 것</li>
<li>비슷한 동작을 하는 파이썬 파일이 관리되지 않은 채 수십 개 만들어지면 그 자체로 비효율 발생</li>
<li>운영하는 사람 입장에서 비슷한 script가 여러 개 있으면 이해할 수가 없음</li>
</ul></li>
<li>재사용성 강화
<ul>
<li>특정기능을 하는 모듈을 만들어 놓고 , 상세 조건은 파라미터로 받게끔하여 모듈을 재사용할 수 있도록 유도</li>
<li>Custom 오퍼레이터 개발</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/08.more_operators.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Connection &amp; Hook</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/09.connection_hook.html</link>
  <description><![CDATA[ 




<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="goal" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Goal</h1>
<ul>
<li>posgres DB를 container로 띄우기</li>
<li>airflow의 connection &amp; hook 설정</li>
</ul>
</section>
<section id="docker-compose-interpretation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Docker Compose Interpretation</h1>
<p>Docker Compose를 사용하면 이러한 다중 컨테이너 환경을 간편하게 구성하고 관리할 수 있다.</p>
<ul>
<li>목적
<ul>
<li>1 개 이상의 도커 컨테이너 생성시 스크립트 하나로 컨테이너들의 설정을 관리할 수 있도록 해주는 Docker 의 기능 중 하나</li>
<li>각 각의 container 설정 관리 뿐만 아니라 containers간의 연관관계 및 dependency까지 설정할 수 있다.</li>
<li>일부 containers를 같은 network에서 띄워지는지도 설정할 수 있는 network 설정도 할 수 있다.</li>
</ul></li>
<li>설정 파일
<ul>
<li>Docker Compose는 <code>docker-compose.yml</code>이라는 YAML 파일을 사용하여 서비스, 네트워크, 볼륨 등을 정의. 이 파일에는 애플리케이션을 구성하는 모든 컨테이너와 그 설정이 포함됨.</li>
</ul></li>
<li>기능
<ul>
<li>간편한 관리
<ul>
<li><code>docker-compose up</code> 명령어 한 번으로 모든 서비스를 시작하고, <code>docker-compose down</code> 명령어로 모두 종료할 수 있다. 이는 복잡한 컨테이너 관리를 단순화한다.</li>
</ul></li>
<li>일관성 유지
<ul>
<li>Docker Compose를 사용하면 개발, 테스팅, 프로덕션 환경에서 동일한 환경을 재현할 수 있어 일관성을 유지.</li>
</ul></li>
<li>다중 컨테이너 조정
<ul>
<li>여러 컨테이너 간의 의존성과 순서를 관리할 수 있어, 올바른 순서로 서비스가 시작되고 종료된다.</li>
</ul></li>
<li>개발 효율성 증가
<ul>
<li>개발 과정에서 빠른 반복과 변경이 가능하며, 변경 사항을 쉽게 적용하고 테스트할 수 있다.</li>
</ul></li>
<li>큰 규모의 프로덕션 환경에서는 Kubernetes와 같은 보다 복잡한 오케스트레이션 도구가 종종 사용된다.<br>
</li>
</ul></li>
<li>작성방법
<ul>
<li>모든 설정은 <code>docker_compose.yaml</code> 파일에 컨테이너들의 설정 내용을 입력</li>
</ul></li>
<li>docker compose service 시작
<ul>
<li><code>docker_compose.yaml</code> 파일이 있는 위치에서 sudo docker compose up 명령 입력하면 docker_compose.yaml에 있는 모든 설정이 적용된다.</li>
<li>기본적으로 Docker 서비스가 설치되어 있어야 함</li>
</ul></li>
<li>docker compose.yaml 파일의 구성
<ul>
<li>yaml 파일은 json 이나 xml 과 같이 <strong>key, value 가 중첩적으로 구성되며 계층적인 구조</strong>를 가진다. 파이썬처럼 들여쓰기 문법을 사용함. 들여쓰기 잘못하면 오류남.</li>
<li>다시 말해서, json 이나 xml은 파이썬의 dictionary 같이 nested {key:value} structure로 작성할 수 있다.</li>
</ul></li>
<li>docker_compose.yaml 파일의 <strong>1 Level</strong> 내용</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">version:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> '3.8' # yaml 파일의 버전 정보 옵션</span></span>
<span id="cb1-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x-airflow-common:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 'x-': Extention Fields(각 서비스 항목에 또는 container에  공통 적용될 항목들 정의)</span></span>
<span id="cb1-3"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">services:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 컨테이너로 실행할 서비스 정의로 가장 신경써서 적어야할 부분</span></span>
<span id="cb1-4"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">volumes:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # 컨테이너에 할당할 volume 정의</span></span>
<span id="cb1-5"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">networks:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 컨테이너에 연결할 network 정의. 초기에는 level1에 networks 항목이 정의되어 있지 않아 정의해줘야함</span></span></code></pre></div>
<ul>
<li><p>위의 내용에서 key값은 version, x-airflow-common, services, volumes, networks</p></li>
<li><p>networks: containers에 IP나 network정보를 할당해주기 위해 작성하는 항목</p></li>
<li><p>x-airflow-common: 공통 지정할 항목을 <code>&amp;</code>를 붙여서 지정</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">x-airflow-common</span>
<span id="cb2-2">    &amp;airflow-common # 공통 지정 parameters 정의: image, environment, depends_on</span>
<span id="cb2-3">    image: ${AIRFLOW_IMAGE:-apache/airflow:2.5.2}</span>
<span id="cb2-4">    environment</span>
<span id="cb2-5">        &amp;airflow-common-env</span>
<span id="cb2-6">        AIRFLOW__CORE__DEFAULT_TIMEZONE: 'Asia/Seoul'</span>
<span id="cb2-7">        AIRFLOW__CORE__EXECUTOR: CeleryExecutor</span>
<span id="cb2-8">        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow</span>
<span id="cb2-9">    depends_on # containers 실행 순서를 결정</span>
<span id="cb2-10">        &amp;airflow-common-depends-on # 공통 지정 parameters 정의: redis, postgres</span>
<span id="cb2-11">        redis:</span>
<span id="cb2-12">            condition: service_healthy</span>
<span id="cb2-13">        postgres:</span>
<span id="cb2-14">            condition: service_healthy</span></code></pre></div>
<ul>
<li>&amp;airflow-common는 image, environment, depends_on 인수를 미리 가지고 있음</li>
<li>공통 지정 항목1: &amp;airflow-common
<ul>
<li>변수 또는 parameter: image, environment, depends_on</li>
</ul></li>
<li>공통 지정 항목2: &amp;airflow-common-env
<ul>
<li>변수 또는 parameter: AIRFLOW__CORE__DEFAULT_TIMEZONE, AIRFLOW__CORE__EXECUTOR, AIRFLOW__DATABASE__SQL_ALCHEMY_CONN</li>
</ul></li>
<li>공통 지정 항목3: &amp;airflow-common-depends-on
<ul>
<li>변수 또는 parameter: redis, postgres</li>
</ul></li>
<li>후차적인 스크립트에서 &amp;airflow-common 를 호출 하면 아래의 내용이 모두 호출 됨</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">&amp;airflow-common # 공통 지정 parameters 정의: image, environment, depends_on</span>
<span id="cb3-2">image: ${AIRFLOW_IMAGE:-apache/airflow:2.5.2}</span>
<span id="cb3-3">environment</span>
<span id="cb3-4">    &amp;airflow-common-env</span>
<span id="cb3-5">    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'Asia/Seoul'</span>
<span id="cb3-6">    AIRFLOW__CORE__EXECUTOR: CeleryExecutor</span>
<span id="cb3-7">    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow</span>
<span id="cb3-8">depends_on # containers 실행 순서를 결정</span>
<span id="cb3-9">    &amp;airflow-common-depends-on # 공통 지정 parameters 정의: redis, postgres</span>
<span id="cb3-10">    redis:</span>
<span id="cb3-11">        condition: service_healthy</span>
<span id="cb3-12">    postgres:</span>
<span id="cb3-13">        condition: service_healthy</span></code></pre></div></li>
<li><p>services: 컨테이너로 올릴(실행할) 서비스 지정</p>
<ul>
<li>airflow-webserver key</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">  airflow-webserver:</span>
<span id="cb4-2">    &lt;&lt;: *airflow-common #&lt;&lt; 붙여서 공통 지정 항목 (image, environment, depends_on) 호출 </span>
<span id="cb4-3">    command: webserver</span>
<span id="cb4-4">    ports:</span>
<span id="cb4-5">      - "8080:8080"</span>
<span id="cb4-6">    healthcheck:</span>
<span id="cb4-7">      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]</span>
<span id="cb4-8">      interval: 10s</span>
<span id="cb4-9">      timeout: 10s</span>
<span id="cb4-10">      retries: 5</span>
<span id="cb4-11">      start_period: 30s</span>
<span id="cb4-12">    restart: always</span>
<span id="cb4-13">    depends_on: #위에서 &lt;&lt;: *airflow-common 때문에 depends on이 있지만 한번 더 설정하게 되면 앞에 있는 depends_on은 무시됨</span>
<span id="cb4-14">      &lt;&lt;: *airflow-common-depends-on # *airflow-common의 depends-on 호출 (redis, postgres)</span>
<span id="cb4-15">      airflow-init:</span>
<span id="cb4-16">        condition: service_completed_successfully</span>
<span id="cb4-17">    networks:</span>
<span id="cb4-18">      network_custom:</span>
<span id="cb4-19">        ipv4_address: 172.28.0.6</span></code></pre></div>
<ul>
<li>default postgres 서비스 말고 새로 지정할 postgres 서비스. 초기의 docker_compose.yaml파일에서는 없음</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">services:</span></span>
<span id="cb5-2">   postgres:</span>
<span id="cb5-3">     image: postgres:13</span>
<span id="cb5-4">     environment:</span>
<span id="cb5-5">       POSTGRES_USER: airflow</span>
<span id="cb5-6">       POSTGRES_PASSWORD: airflow</span>
<span id="cb5-7">       POSTGRES_DB: airflow</span>
<span id="cb5-8">     volumes:</span>
<span id="cb5-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">       - </span>postgres-db-volume:/var/lib/postgresql/data</span>
<span id="cb5-10">     healthcheck:</span>
<span id="cb5-11">       test: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"CMD", "pg_isready", "-U", "airflow"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-12">       interval: 10s</span>
<span id="cb5-13">       retries: 5</span>
<span id="cb5-14">       start_period: 5s</span>
<span id="cb5-15">    ports</span>
<span id="cb5-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        - </span>5432:5432</span>
<span id="cb5-17">     restart: always</span></code></pre></div>
<ul>
<li><code>image: postgres:13</code> 은 image는 postgre:13 버전의 image를 쓴다는 것이고 이 image가 local에 있으면 그대로 쓰고 없으면 인터넷에서 download됨.</li>
<li><code>environment:</code> 는 postgres OS에 설정할 환경 변수들</li>
<li><code>volumes:</code> container와 연결할 local file system 경로를 의미
<ul>
<li><code>postgres-db-volume:/var/lib/postgresql/data</code> <code>:</code>을 기준으로 왼쪽이 local file system의 경로 오른쪽이 연결할 container의 directory. 이 과정을 <strong>mount</strong> 시켰다라고 말함</li>
<li><code>postgres-db-volume</code> 문서 제일 하단에 미리 만들어져 있음</li>
<li>container가 실행되었다가 (띄어졌다가) 꺼지면 (내려지면) 안에 있는 data들이 모두 사라지기 때문에 mount시키는 것이 필요함. 특히, DB container는 mount가 잘 됐는지 확인해야함</li>
<li><code>postgres-db-volume:/var/lib/postgresql/data</code>는 postgresql의 data가 저장되는 directory를 local file system으로 연결시켜 놓은 것<br>
</li>
</ul></li>
<li><code>healthcheck:</code> container가 상태 꺼졌는지 켜졌는지 확인</li>
<li><code>ports</code>: container에 접속하기 위해 공개할 port를 명시
<ul>
<li><code>5432:5432</code> <code>:</code> 을 기준으로 왼쪽이 local에서 web에 접속할 port 번호고 오른쪽이 service가 갖고 있는 port번호. 다시 말해서, wsl 시스템안에 여러 컨테이너들이 있고 그 중 postgres 이미지가 깔려 있다면 postgres는 5432 port를 가지고 있는 상태이다. postgres 이미지에 접근하려면 wsl의 port를 통해서 접근해야하는데 그 wsl의 port가 5432로 지정된 것을 의미한다.</li>
<li>원래 <code>docker-compose.yaml</code> 파일 최초 다운로드시 없는 항목이다. 추가해줘야 함.</li>
</ul></li>
<li><code>restart: always</code> container가 죽으면 언제 새로 띄워주겠냐는 것이고 always니까 항상 새로 띄워줌</li>
<li>redis</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">  redis:</span>
<span id="cb6-2">    image: redis:latest</span>
<span id="cb6-3">    expose:</span>
<span id="cb6-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">      - </span>6379</span>
<span id="cb6-5">    healthcheck:</span>
<span id="cb6-6">      test: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"CMD", "redis-cli", "ping"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-7">      interval: 10s</span>
<span id="cb6-8">      timeout: 30s</span>
<span id="cb6-9">      retries: 50</span>
<span id="cb6-10">      start_period: 30s</span>
<span id="cb6-11">    restart: always</span></code></pre></div>
<ul>
<li><code>expose: 6379</code> 이것 역시 port번호인데 외부와 연결될 때 사용되는 게 아니라 내부 다른 containers와 연결시 사용되는 port번호로 expose parameter로 공개 설정한다.</li>
<li>airflow-webserver</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">  airflow-webserver:</span>
<span id="cb7-2">    &lt;&lt;: *airflow-common # &amp;airflow-common의 공통 지정 parameters 호출: image, environment, depends_on</span>
<span id="cb7-3">    command: webserver # container를 띄울 때 실행할 명령어</span>
<span id="cb7-4">    ports:</span>
<span id="cb7-5">      - "8080:8080"</span>
<span id="cb7-6">    healthcheck:</span>
<span id="cb7-7">      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]</span>
<span id="cb7-8">      interval: 30s</span>
<span id="cb7-9">      timeout: 10s</span>
<span id="cb7-10">      retries: 5</span>
<span id="cb7-11">      start_period: 30s</span>
<span id="cb7-12">    restart: always</span>
<span id="cb7-13">    depends_on: # 2번째 depends_on 선언이 되어 호출된 (&lt;&lt;: *airflow-common) &amp;airflow-common의 depends_on 의 내용은 무시된다.</span>
<span id="cb7-14">      &lt;&lt;: *airflow-common-depends-on # 공통 지정 parameters 호출: redis, postgres</span>
<span id="cb7-15">      airflow-init:</span>
<span id="cb7-16">        condition: service_completed_successfully</span></code></pre></div>
<ul>
<li>services: 1-level (x-airflow-common 같은 level)
<ul>
<li>airflow-webserver, airflow-scheduler, redis, postgres 등이 같은 level의 서비스 항목으로 열거 된다.</li>
</ul></li>
<li>depends_on: containers를 띄우는 (실행하는) 순서를 설정하는 부분으로 위의 예시는
<ul>
<li>redis, postgres, airflow-init을 띄우고 나서 airflow-webserver를 띄우겠다는 것.</li>
<li>[redis, postgres, airflow-init]&gt;&gt;airflow-webserver</li>
</ul></li>
<li>airflow-scheduler: <strong>1-level</strong></li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">  airflow-scheduler: # 1-level</span>
<span id="cb8-2">       &lt;&lt;: *airflow-common</span>
<span id="cb8-3">       command: scheduler</span>
<span id="cb8-4">       healthcheck:</span>
<span id="cb8-5">         test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]</span>
<span id="cb8-6">         interval: 30s</span>
<span id="cb8-7">         timeout: 10s</span>
<span id="cb8-8">         retries: 5</span>
<span id="cb8-9">         start_period: 30s</span>
<span id="cb8-10">       restart: always</span>
<span id="cb8-11">       depends_on:</span>
<span id="cb8-12">         &lt;&lt;: *airflow-common-depends-on</span>
<span id="cb8-13">         airflow-init:</span>
<span id="cb8-14">           condition: service_completed_successfully</span></code></pre></div></li>
<li><p>volumes: 컨테이너와 연결하기 위한 볼륨 (공간) 정보 ```markdown volumns: postgree-db-volume: #새로 만들 볼륨 이름</p>
<p>```</p>
<ul>
<li>볼륨에 대한 정보 확인하기
<ol type="1">
<li>볼륨 리스트 보기 : <code>sudo docker volume ls</code> (현재 만들어진 volumes 리스트와 volumne_id가 보임)</li>
<li>볼륨 상세 보기 : <code>sudo docker volume inspect {volume_id}</code></li>
</ol></li>
</ul></li>
<li><p>networks: 컨테이너의 network 정보 구성</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">networks:</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    network_custom: # 새로 만들 네트워크 이름</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        driver: bridge</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ipam:</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            driver: default</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            config:</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                - subnet : 172.18.0.0/16 # 네트워크 IP의 주소값이 2^16 개, host가 가질 IP의 주소값은 2^16-2 만큼을 할당할 수 있다.</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  gateway: 172.18.0.1</span></span></code></pre></div>
<ul>
<li><p>config:</p>
<ul>
<li>subnet : 172.18.0.0/16</li>
<li>gateway: 172.18.0.1</li>
</ul>
<p>:::{.callout-note} 여기서 언급된 “172.18.0.0/16”은 CIDR (Classless Inter-Domain Routing) 표기법을 사용한 네트워크 주소이다. 이 표기법은 IP 네트워크를 어떻게 분할하고 주소를 할당할 것인지 정의한다.</p>
<p>“172.18.0.0/16”에서 “/16”은 네트워크 마스크의 길이를 나타낸다. 이는 전체 32비트 IPv4 주소 중 상위 16비트가 네트워크 주소를 위해 사용되고, 나머지 하위 16비트가 호스트 주소를 위해 사용됨을 의미한다.</p>
<p>네트워크 주소의 수: “/16” 네트워크 마스크는 2^16, 즉 65,536개의 가능한 호스트 주소를 제공한다. 이는 네트워크의 첫 번째 주소 (172.18.0.0)부터 마지막 주소 (172.18.255.255)까지를 포함한다.</p>
<p>호스트가 사용할 수 있는 주소 수: 실제 호스트가 사용할 수 있는 IP 주소는 이론상 65,536개에서 2개를 뺀 65,534개이다. 이는 네트워크 주소 (172.18.0.0)와 브로드캐스트 주소 (172.18.255.255)가 호스트 할당에 사용되지 않기 때문이다.</p>
<p>네트워크 주소 (여기서는 172.18.0.0): 네트워크 부분은 호스트를 식별하는데 사용되는 부분이 아닌 네트워크 자체를 식별하는데 사용되는 부분. 브로드캐스트 주소 (여기서는 172.18.255.255): 네트워크 내의 모든 호스트에 데이터를 전송하는 데 사용됨.</p>
<p>이러한 설정에서는 네트워크 IP의 주소값이 2^16 (또는 65536) 개로 할당된다.</p>
<p>따라서, 이 설정에서 Docker는 172.18.0.1부터 172.18.255.254까지의 IP 주소 범위를 갖는 네트워크를 생성하며, 이 범위 내의 IP 주소를 컨테이너에 할당할 수 있는데, 그것이 2^16-2이다.</p>
<p>참고로 네트워크 IP 주소는 클래스별로 사설 IP대역을 만들어놨음. A: 10.0.0.0 ~ 10.255.255.255 B: 172.16.0.0 ~ 172.31.255.255 C: 192.168.0.0 ~ 192.168.255.255</p>
<p>B클래스의 네트워크 주소 bit는 16비트이다. 호스트 주소 bit도 16비트. :::</p></li>
<li><p>네트워크에 대한 정보 확인하기</p>
<ol type="1">
<li>네트워크 리스트 보기 : <code>sudo docker network ls</code></li>
<li>네트워크 상세 보기 : <code>sudo docker network inspect {network_id}</code></li>
</ol></li>
</ul></li>
</ul>
</section>
<section id="postgres-컨테이너-올리기" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Postgres 컨테이너 올리기</h1>
<section id="postgress-컨테이너-추가하기" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="postgress-컨테이너-추가하기"><span class="header-section-number">3.1</span> Postgress 컨테이너 추가하기</h2>
<ul>
<li>postgres_custom 이라는 이름의 컨테이너 서비스 추가하기</li>
<li>networks를 만들어 컨테이너에 고정 IP 할당</li>
<li>DBeaver로 postgres DB에 접속</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">services:</span></span>
<span id="cb10-2">  postgres_custom:</span>
<span id="cb10-3">    image: postgres:13</span>
<span id="cb10-4">    environment:</span>
<span id="cb10-5">      POSTGRES_USER: kmkim</span>
<span id="cb10-6">      POSTGRES_PASSWORD: kmkim</span>
<span id="cb10-7">      POSTGRES_DB: kmkim</span>
<span id="cb10-8">      TZ: Asia/Seoul</span>
<span id="cb10-9">    volumes:</span>
<span id="cb10-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">      - </span>postgres-custom-db-volume:/var/lib/postgresql/data</span>
<span id="cb10-11">    ports:</span>
<span id="cb10-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">      - </span>5432:5432</span>
<span id="cb10-13">    networks:</span>
<span id="cb10-14">      network_custom: # 밑에서 정의한 network_custom 을 쓰겠다는 의미</span>
<span id="cb10-15">        ipv4_address: 172.28.0.3 # 할당된 IP</span>
<span id="cb10-16"></span>
<span id="cb10-17">networks:</span>
<span id="cb10-18">  network_custom: </span>
<span id="cb10-19">    driver: bridge</span>
<span id="cb10-20">    ipam:</span>
<span id="cb10-21">        driver: default</span>
<span id="cb10-22">        config:</span>
<span id="cb10-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - </span>subnet: 172.28.0.0/16 # 네트 워크 ID 주소 밑에 16개/host id 주소 밑에 16개를 할당하겠다는 의미</span>
<span id="cb10-24">              gateway: 172.28.0.1 # default 네트워크 (172.18.0.0)가 쓰고 있지 않은 서브넷으로 구성</span>
<span id="cb10-25">volumes:</span>
<span id="cb10-26">  postgres-db-volume:</span>
<span id="cb10-27">  postgres-custom-db-volume: #wsl의 어느 path에 mapping이 되어 있는지 확인할 것</span></code></pre></div>
</section>
<section id="컨테이너-고정-ip-할당하기" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="컨테이너-고정-ip-할당하기"><span class="header-section-number">3.2</span> 컨테이너 고정 IP 할당하기</h2>
<ul>
<li>기본적으로 컨테이너들은 유동 IP를 지니며 (재기동시 IP 변경 가능)</li>
<li>postgres DB에 접속하려면 고정 IP 필요</li>
<li>고정 IP를 할당하려면 networks를 만들어서 할당해야 함.</li>
<li>networks 를 지정하지 않은 컨테이너들(airflow를 설치하면서 기본적으로 설치되는 containers)은 default network에 묶이게 됨</li>
<li>따라서 동일 네트워크에 두고 싶은 컨테이너들은 모두 동일 netwworks 할당 필요</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">networks:</span></span>
<span id="cb11-2">  network_custom: </span>
<span id="cb11-3">    driver: bridge</span>
<span id="cb11-4">    ipam:</span>
<span id="cb11-5">        driver: default</span>
<span id="cb11-6">        config:</span>
<span id="cb11-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            - </span>subnet: 172.28.0.0/16 # 네트 워크 ID 주소 밑에 16개/host id 주소 밑에 16개를 할당하겠다는 의미</span>
<span id="cb11-8">              gateway: 172.28.0.1 # default 네트워크 (172.18.0.0)가 쓰고 있지 않은 서브넷으로 구성</span></code></pre></div>
<ul>
<li><p>Postgres_custom 컨테이너 뿐만 아니라 다른 컨테이너에도 network_custom 할당하고 IP 부여</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">postgres_custom:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # 172.28.0.3</span></span>
<span id="cb12-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">postgres:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  # 172.28.0.3 +  포트 노출 설정:(5431:5432)</span></span>
<span id="cb12-3"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">redis:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.5</span></span>
<span id="cb12-4"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">airflow-webserver:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.6</span></span>
<span id="cb12-5"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">airflow-scheduler:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.7</span></span>
<span id="cb12-6"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">airflow-worker:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.8</span></span>
<span id="cb12-7"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">airflow-triggerer:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.9</span></span>
<span id="cb12-8"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">airflow-init:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 172.28.0.10</span></span></code></pre></div>
<ul>
<li>postgres: # airflow가 기본 메타DB로 쓰고 있는 postgress 컨테이너에 포트 번호 5431로 노출</li>
</ul></li>
<li><p>networks에 172.28.xxx.xxx 같이 172.28 대역을 준 이유</p>
<ul>
<li>아래와 같이 <code>sudo docker ps</code> 를 실행해 container list를 보고 container id를 확인 하여 <code>sudo docker inspect {container_id}</code> or <code>sudo docker inspect b739a3494646</code> 실행해보면 다음과 같은 정보를 볼 수 있다.</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1"> "NetworkSettings": {</span>
<span id="cb13-2">          "Bridge": "",</span>
<span id="cb13-3">          "SandboxID": "b1bda217ebe565bfcf64b3c52e7fbf47032821894db5d97ef9f8f85db5ee57d3",            "HairpinMode": false,</span>
<span id="cb13-4">          "LinkLocalIPv6Address": "",</span>
<span id="cb13-5">          "LinkLocalIPv6PrefixLen": 0,</span>
<span id="cb13-6">          "Ports": {},</span>
<span id="cb13-7">          "SandboxKey": "/var/run/docker/netns/b1bda217ebe5",</span>
<span id="cb13-8">          "SecondaryIPAddresses": null,</span>
<span id="cb13-9">          "SecondaryIPv6Addresses": null,</span>
<span id="cb13-10">          "EndpointID": "",</span>
<span id="cb13-11">          "Gateway": "", # custom-network로 지정해주기전엔 여기 172.19.0.1 로 되어 있었음</span>
<span id="cb13-12">          "GlobalIPv6Address": "",</span>
<span id="cb13-13">          "GlobalIPv6PrefixLen": 0,</span>
<span id="cb13-14">          "IPAddress": "", # custom-network로 지정해주기전엔 여기 172.19.0.6 로 되어 있었음</span>
<span id="cb13-15">          "IPPrefixLen": 0,</span>
<span id="cb13-16">          "IPv6Gateway": "",</span>
<span id="cb13-17">          "MacAddress": "",</span>
<span id="cb13-18">          "Networks": {</span>
<span id="cb13-19">              "airflow_network_custom": {</span>
<span id="cb13-20">                  "IPAMConfig": {</span>
<span id="cb13-21">                      "IPv4Address": "172.28.0.8"</span>
<span id="cb13-22">                  },</span>
<span id="cb13-23">                  "Links": null,</span>
<span id="cb13-24">                  "Aliases": [</span>
<span id="cb13-25">                      "airflow-airflow-worker-1",</span>
<span id="cb13-26">                      "airflow-worker",</span>
<span id="cb13-27">                      "b739a3494646"</span>
<span id="cb13-28">                  ],</span>
<span id="cb13-29">                  "NetworkID": "eb43aaa125bcf1aac0fd512057de947abafd9397dd0d51cf7f49582c8c7d5eb9",</span>
<span id="cb13-30">                  "EndpointID": "",</span>
<span id="cb13-31">                  "Gateway": "",</span>
<span id="cb13-32">                  "IPAddress": "",</span>
<span id="cb13-33">                  "IPPrefixLen": 0,</span>
<span id="cb13-34">                  "IPv6Gateway": "",</span>
<span id="cb13-35">                  "GlobalIPv6Address": "",</span>
<span id="cb13-36">                  "GlobalIPv6PrefixLen": 0,</span>
<span id="cb13-37">                  "MacAddress": "",</span>
<span id="cb13-38">                  "DriverOpts": null</span>
<span id="cb13-39">              }</span>
<span id="cb13-40">          }</span>
<span id="cb13-41">      }</span></code></pre></div>
<ul>
<li>현재 설치되어 있는 networks list 보기 : <code>sudo docker network ls</code></li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">NETWORK ID     NAME                     DRIVER    SCOPE</span>
<span id="cb14-2">260163833c67   airflow_default          bridge    local</span>
<span id="cb14-3">eb43aaa125bc   airflow_network_custom   bridge    local</span>
<span id="cb14-4">1543a7e87603   bridge                   bridge    local</span>
<span id="cb14-5">9d0e4a4e52ce   host                     host      local</span>
<span id="cb14-6">5c1f555d034f   none                     null      local</span></code></pre></div>
<ul>
<li>worker container는 “NetworkID”: “eb43aaa125bcf1aac0fd512057de947abafd9397dd0d51cf7f49582c8c7d5eb9” 에서 앞 부분이 eb43aaa125bc 이기 때문에 airflow_network_custom을 사용하는 것을 볼 수 있다. (networks 지정 전에는 default에 있음)</li>
<li>원래 default network는 IP를 172.19.xxx.xxx 대역을 쓰기 때문에 network custom에서는 안전하게 172.29.xxx.xxx IP 주소가 충돌이 되지 않도록 29로 설정한다.</li>
</ul></li>
<li><p>Volume 현황 보기 : <code>sudo docker volume ls</code></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">DRIVER    VOLUME NAME</span>
<span id="cb15-2">local     1e0ab35524a66be9d849f574436e148479f9af7dd76c763cd4dac2ac147aba3c # docker가 알아서 만든 volume</span>
<span id="cb15-3">local     2f2593b44a32b1474400a100216ccc0e9658b99b1cc0c83ad993bc3bb387d4ba # docker가 알아서 만든 volume </span>
<span id="cb15-4">local     4ae485474d6168c4b62c3bd6ba1b6cd130576d49e733314f3802e36ad34f47a2 # docker가 알아서 만든 volume</span>
<span id="cb15-5">local     4b80894138e5d2ed6b8d5a99723ac747e4325d215e04a81e7ec6254581758109 # docker가 알아서 만든 volume</span>
<span id="cb15-6">local     8bec2d1d658ea13617520f12f1d73981ee2cb7740bee4f3b10ce0aa1e565d0ee # docker가 알아서 만든 volume</span>
<span id="cb15-7">local     91a25038cbe4cec1757bb4ccb35b7a91d73000dfa501c45aa9ebebba351f4882 # docker가 알아서 만든 volume</span>
<span id="cb15-8">local     0315bc7a7513fc0480ae1b220b3f3022d1df134f21c31a3b05282960ea58b820 # docker가 알아서 만든 volume</span>
<span id="cb15-9">local     884de047d72dc84fcf02c7f2dba0c3c5ca6e4d2ef2eb7c2f471be32740ca6949 # docker가 알아서 만든 volume</span>
<span id="cb15-10">local     7300ab83ca5c136dbd95e2d969e5d7d8e09c285c169aaf7789d396d12a940b7a # docker가 알아서 만든 volume</span>
<span id="cb15-11">local     9619310c2f4f3e281b2bd49626cb7ffb157b97946e25bc2d84ea6a27b3842d7e # docker가 알아서 만든 volume</span>
<span id="cb15-12">local     94856658cd6a9ba830bdfd39a73fcf6737cdf82707454c3da2ea6f59c1599ce2 # docker가 알아서 만든 volume</span>
<span id="cb15-13">local     a9f0f6f5f1f4b83a4c1af47aef4ff8f0692cd21eed9db9cde77b08538ccd55a3 # docker가 알아서 만든 volume</span>
<span id="cb15-14">local     a97aa8ddd6bf1224517f37eaeee7425dbfcce1b144ec5c0f3a5bcab47cb80f69 # docker가 알아서 만든 volume</span>
<span id="cb15-15">local     ac91a112c4c03b110775e6ff6cdf8ae774f0376836501f96eb95130594038ec9 # docker가 알아서 만든 volume</span>
<span id="cb15-16">local     airflow_postgres-custom-db-volume # 내가 만든 volume</span>
<span id="cb15-17">local     airflow_postgres-db-volume # airflow가 postgres container를 실행하면서 만들었던 metaDB를 위한 volume</span>
<span id="cb15-18">local     b3b8ab88bbaa69adc798f5fbeebe75dd4d4e47843e9e2861922193695e614926 # docker가 알아서 만든 volume </span>
<span id="cb15-19">local     b41f5d39b0778ca5efdc714a54ae103503cb8a96778cd9bdd19ecf5857e92e85 # docker가 알아서 만든 volume</span>
<span id="cb15-20">local     c5c7439b17427b11aceee49239ed8f3f4805a9c531cf8a3673a635b2f17cc3ec # docker가 알아서 만든 volume</span>
<span id="cb15-21">local     d31b1c160d8127fab58d1585a44b62498c4f0ae5c42962d68cd725cffe9fdd2d # docker가 알아서 만든 volume</span>
<span id="cb15-22">local     f928be82c57a041a2e02e43b81e6e1280b00c71b39a12bb05ff9a1dd9d1ddb32 # docker가 알아서 만든 volume</span></code></pre></div>
<ul>
<li>volume detail 보기 : <code>sudo docker volume inspect airflow_postgres-custom-db-volume</code></li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1">[</span>
<span id="cb16-2">  {</span>
<span id="cb16-3">      "CreatedAt": "2023-07-01T10:38:26+09:00",</span>
<span id="cb16-4">      "Driver": "local",</span>
<span id="cb16-5">      "Labels": {</span>
<span id="cb16-6">          "com.docker.compose.project": "airflow",</span>
<span id="cb16-7">          "com.docker.compose.version": "2.18.1",</span>
<span id="cb16-8">          "com.docker.compose.volume": "postgres-custom-db-volume"</span>
<span id="cb16-9">      },</span>
<span id="cb16-10">      "Mountpoint": "/var/lib/docker/volumes/airflow_postgres-custom-db-volume/_data",</span>
<span id="cb16-11">      "Name": "airflow_postgres-custom-db-volume",</span>
<span id="cb16-12">      "Options": null,</span>
<span id="cb16-13">      "Scope": "local"</span>
<span id="cb16-14">  }</span>
<span id="cb16-15">]</span></code></pre></div>
<ul>
<li>volume의 위치: “/var/lib/docker/volumes/airflow_postgres-custom-db-volume/_data”
<ul>
<li><code>sudo ls /var/lib/docker/volumes/airflow_postgres-custom-db-volume/_data</code> 실행하면 postgres container가 쓰고있는 file list를 확인할 수 있다.</li>
</ul>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">PG_VERSION  global        pg_dynshmem  pg_ident.conf  pg_multixact  pg_replslot  pg_snapshots  pg_stat_tmp  pg_tblspc    pg_wal   postgresql.auto.conf  postmaster.opts   base  pg_commit_ts  pg_hba.conf  pg_logical     pg_notify     pg_serial    pg_stat       pg_subtrans  pg_twophase  pg_xact  postgresql.conf       postmaster.pid</span></code></pre></div>
<h2 id="db-접속하기" data-number="3.3" class="anchored"><span class="header-section-number">3.3</span> DB 접속하기</h2></li>
</ul></li>
<li><p><a href="https://dbeaver.io/">Dbeaver 설치 https://dbeaver.io/</a></p></li>
<li><p>community versiono 설치하면 됨 &gt;&gt; windows installer download 받아 설치</p></li>
</ul>
<section id="dbeaver에-postgres-연결" class="level3" data-number="3.3.1">
<h3 data-number="3.3.1" class="anchored" data-anchor-id="dbeaver에-postgres-연결"><span class="header-section-number">3.3.1</span> DBeaver에 Postgres 연결</h3>
<p><img src="kmink3225.netlify.app/images/airflow/postgres_install1.PNG" class="img-fluid" alt="New Database Connection"> <img src="kmink3225.netlify.app/images/airflow/postgres_install2.PNG" class="img-fluid" alt="Postgres Connection"></p>
<ul>
<li>3번: localhost 자체가 local의 wsl을 의미하기 때문에 그대로 놔두면 됨</li>
<li>4번: port는 docker_compose.yaml에 설정된 port번호 자동으로 입력되서 나옴</li>
<li>5번: kmkim (docker_compose.yaml 설정대로 바꿔야함)</li>
<li>6번: kmkim (docker_compose.yaml 설정대로 바꿔야함)</li>
</ul>
</section>
<section id="airflow-metadb-연결" class="level3" data-number="3.3.2">
<h3 data-number="3.3.2" class="anchored" data-anchor-id="airflow-metadb-연결"><span class="header-section-number">3.3.2</span> Airflow metaDB 연결</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/airflow_metadb_connection.PNG" class="img-fluid figure-img"></p>
<figcaption>Airflow MetaDB Connection</figcaption>
</figure>
</div>
<ul>
<li>1번: docker_compose.yaml 설정대로 5431이 나옴</li>
<li>2번: database 이름은 airflow</li>
<li>3번: username은 airflow</li>
<li>4번: password는 airflow</li>
</ul>
</section>
</section>
</section>
<section id="connection-hook" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Connection &amp; Hook</h1>
<section id="postgres에-데이터-insert" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="postgres에-데이터-insert"><span class="header-section-number">4.1</span> Postgres에 데이터 insert</h2>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1">from airflow import DAG</span>
<span id="cb18-2">import pendulum</span>
<span id="cb18-3">from airflow.operators.python import PythonOperator</span>
<span id="cb18-4"></span>
<span id="cb18-5">with DAG(</span>
<span id="cb18-6">    dag_id='dags_python_with_postgres',</span>
<span id="cb18-7">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb18-8">    schedule=None,</span>
<span id="cb18-9">    catchup=False</span>
<span id="cb18-10">) as dag:</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def insrt_postgres(ip, port, dbname, user, passwd, **kwargs):</span></span>
<span id="cb18-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import psycopg2 # postgres DB에 접속해서 sql query 를 날리고 결과를 가지고 올수있게 해주는 library</span></span>
<span id="cb18-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from contextlib import closing</span></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with closing(psycopg2.connect(host=ip, dbname=dbname, user=user, password=passwd, port=int(port))) as conn:</span></span>
<span id="cb18-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            with closing(conn.cursor()) as cursor:</span></span>
<span id="cb18-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                dag_id = kwargs.get('ti').dag_id</span></span>
<span id="cb18-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                task_id = kwargs.get('ti').task_id</span></span>
<span id="cb18-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                run_id = kwargs.get('ti').run_id</span></span>
<span id="cb18-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                msg = 'insrt 수행'</span></span>
<span id="cb18-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                sql = 'insert into py_opr_drct_insrt values (%s,%s,%s,%s);'</span></span>
<span id="cb18-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                cursor.execute(sql,(dag_id,task_id,run_id,msg))</span></span>
<span id="cb18-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                conn.commit()</span></span>
<span id="cb18-26"></span>
<span id="cb18-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres = PythonOperator(</span></span>
<span id="cb18-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='insrt_postgres',</span></span>
<span id="cb18-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=insrt_postgres,</span></span>
<span id="cb18-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_args=['172.28.0.3', '5432', 'hjkim', 'hjkim', 'hjkim']</span></span>
<span id="cb18-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb18-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb18-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres</span></span></code></pre></div>
<ul>
<li><p><code>psycopg2.connect(host=ip, dbname=dbname, user=user, password=passwd, port=int(port))</code> : DB server와의 연결 (Session)</p>
<ul>
<li>session: TCP/IP 기반의 connection</li>
</ul></li>
<li><p>conn session에서 sql을 이용한 구체적인 query 내용은 두 번째 with문에서 기술</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"> with closing(conn.cursor()) as cursor:</span>
<span id="cb19-2">              dag_id = kwargs.get('ti').dag_id # task instance object 에서 dag_id (property) 호출</span>
<span id="cb19-3">              task_id = kwargs.get('ti').task_id # task instance object 에서 task_id (property) 호출</span>
<span id="cb19-4">              run_id = kwargs.get('ti').run_id # task instance object 에서 run_id (property) 호출</span>
<span id="cb19-5">              msg = 'insrt 수행'</span>
<span id="cb19-6">              sql = 'insert into py_opr_drct_insrt values (%s,%s,%s,%s);' </span>
<span id="cb19-7">              cursor.execute(sql,(dag_id,task_id,run_id,msg))</span>
<span id="cb19-8">              conn.commit()</span></code></pre></div>
<ul>
<li>cursor: client(worker)와 DB서버(container) 사이의 session안에서 client에서 query를 날리고 DB서버로부터 결과를 가져와주는 object. 그러므로 cursor (=conn.cursor())가 없으면 query 수행을 못함</li>
<li><code>cursor.execute(sql,(dag_id,task_id,run_id,msg))</code> 실제 sql 실행하는 부분</li>
<li><code>py_opr_drct_insrt values</code> : 테이블 이름</li>
<li><code>values (%s,%s,%s,%s)</code> 4개의 값 binding</li>
</ul></li>
<li><p>conn이 끝나면 첫 번째 with문의 closing()이 session을 닫아줌</p></li>
<li><p>위의 코드가 아래의 코드와 같은 내용임</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1">conn=psycopg2.connect(...)</span>
<span id="cb20-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~~~</span></span>
<span id="cb20-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">conn.close()</span></span></code></pre></div></li>
<li><p>task 수행</p></li>
</ul>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb21-1">  insrt_postgres = PythonOperator(</span>
<span id="cb21-2">        task_id='insrt_postgres',</span>
<span id="cb21-3">        python_callable=insrt_postgres,</span>
<span id="cb21-4">        op_args=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'172.28.0.3', '5432', 'hjkim', 'hjkim', 'hjkim'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb21-5">    )</span>
<span id="cb21-6">        </span>
<span id="cb21-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres</span></span></code></pre></div>
<ul>
<li><code>def insrt_postgres(ip, port, dbname, user, passwd, **kwargs)</code> 에서 보듯이
<ul>
<li>ip = ‘172.28.0.3’</li>
<li>port = ‘5422’</li>
<li>dbname = ‘hjkim’</li>
<li>passwd = ‘hjkim’</li>
<li>**kwargs = NULL</li>
</ul></li>
<li>postgres DB에 table 만들기
<ul>
<li>DBeaver Open &gt;&gt; kmkim databse 우클릭&gt;&gt; SQL editor &gt;&gt; New SQL Script &gt;&gt; <code>py_opr_drct_insrt</code> table 생성</li>
</ul>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb22-1">create table py_opr_drct_insrt(</span>
<span id="cb22-2">  dag_id varchar(100),</span>
<span id="cb22-3">  task_id varchar(100),</span>
<span id="cb22-4">  run_id varchar(100),</span>
<span id="cb22-5">  msg text # 가변길이 type</span>
<span id="cb22-6">)</span></code></pre></div>
<ul>
<li>table 확인: kmkim &gt;&gt; Databases &gt;&gt; Schemas &gt;&gt; public</li>
</ul></li>
<li>DAG full example</li>
</ul>
<pre class="mardkown"><code>from airflow import DAG
import pendulum
from airflow.operators.python import PythonOperator

with DAG(
    dag_id='dags_python_with_postgres',
    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),
    schedule=None,
    catchup=False
) as dag:

    
    def insrt_postgres(ip, port, dbname, user, passwd, **kwargs):
        import psycopg2
        from contextlib import closing

        with closing(psycopg2.connect(host=ip, dbname=dbname, user=user, password=passwd, port=int(port))) as conn:
            with closing(conn.cursor()) as cursor:
                dag_id = kwargs.get('ti').dag_id
                task_id = kwargs.get('ti').task_id
                run_id = kwargs.get('ti').run_id
                msg = 'insrt 수행'
                sql = 'insert into py_opr_drct_insrt values (%s,%s,%s,%s);'
                cursor.execute(sql,(dag_id,task_id,run_id,msg))
                conn.commit()

    insrt_postgres = PythonOperator(
        task_id='insrt_postgres',
        python_callable=insrt_postgres,
        op_args=['172.28.0.3', '5432', 'hjkim', 'hjkim', 'hjkim']
    )
        
    insrt_postgres</code></pre>
</section>
<section id="문제점-및-해결방법" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="문제점-및-해결방법"><span class="header-section-number">4.2</span> 문제점 및 해결방법</h2>
<ul>
<li>문제점
<ul>
<li>접속정보 노출: postgres DB에 대한 User, Password 등
<ul>
<li>DAG을 열어볼 수 있는 사람이나 github에 접속할 수 있는 사람은 모두 볼 수 있음</li>
</ul></li>
<li>접속정보 변경시 대응 어려움
<ul>
<li>만약 직접 접속하는 DAG이 수백개라면?</li>
</ul></li>
</ul></li>
<li>해결 방법
<ul>
<li>Variable 이용 (User, Password 등을 Variable에 등록하고 꺼내오기) - 번거롭기 때문에 권장하는 방식은 아님</li>
<li>Hook 이용 (Variable 등록 필요없음)</li>
</ul></li>
</ul>
</section>
<section id="connection과-hook의-개념" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="connection과-hook의-개념"><span class="header-section-number">4.3</span> Connection과 Hook의 개념</h2>
<ul>
<li>Connection
<ul>
<li>Airflow UI 화면에서 등록한 커넥션 정보</li>
</ul></li>
<li>Hook의 개념
<ul>
<li>Airflow에서 외부 솔루션의 기능을 사용할 수 있도록 미리 구현된 메서드를 가진 클래스</li>
</ul></li>
<li>Hook의 특징
<ul>
<li>Connection 정보를 통해 생성되는 객체로 Hook을 사용하기 위해선 먼저 connection을 등록해야한다.
<ul>
<li>접속정보를 Connection을 통해 받아오므로 접속정보가 코드상 노출되지 않음</li>
</ul></li>
<li>특정 솔루션을 다룰 수 있는 메서드가 구현되어 있음.</li>
<li>오퍼레이터나 센서와는 달리 Hook은 task를 만들어내지 못하므로 Custom 오퍼레이터 안에서나 Python 오퍼레이터 내 함수에서 사용됨</li>
</ul></li>
</ul>
</section>
<section id="connection-등록" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="connection-등록"><span class="header-section-number">4.4</span> Connection 등록</h2>
<ul>
<li>airflow web ui &gt;&gt; admin &gt;&gt; connections &gt;&gt; plus button &gt;&gt;</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>Connection_id</th>
<th style="text-align: left;">conn-db-postgres-custom</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Connection_type</td>
<td style="text-align: left;">postgres</td>
</tr>
<tr class="even">
<td>Host</td>
<td style="text-align: left;">172.28.0.3</td>
</tr>
<tr class="odd">
<td>Schema</td>
<td style="text-align: left;">kmkim</td>
</tr>
<tr class="even">
<td>Login</td>
<td style="text-align: left;">kmkim</td>
</tr>
<tr class="odd">
<td>Password</td>
<td style="text-align: left;">kmkim</td>
</tr>
<tr class="even">
<td>Port</td>
<td style="text-align: left;">5432</td>
</tr>
</tbody>
</table>
</section>
<section id="postgres-hook-명세-보기" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="postgres-hook-명세-보기"><span class="header-section-number">4.5</span> Postgres Hook 명세 보기</h2>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-postgres/5.4.0/_modules/airflow/providers/postgres/hooks/postgres.html#PostgresHook.get_conn">airflow web service &gt;&gt; Providers &gt;&gt; apache.airflow.providers.postgres &gt;&gt; Python API &gt;&gt; airflow.providers.postgres.hooks.postgres &gt;&gt; get_conn() &gt;&gt; [source] &gt;&gt; def get_conn(self)</a></li>
<li>제공하는 함수의 source code를 잘 관찰하고 custom object(custom operator, custom sensor, custom hook 등)를 만드는 것에 익숙해져야 airflow를 잘 활용할 수 있다.</li>
</ul>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb24-1">def get_conn(self) -&gt; connection:</span>
<span id="cb24-2">        """Establishes a connection to a postgres database."""</span>
<span id="cb24-3">        conn_id = getattr(self, self.conn_name_attr)</span>
<span id="cb24-4">        conn = deepcopy(self.connection or self.get_connection(conn_id))</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # check for authentication via AWS IAM</span></span>
<span id="cb24-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if conn.extra_dejson.get("iam", False):</span></span>
<span id="cb24-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            conn.login, conn.password, conn.port = self.get_iam_token(conn)</span></span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        conn_args = dict(</span></span>
<span id="cb24-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            host=conn.host,</span></span>
<span id="cb24-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            user=conn.login,</span></span>
<span id="cb24-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            password=conn.password,</span></span>
<span id="cb24-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dbname=self.database or conn.schema,</span></span>
<span id="cb24-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            port=conn.port,</span></span>
<span id="cb24-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb24-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        raw_cursor = conn.extra_dejson.get("cursor", False)</span></span>
<span id="cb24-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if raw_cursor:</span></span>
<span id="cb24-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            conn_args["cursor_factory"] = self._get_cursor(raw_cursor)</span></span>
<span id="cb24-20"></span>
<span id="cb24-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for arg_name, arg_val in conn.extra_dejson.items():</span></span>
<span id="cb24-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if arg_name not in [</span></span>
<span id="cb24-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                "iam",</span></span>
<span id="cb24-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                "redshift",</span></span>
<span id="cb24-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                "cursor",</span></span>
<span id="cb24-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                "cluster-identifier",</span></span>
<span id="cb24-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                "aws_conn_id",</span></span>
<span id="cb24-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            ]:</span></span>
<span id="cb24-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                conn_args[arg_name] = arg_val</span></span>
<span id="cb24-30"></span>
<span id="cb24-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.conn = psycopg2.connect(**conn_args)</span></span>
<span id="cb24-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return self.conn</span></span></code></pre></div>
<ul>
<li><code>conn = deepcopy(self.connection or self.get_connection(conn_id))</code> 를 보면 hook 클래스의 get_connection() method를 이용해 airflow web ui에서 입력했던 connection 입력값을 찾아내서 연결시켜줌</li>
</ul>
</section>
<section id="hook-이용하여-postgres-insert" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="hook-이용하여-postgres-insert"><span class="header-section-number">4.6</span> Hook 이용하여 Postgres Insert</h2>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb25-1">from airflow import DAG</span>
<span id="cb25-2">import pendulum</span>
<span id="cb25-3">from airflow.operators.python import PythonOperator</span>
<span id="cb25-4"></span>
<span id="cb25-5">with DAG(</span>
<span id="cb25-6">    dag_id='dags_python_with_postgres',</span>
<span id="cb25-7">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb25-8">    schedule=None,</span>
<span id="cb25-9">    catchup=False</span>
<span id="cb25-10">) as dag:</span>
<span id="cb25-11"></span>
<span id="cb25-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb25-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def insrt_postgres(ip, port, dbname, user, passwd, **kwargs):</span></span>
<span id="cb25-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import psycopg2</span></span>
<span id="cb25-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from contextlib import closing</span></span>
<span id="cb25-16"></span>
<span id="cb25-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with closing(psycopg2.connect(host=ip, dbname=dbname, user=user, password=passwd, port=int(port))) as conn:</span></span>
<span id="cb25-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            with closing(conn.cursor()) as cursor:</span></span>
<span id="cb25-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                dag_id = kwargs.get('ti').dag_id</span></span>
<span id="cb25-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                task_id = kwargs.get('ti').task_id</span></span>
<span id="cb25-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                run_id = kwargs.get('ti').run_id</span></span>
<span id="cb25-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                msg = 'insrt 수행'</span></span>
<span id="cb25-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                sql = 'insert into py_opr_drct_insrt values (%s,%s,%s,%s);'</span></span>
<span id="cb25-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                cursor.execute(sql,(dag_id,task_id,run_id,msg))</span></span>
<span id="cb25-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                conn.commit()</span></span>
<span id="cb25-26"></span>
<span id="cb25-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres = PythonOperator(</span></span>
<span id="cb25-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='insrt_postgres',</span></span>
<span id="cb25-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=insrt_postgres,</span></span>
<span id="cb25-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_args=['172.28.0.3', '5432', 'kmkim', 'kmkim', 'kmkim']</span></span>
<span id="cb25-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb25-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb25-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres</span></span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb26-1">from airflow import DAG</span>
<span id="cb26-2">import pendulum</span>
<span id="cb26-3">from airflow.operators.python import PythonOperator</span>
<span id="cb26-4"></span>
<span id="cb26-5">with DAG(</span>
<span id="cb26-6">        dag_id='dags_python_with_postgres_hook',</span>
<span id="cb26-7">        start_date=pendulum.datetime(2023, 4, 1, tz='Asia/Seoul'),</span>
<span id="cb26-8">        schedule=None,</span>
<span id="cb26-9">        catchup=False</span>
<span id="cb26-10">) as dag:</span>
<span id="cb26-11">    def insrt_postgres(postgres_conn_id, **kwargs):</span>
<span id="cb26-12">        from airflow.providers.postgres.hooks.postgres import PostgresHook</span>
<span id="cb26-13">        from contextlib import closing</span>
<span id="cb26-14">        </span>
<span id="cb26-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        postgres_hook = PostgresHook(postgres_conn_id)</span></span>
<span id="cb26-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with closing(postgres_hook.get_conn()) as conn:</span></span>
<span id="cb26-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            with closing(conn.cursor()) as cursor:</span></span>
<span id="cb26-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                dag_id = kwargs.get('ti').dag_id</span></span>
<span id="cb26-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                task_id = kwargs.get('ti').task_id</span></span>
<span id="cb26-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                run_id = kwargs.get('ti').run_id</span></span>
<span id="cb26-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                msg = 'hook insrt 수행'</span></span>
<span id="cb26-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                sql = 'insert into py_opr_drct_insrt values (%s,%s,%s,%s);'</span></span>
<span id="cb26-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                cursor.execute(sql, (dag_id, task_id, run_id, msg))</span></span>
<span id="cb26-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                conn.commit()</span></span>
<span id="cb26-25"></span>
<span id="cb26-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres_with_hook = PythonOperator(</span></span>
<span id="cb26-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='insrt_postgres_with_hook',</span></span>
<span id="cb26-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=insrt_postgres,</span></span>
<span id="cb26-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'postgres_conn_id':'conn-db-postgres-custom'}</span></span>
<span id="cb26-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb26-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres_with_hook</span></span></code></pre></div>
</div>
</div>
<ul>
<li><code>op_args=['172.28.0.3', '5432', 'kmkim', 'kmkim', 'kmkim']</code> 와 같은 보안 사항이 오른 쪽 코드에서는 <code>op_kwargs={'postgres_conn_id':'conn-db-postgres-custom'}</code> 가려지게 된다.</li>
</ul>
</section>
</section>
<section id="postgres-hook-으로-bulk_load-하기" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Postgres Hook 으로 bulk_load 하기</h1>
<ul>
<li>bulk_load: Hook은 특정 solution을 제어할 수 있도록 method</li>
</ul>
<section id="postgres-hook-명세-보기-1" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="postgres-hook-명세-보기-1"><span class="header-section-number">5.1</span> Postgres Hook 명세 보기</h2>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-postgres/5.4.0/_modules/airflow/providers/postgres/hooks/postgres.html#PostgresHook.bulk_load">airflow web service &gt;&gt; Providers &gt;&gt; apache.airflow.providers.postgres &gt;&gt; Python API &gt;&gt; airflow.providers.postgres.hooks.postgres &gt;&gt; def bulk_load(self, temp_file)[source]</a></li>
<li>bulk_load(): Loads a tab-delimited file into a database table. 설명이 불충분하여 다음과 같은 사항을 확인할 수 없다.
<ul>
<li>꼭 delimiter가 tab이어야 하는지?</li>
<li>temp_file에 header가 있으면 header가 있는 상태로 data를 올려도 되는지?</li>
<li>DB table이 없으면 만들어지면서 올라가는지? 아니면 사전에 만들어 놔야하는지?</li>
<li>table에 기존 data가 있다면 truncate되면서 올라가는지? append되면서 올라가는지?</li>
<li>parameter는 구체적으로 어떻게 입력해야하는지?</li>
</ul></li>
<li>bulk_load() 의 명세서를 확인해야 한다. (source code)</li>
</ul>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def bulk_load(self, table: str, tmp_file: str) -&gt; None:</span>
<span id="cb27-2">        """Loads a tab-delimited file into a database table"""</span>
<span id="cb27-3">        self.copy_expert(f"COPY {table} FROM STDIN", tmp_file)</span></code></pre></div>
<ul>
<li><p><code>copy_expert()</code>: postgres hook class가 갖고 있는 method</p></li>
<li><p>self.copy_expert(f”COPY {table} FROM STDIN”, tmp_file)</p></li>
</ul>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def copy_expert(self, sql: str, filename: str) -&gt; None:</span>
<span id="cb28-2">        """</span>
<span id="cb28-3">        Executes SQL using psycopg2 copy_expert method.</span>
<span id="cb28-4">        Necessary to execute COPY command without access to a superuser.</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Note: if this method is called with a "COPY FROM" statement and</span></span>
<span id="cb28-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the specified input file does not exist, it creates an empty</span></span>
<span id="cb28-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        file and no data is loaded, but the operation succeeds.</span></span>
<span id="cb28-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        So if users want to be aware when the input file does not exist,</span></span>
<span id="cb28-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        they have to check its existence by themselves.</span></span>
<span id="cb28-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb28-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.log.info("Running copy expert: %s, filename: %s", sql, filename)</span></span>
<span id="cb28-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if not os.path.isfile(filename):</span></span>
<span id="cb28-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            with open(filename, "w"):</span></span>
<span id="cb28-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                pass</span></span>
<span id="cb28-16"></span>
<span id="cb28-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with open(filename, "r+") as file:</span></span>
<span id="cb28-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            with closing(self.get_conn()) as conn:</span></span>
<span id="cb28-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                with closing(conn.cursor()) as cur:</span></span>
<span id="cb28-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    cur.copy_expert(sql, file)</span></span>
<span id="cb28-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    file.truncate(file.tell())</span></span>
<span id="cb28-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    conn.commit()</span></span></code></pre></div>
<ul>
<li><code>closing(self.get_conn()) as conn:</code> &gt;&gt; <code>with closing(conn.cursor()) as cur:</code>
<ul>
<li><code>get.conn() &gt;&gt; cursor()</code> 결국 postgres의 cursor로 postgres가 원래 갖고있는 copy_export() method를 이용</li>
<li>그럼 postgres의 copy_export()의 source code를 확인해 봐야함. <a href="https://www.psycopg.org/docs/cursor.html">google psycopg2 cursor.copy_expert</a></li>
</ul>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb29-1">copy_expert(sql, file, size=8192)</span>
<span id="cb29-2">  Submit a user-composed COPY statement. The method is useful to handle all the parameters that PostgreSQL makes available (see COPY command documentation).</span>
<span id="cb29-3"></span>
<span id="cb29-4">  Parameters:</span>
<span id="cb29-5">  sql – the COPY statement to execute.</span>
<span id="cb29-6"></span>
<span id="cb29-7">  file – a file-like object to read or write (according to sql).</span>
<span id="cb29-8"></span>
<span id="cb29-9">  size – size of the read buffer to be used in COPY FROM.</span>
<span id="cb29-10"></span>
<span id="cb29-11">  The sql statement should be in the form COPY table TO STDOUT to export table to the file object passed as argument or COPY table FROM STDIN to import the content of the file object into table. If you need to compose a COPY statement dynamically (because table, fields, or query parameters are in Python variables) you may use the objects provided by the psycopg2.sql module.</span>
<span id="cb29-12"></span>
<span id="cb29-13">  file must be a readable file-like object (as required by copy_from()) for sql statement COPY ... FROM STDIN or a writable one (as required by copy_to()) for COPY ... TO STDOUT.</span>
<span id="cb29-14"></span>
<span id="cb29-15">  Example:</span>
<span id="cb29-16"></span>
<span id="cb29-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt;&gt;&gt; cur.copy_expert("COPY test TO STDOUT WITH CSV HEADER", sys.stdout)</span></span>
<span id="cb29-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  id,num,data</span></span>
<span id="cb29-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  1,100,abc'def</span></span>
<span id="cb29-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  2,,dada</span></span>
<span id="cb29-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  ...</span></span>
<span id="cb29-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  New in version 2.0.6.</span></span>
<span id="cb29-23"></span>
<span id="cb29-24">  Changed in version 2.4: files implementing the io.TextIOBase interface are dealt with using Unicode data instead of bytes.</span></code></pre></div>
<ul>
<li>이것이 가장 세부적인 정보로 나머지 정보는 troubleshooting으로 파악해야한다.
<ul>
<li>꼭 delimiter가 tab이어야 하는지? troubleshooting으로 확인해야함</li>
<li>temp_file에 header가 있으면 header가 있는 상태로 data를 올려도 되는지? troubleshooting으로 확인해야함</li>
<li>DB table이 없으면 만들어지면서 올라가는지? 아니면 사전에 만들어 놔야하는지? troubleshooting으로 확인해야함</li>
<li>table에 기존 data가 있다면 truncate되면서 올라가는지? troubleshooting으로 확인해야함</li>
</ul></li>
</ul></li>
<li>trouble shooting 할 DAG</li>
</ul>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb30-1">from airflow import DAG</span>
<span id="cb30-2">import pendulum</span>
<span id="cb30-3">from airflow.operators.python import PythonOperator</span>
<span id="cb30-4">from airflow.providers.postgres.hooks.postgres import PostgresHook</span>
<span id="cb30-5"></span>
<span id="cb30-6">with DAG(</span>
<span id="cb30-7">        dag_id='dags_python_with_postgres_hook_bulk_load',</span>
<span id="cb30-8">        start_date=pendulum.datetime(2023, 4, 1, tz='Asia/Seoul'),</span>
<span id="cb30-9">        schedule='0 7 * * *', # 서울시 공공데이터를 API를 통해 불러들이(dags_seoul_api_corona.py)는 시간이 7시</span>
<span id="cb30-10">        catchup=False</span>
<span id="cb30-11">) as dag:</span>
<span id="cb30-12">    def insrt_postgres(postgres_conn_id, tbl_nm, file_nm, **kwargs):</span>
<span id="cb30-13">        postgres_hook = PostgresHook(postgres_conn_id)</span>
<span id="cb30-14">        postgres_hook.bulk_load(tbl_nm, file_nm)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    insrt_postgres = PythonOperator(</span></span>
<span id="cb30-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='insrt_postgres',</span></span>
<span id="cb30-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=insrt_postgres,</span></span>
<span id="cb30-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'postgres_conn_id': 'conn-db-postgres-custom',</span></span>
<span id="cb30-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   'tbl_nm':'TbCorona19CountStatus_bulk1',</span></span>
<span id="cb30-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   'file_nm':'/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash}}/TbCorona19CountStatus.csv'}</span></span>
<span id="cb30-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
<ul>
<li><p>op_kwargs={‘postgres_conn_id’: ‘conn-db-postgres-custom’, ‘tbl_nm’:‘TbCorona19CountStatus_bulk1’, ‘file_nm’:‘/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone(“Asia/Seoul”) | ds_nodash}}/TbCorona19CountStatus.csv’} 는 dags_seoul_api_corona.py 의 tb_corona19_count_status task의 path와 file_name 인수로 부터 가져온다.</p>
<p>tb_corona19_count_status = SeoulApiToCsvOperator( task_id=‘tb_corona19_count_status’, dataset_nm=‘TbCorona19CountStatus’, <strong>path</strong>=‘/opt/airflow/files/TbCorona19CountStatus/{{data_interval_end.in_timezone(“Asia/Seoul”) | ds_nodash }}’, <strong>file_name</strong>=‘TbCorona19CountStatus.csv’ )</p></li>
<li><p>troubleshooting</p>
<ul>
<li>table이 사전에 만들어지지 않아도 되는지? 현재 DB에는 TbCorona19CountStatus_bulk1 table이 없음 <img src="kmink3225.netlify.app/images/airflow/postgress_hook_bulk_load_method.PNG" class="img-fluid"></li>
<li>실행 결과 log 에서 table이 없다는 에러 메세지 뜸. table 만들어 주면 됨</li>
<li>table만들어서 한번 더 task 실행하면 comma delimiter 인식 오류가 나기 떄문에 tab delimiter로 바꿔줘야한다.
<ul>
<li>dags_seoul_api_corona.py 로 부터 받은 TbCorona19CountStatus.csv 파일을 열어 <code>,</code>를 tab으로 바꿔준다</li>
</ul>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb31-1">vi TbCorona19CountStatus.csv</span></code></pre></div></li>
<li>vi editor
<ul>
<li><code>: %s/,/\t/g</code> <code>,</code>를 <code>\t</code>으로 바꿔줌. 여기서 g는 global하게 적용하겠다는 의미</li>
</ul></li>
<li>51번째 line에 에러 발생: <code>\M</code> 이라는 특수 문자가 있음
<ul>
<li><code>\M</code> 윈도우와 리눅스 간의 줄넘김 차이 때문에 발생
<ul>
<li>윈도우: enter key = CR (Carriage Return-한줄에서 왼쪽 끝으로 밀어주는것이 CR) + LF (Line Feed-다음 줄에 입력을 하도록 종이를 한줄 밀어주는 것 LF)</li>
<li>DOS/Windows 계열에서는 엔터를 CR+LF(<code>\r\n</code>) 으로 처리하고</li>
<li>Unix/Linux 계열에서는 엔터를 LF(<code>\n</code>)으로 처리하고</li>
<li>MAC 계열에서는 엔터를 CR(<code>\r</code>)로 처리한다고 한다</li>
<li>윈도우 환경에서 입력된 값이 리눅스로 넘어오게 될 때 CR+LF와 같은 불일치 값이 있으면 <code>^M</code> 또는 <code>\M</code> 로 표시됨</li>
</ul></li>
<li>51번째 record 지워서 해결</li>
</ul></li>
<li>airflow 상 errors는 더이상 발생하지 않지만 DB를 확인했을 때 첫번째 row에 column명이 들어간것을 확인되었다. 그래서 CSV상에 column값을 지워줘야한다는 것을 알 수 있다.</li>
</ul></li>
</ul>
</section>
<section id="bulk_load-문제점-개선방안" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="bulk_load-문제점-개선방안"><span class="header-section-number">5.2</span> Bulk_load 문제점 &amp; 개선방안</h2>
<ul>
<li>문제점
<ul>
<li>Load 가능한 Delimiter는 Tab으로 고정되어 있음</li>
<li>Header까지 포함해서 업로드됨</li>
<li>특수문자로 인해 파싱이 안될 경우 에러 발생</li>
</ul></li>
<li>개선방안
<ul>
<li>Custom Hook 을 만들어서 Delimiter 유형을 입력받게 하고</li>
<li>Header 포함 여부를 선택하게끔 하며</li>
<li>특수문자를 제거하는 로직을 추가 후</li>
<li>sqlalchemy(python에서 DB 작업을 편리하게 해주는 library)를 이용하여 Load 한다면? 그리고 테이블을 생성하면서 업로드할 수 있도록 한다.</li>
</ul></li>
</ul>
</section>
</section>
<section id="custom-hook-으로-bulk_load-하기" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Custom Hook 으로 bulk_load 하기</h1>
<section id="basehook-명세-보기" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="basehook-명세-보기"><span class="header-section-number">6.1</span> BaseHook 명세 보기</h2>
<ul>
<li>Custom Hook은 BaseHook을 상속해서 작성</li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/hooks/base/index.html#airflow.hooks.base.BaseHook">Airflow Docs에서 Basehook Source Code</a></li>
<li>BaseHook class의 methods
<ul>
<li>[docs] def get_connection(cls, conn_id: str) -&gt; Connection:
<ul>
<li>airflow 상에서 만들었던 connection_id : user name, password, IP, Port 의 정보를 담고있는 object return</li>
</ul></li>
<li>[docs] def get_connections(cls, conn_id: str) -&gt; list[Connection]:
<ul>
<li>will be deprecated. Use get_connection()</li>
</ul></li>
<li>[docs] def get_conn(self) -&gt; Any: # 이 함수를 쓰려면 상속받아서 구현할 때 get_conn() 함수를 구현해야함</li>
<li>[docs] def get_hook(cls, conn_id: str) -&gt; BaseHook:</li>
<li>[docs] def get_connection_form_widgets(cls) -&gt; dict[str, Any]: (안중요)</li>
<li>[docs] def get_ui_field_behaviour(cls) -&gt; dict[str, Any]: (안중요)</li>
</ul></li>
<li>위의 method 중 get_conn()을 제외하곤 모든 method에 데코레이터 <code>@classmethod</code> 있음
<ul>
<li><p>python있는 method 종류로 class method 라 하고 class method 는 class를 객체화 시키지 않고도 바로 호출할 수 있음</p></li>
<li><p>예를 들어, 다음과 같은 방식으로 class method 호출 안해도 됨</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb32-1">import BaseHook</span>
<span id="cb32-2">a=BaseHook()</span>
<span id="cb32-3">a.get_connection(conn_id)</span></code></pre></div>
<p>바로 호출 해도됨</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb33-1">import BaseHook</span>
<span id="cb33-2">BaseHook.get_connection(conn_id)</span></code></pre></div></li>
</ul></li>
</ul>
</section>
<section id="custom-hook-개발" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="custom-hook-개발"><span class="header-section-number">6.2</span> Custom Hook 개발</h2>
<ul>
<li>해야할 일
<ul>
<li>get_conn 메서드 구현하기
<ul>
<li>DB 와의 연결 세션 객체인 conn 을 리턴하도록 구현</li>
<li>주의: get_connection() vs get_conn()
<ul>
<li>get_connection(): Airflow 에서 등록한 Connection 정보를 담은 conn을 return</li>
<li>get_conn(): postgres와의 연결하는 session 객체를 return</li>
<li>BaseHook 의 추상 메서드 , 자식 클래스에서 구현 필요</li>
</ul></li>
</ul></li>
<li>bulk_load 메서드 구현하기
<ul>
<li>입맛대로 만들기: custom_postgres_hook.py</li>
</ul>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb34-1">from airflow.hooks.base import BaseHook</span>
<span id="cb34-2">import psycopg2</span>
<span id="cb34-3">import pandas as pd</span>
<span id="cb34-4"></span>
<span id="cb34-5">class CustomPostgresHook(BaseHook):</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 생성자</span></span>
<span id="cb34-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def __init__(self, postgres_conn_id, **kwargs): # 입력은 하나만: postgres_conn_id</span></span>
<span id="cb34-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.postgres_conn_id = postgres_conn_id</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def get_conn(self):</span></span>
<span id="cb34-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        airflow_conn = BaseHook.get_connection(self.postgres_conn_id) #class method라 바로 호출</span></span>
<span id="cb34-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 아래의 보안 정보들이 hook을 통해서 노출되지 않고 접근 가능</span></span>
<span id="cb34-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.host = airflow_conn.host</span></span>
<span id="cb34-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.user = airflow_conn.login</span></span>
<span id="cb34-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.password = airflow_conn.password</span></span>
<span id="cb34-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.dbname = airflow_conn.schema</span></span>
<span id="cb34-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.port = airflow_conn.port</span></span>
<span id="cb34-19"></span>
<span id="cb34-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # postgres DB 연결: session object를 return</span></span>
<span id="cb34-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.postgres_conn = psycopg2.connect(host=self.host, user=self.user, password=self.password, dbname=self.dbname, port=self.port)</span></span>
<span id="cb34-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return self.postgres_conn</span></span>
<span id="cb34-23"></span>
<span id="cb34-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def bulk_load(self, table_name, file_name, delimiter: str, is_header: bool, is_replace: bool):</span></span>
<span id="cb34-25"></span>
<span id="cb34-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from sqlalchemy import create_engine</span></span>
<span id="cb34-27"></span>
<span id="cb34-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.log.info('적재 대상파일:' + file_name)</span></span>
<span id="cb34-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.log.info('테이블 :' + table_name)</span></span>
<span id="cb34-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.get_conn()</span></span>
<span id="cb34-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        header = 0 if is_header else None                       # is_header = True면 0, False면 None</span></span>
<span id="cb34-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if_exists = 'replace' if is_replace else 'append'       # is_replace = True면 replace, False면 append</span></span>
<span id="cb34-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        file_df = pd.read_csv(file_name, header=header, delimiter=delimiter)</span></span>
<span id="cb34-34"></span>
<span id="cb34-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for col in file_df.columns:                             </span></span>
<span id="cb34-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            try:</span></span>
<span id="cb34-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                # string 문자열이 아닐 경우 continue</span></span>
<span id="cb34-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                file_df[col] = file_df[col].str.replace('\r\n','')      # 줄넘김 및 ^M 제거</span></span>
<span id="cb34-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                self.log.info(f'{table_name}.{col}: 개행문자 제거')</span></span>
<span id="cb34-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            except:</span></span>
<span id="cb34-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                continue </span></span>
<span id="cb34-42"></span>
<span id="cb34-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.log.info('적재 건수:' + str(len(file_df)))</span></span>
<span id="cb34-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        uri = f'postgresql://{self.user}:{self.password}@{self.host}/{self.dbname}'</span></span>
<span id="cb34-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        engine = create_engine(uri)</span></span>
<span id="cb34-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        file_df.to_sql(name=table_name,</span></span>
<span id="cb34-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                            con=engine,</span></span>
<span id="cb34-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                            schema='public',</span></span>
<span id="cb34-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                            if_exists=if_exists,</span></span>
<span id="cb34-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                            index=False</span></span>
<span id="cb34-51"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        )</span></span></code></pre></div>
<ul>
<li>여기서 <code>airflow_conn = BaseHook.get_connection(self.postgres_conn_id) #class method라 바로 호출</code> 와 <code>self.postgres_conn = psycopg2.connect(host=self.host, user=self.user, password=self.password, dbname=self.dbname, port=self.port)</code> 다른 종류의 conn 객체를 return한다.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="providers-더-보기" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="providers-더-보기"><span class="header-section-number">6.3</span> Providers 더 보기</h2>
<ul>
<li>현재 설치되어 있는 Providers 패키지 확인
<ul>
<li>웹의 Admin Providers 에서 확인 가능</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers/">설치 가능한 Providers 더 보기</a> &gt;&gt; Apache Airflow 2 is built in modular way. The “Core” of Apache Airflow provides core scheduler functionality which allow you to write some basic tasks, but the capabilities of Apache Airflow can be extended by installing additional packages, called providers.
<ul>
<li>providers package를 설치하면 다른 솔루션을 연동할 수 있도록 확장성을 제공</li>
<li>The full list of community managed providers is available at <a href="https://airflow.apache.org/docs/#providers-packages-docs-apache-airflow-providers-index-html">Providers Index</a>.
<ul>
<li>Providers packages:
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow-providers-apache-hive/stable/_api/airflow/providers/apache/hive/hooks/hive/index.html">Apache Hive</a></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="connection-type-추가하기" class="level2" data-number="6.4">
<h2 data-number="6.4" class="anchored" data-anchor-id="connection-type-추가하기"><span class="header-section-number">6.4</span> Connection Type 추가하기</h2>
<ul>
<li><p>Airflow Connection type 목록에 있는 대상은 이미 패키지 설치가 된 Providers 이며 Admin&gt;&gt;Providers 목록에서 설치된 대상 확인 가능</p></li>
<li><p>만약 Hive 에 대한 커넥션을 추가하고 싶은데 Airflow Connection type 목록에 Hive가 없다면 관련된 package를 설치하여 본인이 직접 추가해야함</p>
<ul>
<li>Provider 검색, py 라이브러리 설치 목록 확인하여 <code>pip install [pkg name]</code> 실행
<ul>
<li>주의사항: 윈도우와 wsl2에 package를 설치하는게 아니라 airflow containers에 설치해줘야 함
<ul>
<li>scheduler</li>
<li>worker</li>
<li>webserver</li>
<li>triggerer</li>
</ul></li>
<li>하지만, 각 각의 container에다가 pkg를 설치해주면 container가 꺼지게 되면 지워지게 됨</li>
<li>그래서, custom한 docker image를 만들어야 함
<ul>
<li>Airflow 이미지 Extend 방법으로 custom image 만들기
<ul>
<li>base image 에다가 custom image (pip install 및 다른 여러가지 layers) 추가</li>
<li>즉, custom image = base image + layer1 (library 호출) +layer2 (pip install pkgs)+ <img src="https://latex.codecogs.com/png.latex?%5Cldots"></li>
<li>이런 방식의 custom image는 layer가 많아질 수록 무거워져 overhead 가 커지는 약점이 있다.</li>
</ul></li>
<li>애초에 base image 자체를 custom image 로 만드는 법
<ul>
<li>extend의 약점인 overhead를 어느 정도 줄일 수 있지만 개발하는데 시간이 걸림</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><p><a href="https://airflow.apache.org/docs/docker-stack/build.html">Airflow 이미지 Extend 방법 &amp; custom image 만드는 법 확인</a></p>
<ul>
<li>이미지 Extend vs Custom 이미지 생성</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 33%">
<col style="width: 26%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>Comparison</th>
<th>image extend</th>
<th style="text-align: left;">Custom Image Creation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>간단히 생성 가능</td>
<td>O</td>
<td style="text-align: left;">X (많은 source codes 필요)</td>
</tr>
<tr class="even">
<td>빌드 시간</td>
<td>짧음 (5분 이내)</td>
<td style="text-align: left;">상대적으로 긺</td>
</tr>
<tr class="odd">
<td>크기 최적화된 이미지</td>
<td>X</td>
<td style="text-align: left;">O (약 20% 정도 사이즈 감소)</td>
</tr>
<tr class="even">
<td>폐쇄망에서 구성 가능</td>
<td>X (인터넷이 되어야함)</td>
<td style="text-align: left;">O</td>
</tr>
</tbody>
</table></li>
<li><p>Airflow web에 connection type 추가하는 steps</p>
<ul>
<li>이미지 extend를 위한 Dockerfile 만들기<br>
:::: {.columns}</li>
</ul>
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb35-1">#&gt; cd; cd airflow</span>
<span id="cb35-2">#&gt; mkdir -p custom_image/airflow</span>
<span id="cb35-3">#&gt; cd custom_image/airflow</span>
<span id="cb35-4">#&gt; vi Dockerfile</span></code></pre></div>
</div>
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb36-1">FROM apache/airflow:2.5.1 #base image 지정</span>
<span id="cb36-2">USER root #root user</span>
<span id="cb36-3">RUN apt get update \</span>
<span id="cb36-4">  &amp;&amp; apt-get install -y --no-install-recommends \</span>
<span id="cb36-5">    gcc \ #library 1 for installing hdfs</span>
<span id="cb36-6">    heimdal-dev \ #library 2 for installing hdfs</span>
<span id="cb36-7">    g++ \ #library 3</span>
<span id="cb36-8">    libsasl2-dev \ #library 4</span>
<span id="cb36-9">  &amp;&amp; apt-get autoremove -yqq -purge \</span>
<span id="cb36-10">  &amp;&amp; apt-get clean \</span>
<span id="cb36-11">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb36-12">USER airflow</span>
<span id="cb36-13">RUN pip install \</span>
<span id="cb36-14">  apache airflow providers apache hdfs \</span>
<span id="cb36-15">  apache airflow providers apache hive</span>
<span id="cb36-16">RUN pip uninstall -y argparse</span></code></pre></div>
</div>
<p>::::</p>
<ul>
<li>Docker 이미지 생성하기</li>
</ul>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb37-1">#&gt; pwd </span>
<span id="cb37-2">#&gt; cd /home/hjkim/airflow/custom_image/airflow #Dockerfile 만든 경로</span>
<span id="cb37-3">#&gt; sudo docker build -t {image_name} . #.: 현재 디렉토리</span>
<span id="cb37-4">예) #&gt; sudo docker build -t airflow_custom .</span></code></pre></div>
<p>error message</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb38-1">kmkim@K100230201051:~/airflow/custom_image/airflow$ sudo docker build -t airflow_custom .</span>
<span id="cb38-2"></span>
<span id="cb38-3">failed to fetch metadata: fork/exec /usr/local/lib/docker/cli-plugins/docker-buildx: no such file or directory</span>
<span id="cb38-4"></span>
<span id="cb38-5">DEPRECATED: The legacy builder is deprecated and will be removed in a future release.</span>
<span id="cb38-6">            Install the buildx component to build images with BuildKit:</span>
<span id="cb38-7">            https://docs.docker.com/go/buildx/</span>
<span id="cb38-8"></span>
<span id="cb38-9">Sending build context to Docker daemon  2.048kB</span>
<span id="cb38-10">Step 1/6 : FROM apache/airflow:2.6.1</span>
<span id="cb38-11"> ---&gt; 52c34708e903</span>
<span id="cb38-12">Step 2/6 : USER root #root user</span>
<span id="cb38-13"> ---&gt; Running in c3fe7d498d62</span>
<span id="cb38-14">Removing intermediate container c3fe7d498d62</span>
<span id="cb38-15"> ---&gt; d216e5376f4e</span>
<span id="cb38-16">Step 3/6 : RUN apt get update   &amp;&amp; apt-get install -y --no-install-recommends     gcc     heimdal-dev     g++     libsasl2-dev     heimdal-dev   &amp;&amp; apt-get autoremove -yqq -purge   &amp;&amp; apt-get clean   &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb38-17"> ---&gt; Running in 8238d95b680a</span>
<span id="cb38-18">unable to find user root #root user: no matching entries in passwd file</span></code></pre></div>
<ul>
<li>Docker 이미지 확인</li>
</ul>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb39-1">#&gt; sudo docker image ls</span></code></pre></div>
<ul>
<li>docker-compose.yaml 수정하기</li>
</ul>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb40-1">#&gt; cd</span>
<span id="cb40-2">#&gt; vi docker-compose.yaml</span>
<span id="cb40-3"></span>
<span id="cb40-4">version: '3.8'</span>
<span id="cb40-5">x-airflow-common:</span>
<span id="cb40-6">  &amp;airflow-common</span>
<span id="cb40-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># In order to add …</span></span>
<span id="cb40-8">  image: {image_name} #새로 만든 docker image 이름 넣을 것</span></code></pre></div>
<ul>
<li>docker compose (재) 기동</li>
<li>Connection Type 에 추가 확인
<ul>
<li>HDFS, Hive Client Wrapper, Hive Metastore Thrift, Hive Server 2 Thrift</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/09.connection_hook.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Template Variabler</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/10.sensor.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="센서" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 센서</h1>
<section id="센서의-개념" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="센서의-개념"><span class="header-section-number">1.1</span> 센서의 개념</h2>
<ul>
<li>일종의 특화된 오퍼레이터</li>
<li>특정 조건이 만족되기를 주기적으로 확인 및 기다리고 만족되면 True를 반환하는 Task</li>
<li>모든 센서는 BaseSensorOperator를 상속하여 구현되며 (BaseSensorOperator는 BaseOperator를 상속함) 상속시에는 <strong>init()</strong> 함수와 poke(context) 함수 재정의 해야한다</li>
<li>센싱하는 로직은 poke 함수에 정의: 특정 조건이 만족하는지 체크하고 true를 return 하도록 정의</li>
</ul>
</section>
<section id="basesensor-오퍼레이터-명세-확인" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="basesensor-오퍼레이터-명세-확인"><span class="header-section-number">1.2</span> BaseSensor 오퍼레이터 명세 확인</h2>
<p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/base/index.html#airflow.sensors.base.BaseSensorOperator">airflow BaseSensorOperator</a></p>
<ul>
<li><p>Bases: airflow.models.baseoperator.BaseOperator, airflow.models.skipmixin.SkipMixin Sensor operators are derived from this class and inherit these attributes. Sensor operators keep executing at a time interval and succeed when a criteria is met and fail if and when they time out.</p></li>
<li><p>parameter</p>
<ul>
<li>poke_interval (float) – Time in seconds that the job should wait in between each try: 특정 조건이 만족하는지 체크하는 주기로 초단위로 입력하면 된다. 60 = 1mins</li>
<li>timeout (float) – Time, in seconds before the task times out and fails. task가 계속 false 가 나올때 task failure 로 규정할 maximum 시간 초단위로 입력. 보통 daily dag을 많이 만드므로 timeout도 보통 24시간 으로 입력한다. ex) 60<em>60</em>24</li>
<li>soft_fail (bool) – Set to true to mark the task as SKIPPED on failure. timeout을 만났을 때 sensor task fail로 marking하지 말고 skip으로 marking하도록 설정</li>
<li>mode (str) (<strong>중요</strong>) – How the sensor operates. Options are: { poke | reschedule }, default is poke. When set to poke the sensor is taking up a worker slot for its whole execution time and sleeps between pokes. Use this mode if the expected runtime of the sensor is short or if a short poke interval is required. Note that the sensor will hold onto a worker slot and a pool slot for the duration of the sensor’s runtime in this mode. When set to reschedule the sensor task frees the worker slot when the criteria is not yet met and it’s rescheduled at a later time. Use this mode if the time before the criteria is met is expected to be quite long. The poke interval should be more than one minute to prevent too much load on the scheduler.</li>
<li>exponential_backoff (bool) – allow progressive longer waits between pokes by using exponential backoff algorithm. sensor task를 체크하는 주기가 <img src="https://latex.codecogs.com/png.latex?2%5En"> 으로 늘어지기 된다. 즉, 2초, 4초, 8초, <img src="https://latex.codecogs.com/png.latex?%5Cldots"></li>
<li>max_wait (datetime.timedelta | float | None) – maximum wait interval between pokes, can be timedelta or float seconds. exponential_backoff가 true 일 때 홠성화 되며 exponential_backoff 의 상한선을 의미</li>
<li>silent_fail (bool) – If true, and poke method raises an exception different from AirflowSensorTimeout, AirflowTaskTimeout, AirflowSkipException and AirflowFailException, the sensor will log the error and continue its execution. Otherwise, the sensor task fails, and it can be retried based on the provided retries parameter.</li>
</ul></li>
<li><p><code>poke(context)[source]</code>: Function defined by the sensors while deriving this class should override.</p>
<ul>
<li><p>재정의 하지 않으면 error 발생</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def poke(self, context: Context) -&gt; bool | PokeReturnValue:</span>
<span id="cb1-2">        """Function defined by the sensors while deriving this class should override."""</span>
<span id="cb1-3">        raise AirflowException("Override me.")</span></code></pre></div></li>
</ul></li>
<li><p>execute(self, context: Context): 재정의할 필요없음. 이미 정의가 되어 있음</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def execute(self, context: Context) -&gt; Any:</span>
<span id="cb2-2">      started_at: datetime.datetime | float </span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      (...)</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      while True:</span></span>
<span id="cb2-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          try:</span></span>
<span id="cb2-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              poke_return = self.poke(context)</span></span>
<span id="cb2-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          except (</span></span>
<span id="cb2-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              AirflowSensorTimeout,</span></span>
<span id="cb2-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              AirflowTaskTimeout,</span></span>
<span id="cb2-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              AirflowSkipException,</span></span>
<span id="cb2-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              AirflowFailException,</span></span>
<span id="cb2-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ) as e:</span></span>
<span id="cb2-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              raise e</span></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          except Exception as e:</span></span>
<span id="cb2-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              if self.silent_fail:</span></span>
<span id="cb2-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  logging.error("Sensor poke failed: \n %s", traceback.format_exc())</span></span>
<span id="cb2-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  poke_return = False</span></span>
<span id="cb2-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              else:</span></span>
<span id="cb2-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  raise e</span></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          if poke_return: # poke_return = true이면 while loop 탈출</span></span>
<span id="cb2-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              if isinstance(poke_return, PokeReturnValue):</span></span>
<span id="cb2-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  xcom_value = poke_return.xcom_value</span></span>
<span id="cb2-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              break</span></span>
<span id="cb2-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (...)       </span></span></code></pre></div></li>
<li><p>BaseSensor 오퍼레이터 Mode 유형</p>
<ul>
<li>mode 유형</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 33%">
<col style="width: 26%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>Comparison</th>
<th>Poke Mode</th>
<th style="text-align: left;">Reschedule Mode</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>원리</td>
<td>DAG이 수행되는 내내 Running Slot(task가 수행될 때 차지하는 공간) 을 차지. sensor가 특정 조건을 체킹할때나 안할때나 항상 slot 차지. 다만 Slot 안에서 Sleep, active 를 반복</td>
<td style="text-align: left;">센서가 조건을 체킹하는 동작 시기에만 Slot을 차지. 그 외에는 Slot을 점유하지 않음</td>
</tr>
<tr class="even">
<td>Wait에서의 Task 상태</td>
<td>running (airflow web ui 에서 task bar가 연두색)</td>
<td style="text-align: left;">up_for_reschedule (task bar가 민트색)</td>
</tr>
<tr class="odd">
<td>유리한 적용 시점</td>
<td>짧은 센싱 간격 (interval, 초 단위)</td>
<td style="text-align: left;">긴 센싱 간격, 주로 분 단위 Reschedule될 때 (5분, 10분) 스케줄러의 부하 발생</td>
</tr>
</tbody>
</table></li>
<li><p>Slot의 이해</p>
<ul>
<li>Pool
<ul>
<li>모든 operator로 만들어진 Task는 특정 Pool에서 수행되며 Pool은 Slot이라는 것을 가지고 있음.</li>
<li>기본적으로 Task 1개당 Slot 1개를 점유하며 Pool을 지정하지 않으면 default_pool에서 수행 <img src="kmink3225.netlify.app/images/airflow/poke.PNG" class="img-fluid" alt="Poke Mode vs Reschedule Mode"></li>
<li>airflow web ui &gt;&gt; admin &gt;&gt; pools
<ul>
<li>pool: pool name</li>
<li>slots: 128개의 공간</li>
<li>Running Slots, Queued Slots, Schedulued Slots.</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>사용자 입장에서는 operator의 mode의 이해는 그렇게 중요하진 않지만 airflow를 운영하는 사람 입장에서는 중요한 변수가 될 수 있다.</p></li>
</ul>
</section>
</section>
<section id="bash-sensor" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Bash Sensor</h1>
<section id="bash-센서-명세-확인" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="bash-센서-명세-확인"><span class="header-section-number">2.1</span> Bash 센서 명세 확인</h2>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/bash/index.html">airflow.sensors.bash</a>
<ul>
<li>Parameters
<ul>
<li>bash_command – 조건문을 여기에다가 적음
<ul>
<li>Return True if and only if the return code is 0.</li>
<li>shell 스크립트에서 return True를 주는 방법
<ul>
<li>파이썬에서의 return True와 같은 의미로 쉘 스크립트에서는 exit 0 를 사용</li>
</ul></li>
<li>모든 쉘은 수행을 마친 후 EXIT_STATUS를 가지고 있으며 0~255 사이의 값을 가짐.
<ul>
<li>EXIT 0 만 정상이며 나머지는 모두 비정상의 의미를 가짐</li>
<li>마지막 명령 수행의 EXIT_STATUS를 확인하려면 <code>echo $?</code> 로 확인</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">kmkim@K100230201051:~/airflow$ ls</span>
<span id="cb3-2">airflow  custom_image  docker-compose.20230708  files  plugins</span>
<span id="cb3-3">config   dags          docker-compose.yaml      logs</span>
<span id="cb3-4">kmkim@K100230201051:~/airflow$ echo $?</span>
<span id="cb3-5">0</span>
<span id="cb3-6">kmkim@K100230201051:~/airflow$ ls sdf</span>
<span id="cb3-7">ls: cannot access 'sdf': No such file or directory</span>
<span id="cb3-8">kmkim@K100230201051:~/airflow$ echo $?</span>
<span id="cb3-9">2</span>
<span id="cb3-10">kmkim@K100230201051:~/airflow$ sdfsd</span>
<span id="cb3-11">sdfsd: command not found</span>
<span id="cb3-12">kmkim@K100230201051:~/airflow$ echo $?</span>
<span id="cb3-13">127</span></code></pre></div></li>
<li>exit status 변경하기</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">vi test.sh #exit status 변경할 shell script</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># vi editor: test.sh</span></span>
<span id="cb4-3">ls</span>
<span id="cb4-4">exit 1</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">chmod +x test.sh #실행권한 부여</span>
<span id="cb5-2">./test.sh #실행</span>
<span id="cb5-3">echo $? #1 출력됨</span></code></pre></div></li>
<li>env – If env is not None, it must be a mapping that defines the environment variables for the new process; these are used instead of inheriting the current process environment, which is the default behavior. (templated)</li>
<li>output_encoding – output encoding of bash command.</li>
<li>retry_exit_code (int | None) – If task exits with this code, treat the sensor as not-yet-complete and retry the check later according to the usual retry/timeout settings. Any other non-zero return code will be treated as an error, and cause the sensor to fail. If set to None (the default), any non-zero exit code will cause a retry and the task will never raise an error except on time-out.</li>
</ul></li>
</ul></li>
<li>Dag Example
<ul>
<li>csv file 있는지 없는지 확인</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">from airflow.sensors.bash import BashSensor</span>
<span id="cb6-2">from airflow.operators.bash import BashOperator</span>
<span id="cb6-3">from airflow import DAG</span>
<span id="cb6-4">import pendulum</span>
<span id="cb6-5"></span>
<span id="cb6-6">with DAG(</span>
<span id="cb6-7">    dag_id='dags_bash_sensor',</span>
<span id="cb6-8">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb6-9">    schedule='0 6 * * *',</span>
<span id="cb6-10">    catchup=False</span>
<span id="cb6-11">) as dag:</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sensor_task_by_poke = BashSensor(</span></span>
<span id="cb6-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='sensor_task_by_poke',</span></span>
<span id="cb6-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 오늘 날짜로 tvCorona19VaccinestatNew.csv 가 있는지 없는지 확인 </span></span>
<span id="cb6-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={'FILE':'/opt/airflow/files/tvCorona19VaccinestatNew/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}/tvCorona19VaccinestatNew.csv'},</span></span>
<span id="cb6-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command=f'''echo $FILE &amp;&amp; </span></span>
<span id="cb6-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        if [ -f $FILE ]; then </span></span>
<span id="cb6-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              exit 0</span></span>
<span id="cb6-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        else </span></span>
<span id="cb6-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              exit 1</span></span>
<span id="cb6-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        fi''',</span></span>
<span id="cb6-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=30,      #30초</span></span>
<span id="cb6-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        timeout=60*2,          #2분</span></span>
<span id="cb6-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        mode='poke',</span></span>
<span id="cb6-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        soft_fail=False</span></span>
<span id="cb6-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sensor_task_by_reschedule = BashSensor(</span></span>
<span id="cb6-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='sensor_task_by_reschedule',</span></span>
<span id="cb6-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={'FILE':'/opt/airflow/files/tvCorona19VaccinestatNew/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}/tvCorona19VaccinestatNew.csv'},</span></span>
<span id="cb6-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command=f'''echo $FILE &amp;&amp; </span></span>
<span id="cb6-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        if [ -f $FILE ]; then </span></span>
<span id="cb6-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              exit 0</span></span>
<span id="cb6-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        else </span></span>
<span id="cb6-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              exit 1</span></span>
<span id="cb6-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        fi''',</span></span>
<span id="cb6-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=60*3,    # 3분</span></span>
<span id="cb6-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        timeout=60*9,          #9분</span></span>
<span id="cb6-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        mode='reschedule',</span></span>
<span id="cb6-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        soft_fail=True</span></span>
<span id="cb6-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-43"></span>
<span id="cb6-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_task = BashOperator(</span></span>
<span id="cb6-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_task',</span></span>
<span id="cb6-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={'FILE': '/opt/airflow/files/tvCorona19VaccinestatNew/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}/tvCorona19VaccinestatNew.csv'},</span></span>
<span id="cb6-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo "건수: `cat $FILE | wc -l`"',</span></span>
<span id="cb6-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-49"></span>
<span id="cb6-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [sensor_task_by_poke,sensor_task_by_reschedule] &gt;&gt; bash_task</span></span></code></pre></div>
</section>
</section>
<section id="file-sensor" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> File Sensor</h1>
<section id="file-센서-명세-확인" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="file-센서-명세-확인"><span class="header-section-number">3.1</span> File 센서 명세 확인</h2>
<ul>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/filesystem/index.html#airflow.sensors.filesystem.FileSensor">airflow.sensors.filesystem</a></p>
<ul>
<li>Waits for a file or folder to land in a filesystem. (file이나 folder가 시스템안에 들어왔는지 체크)</li>
<li>Parameters
<ul>
<li>fs_conn_id – reference to the File (path) connection id (file connection id을 airflow web에 미리 등록해놔야함)</li>
<li>filepath – File or folder name (relative to the base path set within the connection), can be a glob.</li>
<li>recursive – when set to True, enables recursive directory matching behavior of ** in glob filepath parameter. Defaults to False. (glob(**))</li>
</ul></li>
<li>구체적인 로직을 이해하기 위해 source를 봐야함
<ul>
<li>모든 sensor를 만들때는 poke를 재정의해야만 함.</li>
<li>즉, poke만 잘 이해하면 거의 모든 sensor를 잘 이해할 수 있다.</li>
<li>poke()의 FSHook() 은 imported from airflow.hooks.filesystem
<ul>
<li>hook = FSHook(self.fs_conn_id): hook을 만들 때 fs_conn_id를 넘겨받고 있음</li>
</ul></li>
<li>glob()을 이해하는 것이 핵심
<ul>
<li>file path안에 있는 files 또는 directories를 list로 반환</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">glob('/home/kmkim') # 이 path 안에 있는 모든 files, directories이 리스트로 반환됨</span>
<span id="cb7-2">glob('/home/kmkim/docker-compose.yaml') # docker-compose.yaml 자체가 리스트로 반환됨</span>
<span id="cb7-3">glob('/home/kmkim/**', recursive=True) # /home/kmkim/ 하위에 있는 모든 files 또는 directories이 리스트로 반환됨</span></code></pre></div>
<ul>
<li>주로 file을 찾기 위해 사용되는 함수이기 때문에 glob(‘/home/kmkim/docker-compose.yaml’) 이 형태가 가장 많이 사용된다.</li>
</ul></li>
</ul></li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">from __future__ import annotations</span>
<span id="cb8-2"></span>
<span id="cb8-3">import datetime</span>
<span id="cb8-4">import os</span>
<span id="cb8-5">from glob import glob</span>
<span id="cb8-6">from typing import Sequence</span>
<span id="cb8-7"></span>
<span id="cb8-8">from airflow.hooks.filesystem import FSHook</span>
<span id="cb8-9">from airflow.sensors.base import BaseSensorOperator</span>
<span id="cb8-10">from airflow.utils.context import Context</span>
<span id="cb8-11"></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>class FileSensor(BaseSensorOperator):</span>
<span id="cb8-14">    """</span>
<span id="cb8-15">    Waits for a file or folder to land in a filesystem.</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If the path given is a directory then this sensor will only return true if</span></span>
<span id="cb8-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    any files exist inside it (either directly, or within a subdirectory)</span></span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param fs_conn_id: reference to the File (path)</span></span>
<span id="cb8-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        connection id</span></span>
<span id="cb8-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param filepath: File or folder name (relative to</span></span>
<span id="cb8-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the base path set within the connection), can be a glob.</span></span>
<span id="cb8-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param recursive: when set to ``True``, enables recursive directory matching behavior of</span></span>
<span id="cb8-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``**`` in glob filepath parameter. Defaults to ``False``.</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    .. seealso::</span></span>
<span id="cb8-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For more information on how to use this sensor, take a look at the guide:</span></span>
<span id="cb8-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :ref:`howto/operator:FileSensor`</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"></span>
<span id="cb8-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-33"></span>
<span id="cb8-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    template_fields: Sequence<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = ("filepath",)</span>
<span id="cb8-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    ui_color = "#91818a"</span>
<span id="cb8-36"></span>
<span id="cb8-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def __init__(self, *, filepath, fs_conn_id="fs_default", recursive=False, **kwargs):</span></span>
<span id="cb8-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        super().__init__(**kwargs)</span></span>
<span id="cb8-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.filepath = filepath</span></span>
<span id="cb8-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.fs_conn_id = fs_conn_id</span></span>
<span id="cb8-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.recursive = recursive</span></span>
<span id="cb8-42"></span>
<span id="cb8-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def poke(self, context: Context):</span>
<span id="cb8-44">        hook = FSHook(self.fs_conn_id)</span>
<span id="cb8-45">        basepath = hook.get_path() # hook이 가지고 있는 method</span>
<span id="cb8-46">        full_path = os.path.join(basepath, self.filepath)</span>
<span id="cb8-47">        self.log.info("Poking for file %s", full_path)</span>
<span id="cb8-48"></span>
<span id="cb8-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for path in glob(full_path, recursive=self.recursive):</span></span>
<span id="cb8-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if os.path.isfile(path): # glob에 의한 결과물이 file이면 for loop 탈출</span></span>
<span id="cb8-51"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                mod_time = datetime.datetime.fromtimestamp(os.path.getmtime(path)).strftime("%Y%m%d%H%M%S")</span></span>
<span id="cb8-52"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                self.log.info("Found File %s last modified: %s", str(path), mod_time)</span></span>
<span id="cb8-53"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return True</span></span>
<span id="cb8-54"></span>
<span id="cb8-55"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            for _, _, files in os.walk(path):</span></span>
<span id="cb8-56"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                if len(files) &gt; 0:</span></span>
<span id="cb8-57"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    return True</span></span>
<span id="cb8-58"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return False</span></span></code></pre></div>
<ul>
<li><p>glob: file path안에 있는 file이나 directory를 찾아서 list로 반환</p>
<ul>
<li><code>glob('/home/kmkim')</code> : 모든 files and directories list 반환</li>
<li><code>glob('/home/kmkim/docker-compose.yaml')</code> : docker-compose.yaml만 리스트로 반환</li>
<li><code>glob('/home/kmkim/**',recursive=True)</code> : 하위 디렉토리 안에 있는 파일과 디렉토리들의 리스트로 반환</li>
</ul></li>
<li><p><code>FSHook()</code> : <a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/hooks/filesystem.html#FSHook">명세서</a></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>class FSHook(BaseHook):</span>
<span id="cb9-2">"""</span>
<span id="cb9-3">Allows for interaction with an file server.</span>
<span id="cb9-4"></span>
<span id="cb9-5">Connection should have a name and a path specified under extra:</span>
<span id="cb9-6"></span>
<span id="cb9-7">example:</span>
<span id="cb9-8">Connection Id: fs_test</span>
<span id="cb9-9">Connection Type: File (path)</span>
<span id="cb9-10">Host, Schema, Login, Password, Port: empty</span>
<span id="cb9-11">Extra: {"path": "/tmp"} # dictionary 형태</span>
<span id="cb9-12">"""</span>
<span id="cb9-13"></span>
<span id="cb9-14">def __init__(self, conn_id: str = "fs_default"):</span>
<span id="cb9-15">    super().__init__()</span>
<span id="cb9-16">    conn = self.get_connection(conn_id)</span>
<span id="cb9-17">    self.basepath = conn.extra_dejson.get("path", "")</span>
<span id="cb9-18">    self.conn = conn</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def get_conn(self) -&gt; None:</span>
<span id="cb9-21">        pass</span>
<span id="cb9-22"></span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docs</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    def get_path(self) -&gt; str:</span>
<span id="cb9-25">        """</span>
<span id="cb9-26">        Get the path to the filesystem location.</span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :return: the path.</span></span>
<span id="cb9-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb9-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return self.basepath</span></span></code></pre></div>
<ul>
<li>get_path(): self.baspath return - 별 내용 없음</li>
<li>생성자만 잘 이해하면 됨
<ul>
<li>Connection should have a name and a path specified under extra (예시 잘 볼 것): <img src="kmink3225.netlify.app/images/airflow/File_sensor_diagram.PNG" class="img-fluid" alt="File Sensor Sequential Diagram"></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Connection 작성</p>
<table class="table">
<thead>
<tr class="header">
<th>Connection_id</th>
<th style="text-align: left;">conn_file_opt_airflow_files</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Connection_type</td>
<td style="text-align: left;">File (path)</td>
</tr>
<tr class="even">
<td>Host</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td>Schema</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td>Login</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td>Password</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td>Port</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td>Extra</td>
<td style="text-align: left;">{“path”:“/opt/airflow/files”}</td>
</tr>
</tbody>
</table></li>
<li><p>Dag 작성</p></li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">from airflow import DAG</span>
<span id="cb10-2">from airflow.sensors.filesystem import FileSensor</span>
<span id="cb10-3">import pendulum</span>
<span id="cb10-4"></span>
<span id="cb10-5">with DAG(</span>
<span id="cb10-6">    dag_id='dags_file_sensor',</span>
<span id="cb10-7">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb10-8">    schedule='0 7 * * *',</span>
<span id="cb10-9">    catchup=False</span>
<span id="cb10-10">) as dag:</span>
<span id="cb10-11">    tvCorona19VaccinestatNew_sensor = FileSensor(</span>
<span id="cb10-12">        task_id='tvCorona19VaccinestatNew_sensor',</span>
<span id="cb10-13">        fs_conn_id='conn_file_opt_airflow_files',</span>
<span id="cb10-14">        filepath='tvCorona19VaccinestatNew/{{data_interval_end.in_timezone("Asia/Seoul") | ds_nodash }}/tvCorona19VaccinestatNew.csv',</span>
<span id="cb10-15">        recursive=False,</span>
<span id="cb10-16">        poke_interval=60,</span>
<span id="cb10-17">        timeout=60*60*24, # 1일</span>
<span id="cb10-18">        mode='reschedule'</span>
<span id="cb10-19">    )</span></code></pre></div>
</section>
</section>
<section id="python-sensor" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python Sensor</h1>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/python/index.html">airflow.sensors.python 명세서 보기</a></li>
<li>python operator와 매우 유사: 다른점은 python collabe function의 return값이 반드시 true로 되어야함</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"></span>
<span id="cb11-2">classairflow.sensors.python.PythonSensor(*, python_callable, op_args=None, op_kwargs=None, templates_dict=None, **kwargs)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">source</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-3">Bases: airflow.sensors.base.BaseSensorOperator</span>
<span id="cb11-4"></span>
<span id="cb11-5">Waits for a Python callable to return True.</span>
<span id="cb11-6"></span>
<span id="cb11-7">User could put input argument in templates_dict e.g templates_dict = {'start_ds': 1970} and access the argument by calling kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'templates_dict'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]['start_ds']</span> in the callable</span>
<span id="cb11-8"></span>
<span id="cb11-9">Parameters</span>
<span id="cb11-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>python_callable (Callable) – A reference to an object that is callable</span>
<span id="cb11-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>op_kwargs (Mapping<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str, Any</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None) – a dictionary of keyword arguments that will get unpacked in your function</span>
<span id="cb11-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>op_args (list | None) – a list of positional arguments that will get unpacked when calling your callable</span>
<span id="cb11-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>templates_dict (dict | None) – a dictionary where the values are templates that will get templated by the Airflow engine sometime between __init__ and execute takes place and are made available in your callable’s context after the template has been applied.</span></code></pre></div>
<section id="python-센서-dag-작성" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-센서-dag-작성"><span class="header-section-number">4.1</span> Python 센서 DAG 작성</h2>
<ul>
<li>무엇을 센싱할 것인가
<ul>
<li>서울시 공공데이터에서 당일 날짜로 데이터가 생성되었는지 센싱하기(날짜 컬럼이 있는 경우)</li>
<li>당일 날짜가 몇시에 업로드가 되는지 모름 (12시? ,00시, 1시?)</li>
</ul></li>
<li><a href="https://data.seoul.go.kr/">서울 열린 데이터 광장</a>
<ul>
<li>검색창 &gt;&gt; ‘코로나’ 검색 &gt;&gt; 서울시 코로나19 확진자 발생동향 (2023.05.31.이전) &gt;&gt; 미리보기</li>
<li>목표: 센서를 공용적으로 만들어 다른 dataset에도 적용할 수 있도록 작성
<ul>
<li>python collable function(check_api_update())을 일반화 시켜서 작성 ```markdown from airflow import DAG from airflow.sensors.python import PythonSensor import pendulum from airflow.hooks.base import BaseHook</li>
</ul></li>
</ul></li>
</ul>
<p>with DAG( dag_id=‘dags_python_sensor’, start_date=pendulum.datetime(2023,4,1, tz=‘Asia/Seoul’), schedule=’10 1 * * *’, catchup=False ) as dag: def check_api_update(http_conn_id, endpoint, base_dt_col, **kwargs): import requests import json from dateutil import relativedelta connection = BaseHook.get_connection(http_conn_id) url = f’http://{connection.host}:{connection.port}/{endpoint}/1/100’ #1부터 100행 까지만 가지고옴 response = requests.get(url)</p>
<pre><code>    contents = json.loads(response.text)
    key_nm = list(contents.keys())[0]
    row_data = contents.get(key_nm).get('row') 
      # row_data에 list형태로 데이터가 들어감
      # [{1행},
         {2행},
         {3행},
         {4행},...]
    last_dt = row_data[0].get(base_dt_col) #row_data의 첫번째 행, base_dt_col의 key에 대한 value를 추출
    last_date = last_dt[:10] 
      # 열번째 글자 까지만 slicing
      # 왜냐면, 서울시 기준일(S_DT)가 date 형식이 아니라 string 형식으로 입력되어 있음
      # 연/월/일 정보만 필요하기 때문에 시간은 제외
    last_date = last_date.replace('.', '-').replace('/', '-')

    # 밑에 try구문은 last_date 의 data 검증
    try:
        pendulum.from_format(last_date,'YYYY-MM-DD')
    except:
        from airflow.exceptions import AirflowException
        AirflowException(f'{base_dt_col} 컬럼은 YYYY.MM.DD 또는 YYYY/MM/DD 형태가 아닙니다.')
        # 서울시 코로나19 확진자 발생동향 (2023.05.31.이전) 의 데이텉 명세에 따르면
        # S_DT: 서울시 기준일 (데이터 기준일) 을 의미

    today_ymd = kwargs.get('data_interval_end').in_timezone('Asia/Seoul').strftime('%Y-%m-%d')
      # time stamp를 string형태로 바꿈
      # today_ymd는 batch(DAG)가 도는 날짜
    if last_date &gt;= today_ymd: # string 형태지만 크기는 비교 가능
        print(f'생성 확인(배치 날짜: {today_ymd} / API Last 날짜: {last_date})')
        return True
    else:
        print(f'Update 미완료 (배치 날짜: {today_ymd} / API Last 날짜:{last_date})')
        return False

sensor_task = PythonSensor(
    task_id='sensor_task',
    python_callable=check_api_update,
    op_kwargs={'http_conn_id':'openapi.seoul.go.kr',
               'endpoint':'{{var.value.apikey_openapi_seoul_go_kr}}/json/TbCorona19CountStatus',
               'base_dt_col':'S_DT'},
    poke_interval=600,   #10분
    mode='reschedule'
)</code></pre>
<pre><code>

# ExternalTask 센서

## DAG 간 의존관계 설정

* DAG 의존관계 설정 방법
  * TriggerDagRun 오퍼레이터    


:::{.cell}

:::{.cell-output-display}

:::{}

:::{}
&lt;svg width="672" height="480" viewbox="0.00 0.00 189.55 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)"&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill="white" stroke="transparent" points="-4,4 -4,-205 185.55,-205 185.55,4 -4,4"&gt;&lt;/polygon&gt;
&lt;g id="clust1" class="cluster"&gt;
&lt;title&gt;cluster0&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="8,-8 8,-193 173.55,-193 173.55,-8 8,-8"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="90.78" y="-176.4" font-family="Times,serif" font-size="14.00"&gt;Task Flow&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task1 --&gt;
&lt;g id="node1" class="node"&gt;
&lt;title&gt;task1&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00"&gt;task1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task2_1 --&gt;
&lt;g id="node2" class="node"&gt;
&lt;title&gt;task2_1&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="165.33,-52 106.22,-52 106.22,-16 165.33,-16 165.33,-52"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="135.78" y="-29.8" font-family="Times,serif" font-size="14.00"&gt;task2_1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task1&amp;#45;&amp;gt;task2_1 --&gt;
&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;task1-&amp;gt;task2_1&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M70.26,-72.38C78.66,-67.38 88.14,-61.74 97.18,-56.36"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="99.23,-59.22 106.04,-51.1 95.65,-53.2 99.23,-59.22"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- task2_2 --&gt;
&lt;g id="node3" class="node"&gt;
&lt;title&gt;task2_2&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="165.33,-106 106.22,-106 106.22,-70 165.33,-70 165.33,-106"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="135.78" y="-83.8" font-family="Times,serif" font-size="14.00"&gt;task2_2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task1&amp;#45;&amp;gt;task2_2 --&gt;
&lt;g id="edge2" class="edge"&gt;
&lt;title&gt;task1-&amp;gt;task2_2&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M70.26,-88C78.22,-88 87.15,-88 95.77,-88"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="96.04,-91.5 106.04,-88 96.04,-84.5 96.04,-91.5"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- task2_3 --&gt;
&lt;g id="node4" class="node"&gt;
&lt;title&gt;task2_3&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="165.33,-160 106.22,-160 106.22,-124 165.33,-124 165.33,-160"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="135.78" y="-137.8" font-family="Times,serif" font-size="14.00"&gt;task2_3&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task1&amp;#45;&amp;gt;task2_3 --&gt;
&lt;g id="edge3" class="edge"&gt;
&lt;title&gt;task1-&amp;gt;task2_3&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M70.26,-103.62C78.66,-108.62 88.14,-114.26 97.18,-119.64"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="95.65,-122.8 106.04,-124.9 99.23,-116.78 95.65,-122.8"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
:::
:::
:::
:::


    * task1: PythonOperator
    * TriggerDagRun Operator: task1이 끝난 후 다른 dag을 돌리고 싶을 경우에 TriggerDagRun Operator사용. task2,3,4는 task1 후에 돌아가는 task로 triggerDagRun Operator에 의해 task2,3,4에 대응되는 각 각 다른 dag을 돌아가도록 수행된다.
  * ExternalTask 센서


:::{.cell}

:::{.cell-output-display}

:::{}

:::{}
&lt;svg width="672" height="480" viewbox="0.00 0.00 188.77 263.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 259)"&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill="white" stroke="transparent" points="-4,4 -4,-259 184.77,-259 184.77,4 -4,4"&gt;&lt;/polygon&gt;
&lt;g id="clust1" class="cluster"&gt;
&lt;title&gt;cluster0&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="8,-8 8,-247 172.77,-247 172.77,-8 8,-8"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="90.39" y="-230.4" font-family="Times,serif" font-size="14.00"&gt;Task Flow&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sensor1 --&gt;
&lt;g id="node1" class="node"&gt;
&lt;title&gt;sensor1&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="74.66,-214 16.11,-214 16.11,-178 74.66,-178 74.66,-214"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="45.39" y="-191.8" font-family="Times,serif" font-size="14.00"&gt;sensor1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- task2 --&gt;
&lt;g id="node5" class="node"&gt;
&lt;title&gt;task2&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="164.77,-133 110.77,-133 110.77,-97 164.77,-97 164.77,-133"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="137.77" y="-110.8" font-family="Times,serif" font-size="14.00"&gt;task2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sensor1&amp;#45;&amp;gt;task2 --&gt;
&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;sensor1-&amp;gt;task2&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M66.9,-177.62C79.35,-166.46 95.41,-152.07 108.99,-139.9"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="111.54,-142.31 116.65,-133.03 106.87,-137.1 111.54,-142.31"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sensor2 --&gt;
&lt;g id="node2" class="node"&gt;
&lt;title&gt;sensor2&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="74.66,-160 16.11,-160 16.11,-124 74.66,-124 74.66,-160"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="45.39" y="-137.8" font-family="Times,serif" font-size="14.00"&gt;sensor2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sensor2&amp;#45;&amp;gt;task2 --&gt;
&lt;g id="edge2" class="edge"&gt;
&lt;title&gt;sensor2-&amp;gt;task2&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M74.98,-133.46C83.16,-131.01 92.18,-128.32 100.75,-125.76"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="101.93,-129.06 110.51,-122.85 99.92,-122.35 101.93,-129.06"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sensor3 --&gt;
&lt;g id="node3" class="node"&gt;
&lt;title&gt;sensor3&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="74.66,-106 16.11,-106 16.11,-70 74.66,-70 74.66,-106"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="45.39" y="-83.8" font-family="Times,serif" font-size="14.00"&gt;sensor3&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sensor3&amp;#45;&amp;gt;task2 --&gt;
&lt;g id="edge3" class="edge"&gt;
&lt;title&gt;sensor3-&amp;gt;task2&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M74.98,-96.54C83.16,-98.99 92.18,-101.68 100.75,-104.24"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="99.92,-107.65 110.51,-107.15 101.93,-100.94 99.92,-107.65"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sensor4 --&gt;
&lt;g id="node4" class="node"&gt;
&lt;title&gt;sensor4&lt;/title&gt;
&lt;polygon fill="none" stroke="black" points="74.66,-52 16.11,-52 16.11,-16 74.66,-16 74.66,-52"&gt;&lt;/polygon&gt;
&lt;text text-anchor="middle" x="45.39" y="-29.8" font-family="Times,serif" font-size="14.00"&gt;sensor4&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sensor4&amp;#45;&amp;gt;task2 --&gt;
&lt;g id="edge4" class="edge"&gt;
&lt;title&gt;sensor4-&amp;gt;task2&lt;/title&gt;
&lt;path fill="none" stroke="black" d="M66.9,-52.38C79.35,-63.54 95.41,-77.93 108.99,-90.1"&gt;&lt;/path&gt;
&lt;polygon fill="black" stroke="black" points="106.87,-92.9 116.65,-96.97 111.54,-87.69 106.87,-92.9"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
:::
:::
:::
:::


    * task2를 돌리기 위해 다른 dag의 task가 완료된 후에 돌아가야 하는 조건이 붙었을 때 사용
    * 예를 들어, 위의 그림 처럼, sensor1는 Dag A, sensor2는 Dag B, sensor3은 Dag C, sensor3은 Dag D에 속해있다고 할 때, 4개의 dag이 완료가 되어야 task2가 돌아갈 수 있다.
  * dataset
    * airflow 2.4 version에 나온 기능으로 dag의 dependency를 설정하는 새로운 방법

## ExternalTask 센서 명세 확인

* [airflow.sensors.external_task 명세](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/external_task/index.html#module-airflow.sensors.external_task)
  * Bases: airflow.sensors.base.BaseSensorOperator
  * Waits for a different DAG, task group, or task to complete for a specific logical date.
* Parameter

| Parameter   | 필수여부   | 설명                  |
|-----------------|-----------------|:------------------------------|
| external_dag_id | O | 센싱할 dag 명  | 
| **external_task_id** | X (셋 중 하나만 입력 가능 없으면 안써도 되고 없을 경우 dag만 센싱) | 센싱할 task_id 명 (string) |
| **external_task_ids** |  X (셋 중 하나만 입력 가능 없으면 안써도 되고 없을 경우 dag만 센싱) | 센싱할 1 개 이상의 task_id 명 (list) |
| **external_task_group_id** |  X (셋 중 하나만 입력 가능 없으면 dag만 센싱) | 센싱할 task_group_id명 |
| allowed_states | X (같은 상태가 입력되면 안됨)  | 센서가 Success 되기 위한 센싱 대상의 상태 (기본적으로 센싱할 task가 success로 끝나야함)      |
| skipped_states | X (같은 상태가 입력되면 안됨)  | 센서가 Skipped 되기 위한 센싱 대상의 상태 (기본적으로 none, 아무런 정의가 안되어있음)     |
| failed_states  | X (같은 상태가 입력되면 안됨)  | 센서가 Fail 되기 위한 센싱 대상의 상태 (기본적으로 none, 아무런 정의가 안되어있음)         |
| execution_delta | Login           | 현재 dag과 센싱할 dag의 data_interval_start의 차이 (스케쥴 차이)를 입력  |
| execution_date_fn | Password      | 스케쥴 차이를 상수로 구할 수 없는 경우, 센싱할 dag의 data_interval_start를 구하기 위한 함수를 넣어주면 됨        |
| check_existence | Password        | sensidng dag의 dag_id 또는 task_id 가 있는지 확인 true or false로 입력해야한다. default=false  |

* 위의 allowed_states, skipped_states, failed_states의 states 적을 수 있는 항목은 airflow.utils.state import State (State class) 에 있는 member들만 적을 수 있다.
  * State.SKIPPED, State.SUCCESS, State.FAILED, State.QUEUED, State.SCHEDULED, State.UP_FOR_RESCHEDULE 등
(from airflow.utils.state import State 필요)
* 위의 execution_delta 에는 timedelta() 를 이용하여 입력. 
  * External Task가 있는 dag보다 센싱할 dag이 얼마나 과거에 있는지 양수로 입력
  * 예를 들어, 센싱할 dag이 6시간 앞선다면 timedelta(hours=6)으로 입력. 주의) -6으로 쓰면 안됨
* execution_date_fn의 경우 함수가 들어가게 되는데 주로 주 dag의 주기가 다를 때 사용한다.
  * 예를 들어, externalTask의 dag이 시간단위 스케쥴이고 센싱할 dag의 스케쥴이 월단위로 적혀 있을때, data_interval_schedule값이 점점 벌어지게 된다.
  * 센싱할 dag의 스케쥴: dag(0 1 1 * *)
  * external task의 dag의 스케쥴 : dag(0 7 * * *)
  * data_interval_schedule = 6h (1일차), 1d+6h(2일차), 2d+6h(3일차), $\ldots$
* **가장 빈번하게 쓰이고 중요한 parameter: external_dag_id와 execution_delta**

## Dag Full Example

* Monitoring or sensing 할 dag: dags_branch_python_operator.py

```markdown
from airflow import DAG
import pendulum
from airflow.operators.python import PythonOperator
from airflow.operators.python import BranchPythonOperator

with DAG(
    dag_id='dags_branch_python_operator',
    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'), 
    schedule='0 1 * * *',
    catchup=False
) as dag:
    def select_random():
        import random

        item_lst = ['A','B','C']
        selected_item = random.choice(item_lst)
        if selected_item == 'A':
            return 'task_a' # task_id를 string 값으로 return해야함
        elif selected_item in ['B','C']:
            return ['task_b','task_c'] # 여러 task를 동시에 수행시킬 땐 리스트로 반환
    
    # 일반 operator의 parameter도 있음
    python_branch_task = BranchPythonOperator(
        task_id='python_branch_task',
        python_callable=select_random
    )
    
    # 후행 task 3개
    def common_func(**kwargs):
        print(kwargs['selected'])

    task_a = PythonOperator(
        task_id='task_a',
        python_callable=common_func,
        op_kwargs={'selected':'A'}
    )

    task_b = PythonOperator(
        task_id='task_b',
        python_callable=common_func,
        op_kwargs={'selected':'B'}
    )

    task_c = PythonOperator(
        task_id='task_c',
        python_callable=common_func,
        op_kwargs={'selected':'C'}
    )

    python_branch_task &gt;&gt; [task_a, task_b, task_c]</code></pre>
<ul>
<li>ExternalTask dag: dags_external_task_sensor.py</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">from airflow import DAG</span>
<span id="cb14-2">from airflow.sensors.external_task import ExternalTaskSensor</span>
<span id="cb14-3">import pendulum</span>
<span id="cb14-4">from datetime import timedelta</span>
<span id="cb14-5">from airflow.utils.state import State </span>
<span id="cb14-6"></span>
<span id="cb14-7">with DAG(</span>
<span id="cb14-8">    dag_id='dags_external_task_sensor',</span>
<span id="cb14-9">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb14-10">    schedule='0 7 * * *',</span>
<span id="cb14-11">    catchup=False</span>
<span id="cb14-12">) as dag:</span>
<span id="cb14-13">    external_task_sensor_a = ExternalTaskSensor(</span>
<span id="cb14-14">        task_id='external_task_sensor_a',</span>
<span id="cb14-15">        external_dag_id='dags_branch_python_operator',</span>
<span id="cb14-16">        external_task_id='task_a',</span>
<span id="cb14-17">        allowed_states=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">State.SKIPPED</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb14-18">        execution_delta=timedelta(hours=6),</span>
<span id="cb14-19">        poke_interval=10        #10초</span>
<span id="cb14-20">    )</span>
<span id="cb14-21"></span>
<span id="cb14-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    external_task_sensor_b = ExternalTaskSensor(</span></span>
<span id="cb14-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='external_task_sensor_b',</span></span>
<span id="cb14-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        external_dag_id='dags_branch_python_operator',</span></span>
<span id="cb14-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        external_task_id='task_b',</span></span>
<span id="cb14-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        failed_states=[State.SKIPPED],</span></span>
<span id="cb14-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        execution_delta=timedelta(hours=6),</span></span>
<span id="cb14-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=10        #10초</span></span>
<span id="cb14-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb14-30"></span>
<span id="cb14-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    external_task_sensor_c = ExternalTaskSensor(</span></span>
<span id="cb14-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='external_task_sensor_c',</span></span>
<span id="cb14-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        external_dag_id='dags_branch_python_operator',</span></span>
<span id="cb14-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        external_task_id='task_c',</span></span>
<span id="cb14-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        allowed_states=[State.SUCCESS],</span></span>
<span id="cb14-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        execution_delta=timedelta(hours=6),</span></span>
<span id="cb14-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        poke_interval=10        #10초</span></span>
<span id="cb14-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</section>
<section id="custom-sensor" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Custom Sensor</h1>
<section id="custom-sensor-만들기" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="custom-sensor-만들기"><span class="header-section-number">5.1</span> Custom Sensor 만들기</h2>
<ul>
<li>어떤 센서를 만들 것인가?
<ul>
<li>Python 센서에서 만들었던 로직을 Custom Sensor화 하기 (서울시 공공데이터에서 날짜 컬럼이 있는 경우 날짜 기준 update되었는지 센싱)</li>
</ul></li>
<li>재활용성이 높아 다른 DAG에서 활용될 가능성이 높다면 가급적이면 Custom 오퍼레이터화 해놓는 것이 좋다. (협업 환경에서 코드 중복 구현의 방지, 로직의 일원화 등)</li>
</ul>
</section>
<section id="dag-example" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="dag-example"><span class="header-section-number">5.2</span> Dag Example</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow.sensors.base import BaseSensorOperator</span>
<span id="cb15-2">from airflow.hooks.base import BaseHook</span>
<span id="cb15-3"></span>
<span id="cb15-4">'''</span>
<span id="cb15-5">서울시 공공데이터 API 추출시 특정 날짜 컬럼을 조사하여 </span>
<span id="cb15-6">배치 날짜 기준 전날 데이터가 존재하는지 체크하는 센서 </span>
<span id="cb15-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1. </span>데이터셋에 날짜 컬럼이 존재하고 </span>
<span id="cb15-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2. </span>API 사용시 그 날짜 컬럼으로 ORDER BY DESC 되어 가져온다는 가정하에 사용 가능</span>
<span id="cb15-9">'''</span>
<span id="cb15-10"></span>
<span id="cb15-11">class SeoulApiDateSensor(BaseSensorOperator):</span>
<span id="cb15-12">    template_fields = ('endpoint',)</span>
<span id="cb15-13">    def __init__(self, dataset_nm, base_dt_col, day_off=0, **kwargs):</span>
<span id="cb15-14">        '''</span>
<span id="cb15-15">        dataset_nm: 서울시 공공데이터 포털에서 센싱하고자 하는 데이터셋 명</span>
<span id="cb15-16">        base_dt_col: 센싱 기준 컬럼 (yyyy.mm.dd... or yyyy/mm/dd... 형태만 가능)</span>
<span id="cb15-17">        day_off: 배치일 기준 생성여부를 확인하고자 하는 날짜 차이를 입력 (기본값: 0)</span>
<span id="cb15-18">        '''</span>
<span id="cb15-19">        super().__init__(**kwargs)</span>
<span id="cb15-20">        self.http_conn_id = 'openapi.seoul.go.kr'</span>
<span id="cb15-21">        self.endpoint = '{{var.value.apikey_openapi_seoul_go_kr}}/json/' + dataset_nm + '/1/100'   # 100건만 추출</span>
<span id="cb15-22">        self.base_dt_col = base_dt_col</span>
<span id="cb15-23">        self.day_off = day_off</span>
<span id="cb15-24"></span>
<span id="cb15-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb15-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def poke(self, context):</span></span>
<span id="cb15-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import requests</span></span>
<span id="cb15-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        import json</span></span>
<span id="cb15-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from dateutil.relativedelta import relativedelta</span></span>
<span id="cb15-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        connection = BaseHook.get_connection(self.http_conn_id)</span></span>
<span id="cb15-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        url = f'http://{connection.host}:{connection.port}/{self.endpoint}'</span></span>
<span id="cb15-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        self.log.info(f'request url:{url}')</span></span>
<span id="cb15-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        response = requests.get(url)</span></span>
<span id="cb15-34"></span>
<span id="cb15-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        contents = json.loads(response.text)</span></span>
<span id="cb15-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        key_nm = list(contents.keys())[0]</span></span>
<span id="cb15-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        row_data = contents.get(key_nm).get('row')</span></span>
<span id="cb15-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        last_dt = row_data[0].get(self.base_dt_col)</span></span>
<span id="cb15-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        last_date = last_dt[:10]</span></span>
<span id="cb15-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        last_date = last_date.replace('.', '-').replace('/', '-')</span></span>
<span id="cb15-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        search_ymd = (context.get('data_interval_end').in_timezone('Asia/Seoul') + relativedelta(days=self.day_off)).strftime('%Y-%m-%d')</span></span>
<span id="cb15-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        try:</span></span>
<span id="cb15-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            import pendulum</span></span>
<span id="cb15-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            pendulum.from_format(last_date, 'YYYY-MM-DD')</span></span>
<span id="cb15-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        except:</span></span>
<span id="cb15-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            from airflow.exceptions import AirflowException</span></span>
<span id="cb15-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            AirflowException(f'{self.base_dt_col} 컬럼은 YYYY.MM.DD 또는 YYYY/MM/DD 형태가 아닙니다.')</span></span>
<span id="cb15-48"></span>
<span id="cb15-49"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb15-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if last_date &gt;= search_ymd:</span></span>
<span id="cb15-51"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            self.log.info(f'생성 확인(기준 날짜: {search_ymd} / API Last 날짜: {last_date})')</span></span>
<span id="cb15-52"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return True</span></span>
<span id="cb15-53"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        else:</span></span>
<span id="cb15-54"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            self.log.info(f'Update 미완료 (기준 날짜: {search_ymd} / API Last 날짜:{last_date})')</span></span>
<span id="cb15-55"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return False</span></span></code></pre></div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/10.sensor.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Airflow Additional Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/11.airflow_functions.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<p>몰라도 되지만 알면 좋은 고급 기능들</p>
<section id="dataset을-이용한-dag-트리거" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Dataset을 이용한 Dag 트리거</h1>
<section id="dataset의-필요성" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="dataset의-필요성"><span class="header-section-number">1.1</span> Dataset의 필요성</h2>
<ul>
<li>case 1</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 186.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 182)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-182 180,-182 180,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-85 168,-85 168,-8 8,-8"></polygon> <text text-anchor="middle" x="88" y="-68.4" font-family="Times,serif" font-size="14.00">DAG A</text> </g> <g id="clust2" class="cluster">
<title>
cluster1
</title>
<polygon fill="none" stroke="black" points="8,-93 8,-170 78,-170 78,-93 8,-93"></polygon> <text text-anchor="middle" x="43" y="-153.4" font-family="Times,serif" font-size="14.00">DAG B</text> </g> <!-- task_1 --> <g id="node1" class="node">
<title>
task_1
</title>
<polygon fill="none" stroke="black" points="70,-52 16,-52 16,-16 70,-16 70,-52"></polygon> <text text-anchor="middle" x="43" y="-29.8" font-family="Times,serif" font-size="14.00">task_1</text> </g> <!-- task_3 --> <g id="node2" class="node">
<title>
task_3
</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon> <text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task_3</text> </g> <!-- task_1&#45;&gt;task_3 --> <g id="edge1" class="edge">
<title>
task_1-&gt;task_3
</title>
<path fill="none" stroke="black" d="M70.4,-34C78.39,-34 87.31,-34 95.82,-34"></path> <polygon fill="black" stroke="black" points="95.92,-37.5 105.92,-34 95.92,-30.5 95.92,-37.5"></polygon> </g> <!-- task_k --> <g id="node3" class="node">
<title>
task_k
</title>
<polygon fill="none" stroke="black" points="70,-137 16,-137 16,-101 70,-101 70,-137"></polygon> <text text-anchor="middle" x="43" y="-114.8" font-family="Times,serif" font-size="14.00">task_k</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>위의 경우를 Task_1 뿐만 아니라 DAG_B의 task_k 에도 선행 의존관계가 걸리도록 External Task 센서를 하나 달도록 개선</li>
</ul>
</div><div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 269.66 325.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 321)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-321 265.66,-321 265.66,4 -4,4"></polygon> <g id="clust3" class="cluster">
<title>
cluster2
</title>
<polygon fill="none" stroke="black" points="183.66,-8 183.66,-85 253.66,-85 253.66,-8 183.66,-8"></polygon> <text text-anchor="middle" x="218.66" y="-68.4" font-family="Times,serif" font-size="14.00">DAG B</text> </g> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="183.66,-93 183.66,-170 253.66,-170 253.66,-93 183.66,-93"></polygon> <text text-anchor="middle" x="218.66" y="-153.4" font-family="Times,serif" font-size="14.00">DAG A</text> </g> <g id="clust2" class="cluster">
<title>
cluster1
</title>
<polygon fill="none" stroke="black" points="8,-178 8,-309 253.66,-309 253.66,-178 8,-178"></polygon> <text text-anchor="middle" x="130.83" y="-292.4" font-family="Times,serif" font-size="14.00">DAG C</text> </g> <!-- task_1 --> <g id="node1" class="node">
<title>
task_1
</title>
<polygon fill="none" stroke="black" points="245.66,-137 191.66,-137 191.66,-101 245.66,-101 245.66,-137"></polygon> <text text-anchor="middle" x="218.66" y="-114.8" font-family="Times,serif" font-size="14.00">task_1</text> </g> <!-- Sensor_task_1 --> <g id="node2" class="node">
<title>
Sensor_task_1
</title>
<polygon fill="none" stroke="black" points="113.49,-276 16.17,-276 16.17,-240 113.49,-240 113.49,-276"></polygon> <text text-anchor="middle" x="64.83" y="-253.8" font-family="Times,serif" font-size="14.00">Sensor_task_1</text> </g> <!-- Sensor_task_1&#45;&gt;task_1 --> <g id="edge3" class="edge">
<title>
Sensor_task_1-&gt;task_1
</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M100.88,-239.9C105.32,-237.12 109.69,-234.13 113.66,-231 146.08,-205.41 177.52,-169.54 197.19,-145.34"></path> <polygon fill="black" stroke="black" points="200.11,-147.3 203.64,-137.31 194.65,-142.92 200.11,-147.3"></polygon> <text text-anchor="middle" x="152.66" y="-218.2" font-family="Times,serif" font-size="14.00">sensing</text> </g> <!-- task_x --> <g id="node4" class="node">
<title>
task_x
</title>
<polygon fill="none" stroke="black" points="245.66,-249 191.66,-249 191.66,-213 245.66,-213 245.66,-249"></polygon> <text text-anchor="middle" x="218.66" y="-226.8" font-family="Times,serif" font-size="14.00">task_x</text> </g> <!-- Sensor_task_1&#45;&gt;task_x --> <g id="edge1" class="edge">
<title>
Sensor_task_1-&gt;task_x
</title>
<path fill="none" stroke="black" d="M113.87,-249.46C135.77,-245.56 161.26,-241.03 181.5,-237.43"></path> <polygon fill="black" stroke="black" points="182.33,-240.84 191.56,-235.64 181.1,-233.95 182.33,-240.84"></polygon> </g> <!-- Sensor_task_2 --> <g id="node3" class="node">
<title>
Sensor_task_2
</title>
<polygon fill="none" stroke="black" points="113.49,-222 16.17,-222 16.17,-186 113.49,-186 113.49,-222"></polygon> <text text-anchor="middle" x="64.83" y="-199.8" font-family="Times,serif" font-size="14.00">Sensor_task_2</text> </g> <!-- Sensor_task_2&#45;&gt;task_x --> <g id="edge2" class="edge">
<title>
Sensor_task_2-&gt;task_x
</title>
<path fill="none" stroke="black" d="M113.87,-212.54C135.77,-216.44 161.26,-220.97 181.5,-224.57"></path> <polygon fill="black" stroke="black" points="181.1,-228.05 191.56,-226.36 182.33,-221.16 181.1,-228.05"></polygon> </g> <!-- task_k --> <g id="node5" class="node">
<title>
task_k
</title>
<polygon fill="none" stroke="black" points="245.66,-52 191.66,-52 191.66,-16 245.66,-16 245.66,-52"></polygon> <text text-anchor="middle" x="218.66" y="-29.8" font-family="Times,serif" font-size="14.00">task_k</text> </g> <!-- Sensor_task_2&#45;&gt;task_k --> <g id="edge4" class="edge">
<title>
Sensor_task_2-&gt;task_k
</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M82.08,-185.81C109.13,-155.52 163.5,-94.64 194.54,-59.89"></path> <polygon fill="black" stroke="black" points="197.48,-61.85 201.53,-52.06 192.26,-57.19 197.48,-61.85"></polygon> <text text-anchor="middle" x="152.66" y="-133.2" font-family="Times,serif" font-size="14.00">sensing</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>case 2</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 155.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 151)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-151 180,-151 180,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-139 168,-139 168,-8 8,-8"></polygon> <text text-anchor="middle" x="88" y="-122.4" font-family="Times,serif" font-size="14.00">DAG A</text> </g> <!-- task_1 --> <g id="node1" class="node">
<title>
task_1
</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon> <text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task_1</text> </g> <!-- task_3 --> <g id="node2" class="node">
<title>
task_3
</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon> <text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task_3</text> </g> <!-- task_1&#45;&gt;task_3 --> <g id="edge1" class="edge">
<title>
task_1-&gt;task_3
</title>
<path fill="none" stroke="black" d="M70.4,-88C78.39,-88 87.31,-88 95.82,-88"></path> <polygon fill="black" stroke="black" points="95.92,-91.5 105.92,-88 95.92,-84.5 95.92,-91.5"></polygon> </g> <!-- task_4 --> <g id="node3" class="node">
<title>
task_4
</title>
<polygon fill="none" stroke="black" points="70,-52 16,-52 16,-16 70,-16 70,-52"></polygon> <text text-anchor="middle" x="43" y="-29.8" font-family="Times,serif" font-size="14.00">task_4</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>위의 경우, Task_1이 완료되면 또 다른 dag 을 trigger 되고 싶은데 DAG A 를 수정해야할 경우</li>
</ul>
</div><div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 155.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 151)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-151 180,-151 180,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-139 168,-139 168,-8 8,-8"></polygon> <text text-anchor="middle" x="88" y="-122.4" font-family="Times,serif" font-size="14.00">DAG A</text> </g> <!-- task_1 --> <g id="node1" class="node">
<title>
task_1
</title>
<polygon fill="none" stroke="black" points="70,-79 16,-79 16,-43 70,-43 70,-79"></polygon> <text text-anchor="middle" x="43" y="-56.8" font-family="Times,serif" font-size="14.00">task_1</text> </g> <!-- task_3 --> <g id="node2" class="node">
<title>
task_3
</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon> <text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task_3</text> </g> <!-- task_1&#45;&gt;task_3 --> <g id="edge1" class="edge">
<title>
task_1-&gt;task_3
</title>
<path fill="none" stroke="black" d="M70.4,-52.9C78.48,-50.42 87.51,-47.65 96.1,-45.01"></path> <polygon fill="black" stroke="black" points="97.39,-48.28 105.92,-42 95.33,-41.59 97.39,-48.28"></polygon> </g> <!-- task_4 --> <g id="node3" class="node">
<title>
task_4
</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon> <text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task_4</text> </g> <!-- task_1&#45;&gt;task_4 --> <g id="edge2" class="edge">
<title>
task_1-&gt;task_4
</title>
<path fill="none" stroke="black" d="M70.4,-69.1C78.48,-71.58 87.51,-74.35 96.1,-76.99"></path> <polygon fill="black" stroke="black" points="95.33,-80.41 105.92,-80 97.39,-73.72 95.33,-80.41"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>TriggerDagRun 오퍼레이터와 ExternalTask 센서를 많이 사용하다보면 연결관리 에 많은 노력이 필요 (강한 연결)</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 301.55 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 297.55,-205 297.55,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 285.55,-193 285.55,-8 8,-8"></polygon> <text text-anchor="middle" x="146.78" y="-176.4" font-family="Times,serif" font-size="14.00">DAG Flow</text> </g> <!-- DAG_A --> <g id="node1" class="node">
<title>
DAG_A
</title>
<polygon fill="none" stroke="black" points="79.66,-133 15.78,-133 15.78,-97 79.66,-97 79.66,-133"></polygon> <text text-anchor="middle" x="47.72" y="-110.8" font-family="Times,serif" font-size="14.00">DAG_A</text> </g> <!-- DAG_B --> <g id="node2" class="node">
<title>
DAG_B
</title>
<polygon fill="none" stroke="black" points="177.95,-160 115.61,-160 115.61,-124 177.95,-124 177.95,-160"></polygon> <text text-anchor="middle" x="146.78" y="-137.8" font-family="Times,serif" font-size="14.00">DAG_B</text> </g> <!-- DAG_A&#45;&gt;DAG_B --> <g id="edge1" class="edge">
<title>
DAG_A-&gt;DAG_B
</title>
<path fill="none" stroke="black" d="M79.7,-123.62C87.91,-125.9 96.9,-128.4 105.53,-130.8"></path> <polygon fill="black" stroke="black" points="104.85,-134.25 115.43,-133.56 106.73,-127.5 104.85,-134.25"></polygon> </g> <!-- DAG_C --> <g id="node3" class="node">
<title>
DAG_C
</title>
<polygon fill="none" stroke="black" points="177.95,-106 115.61,-106 115.61,-70 177.95,-70 177.95,-106"></polygon> <text text-anchor="middle" x="146.78" y="-83.8" font-family="Times,serif" font-size="14.00">DAG_C</text> </g> <!-- DAG_A&#45;&gt;DAG_C --> <g id="edge2" class="edge">
<title>
DAG_A-&gt;DAG_C
</title>
<path fill="none" stroke="black" d="M79.7,-106.38C87.91,-104.1 96.9,-101.6 105.53,-99.2"></path> <polygon fill="black" stroke="black" points="106.73,-102.5 115.43,-96.44 104.85,-95.75 106.73,-102.5"></polygon> </g> <!-- DAG_D --> <g id="node4" class="node">
<title>
DAG_D
</title>
<polygon fill="none" stroke="black" points="79.66,-79 15.78,-79 15.78,-43 79.66,-43 79.66,-79"></polygon> <text text-anchor="middle" x="47.72" y="-56.8" font-family="Times,serif" font-size="14.00">DAG_D</text> </g> <!-- DAG_D&#45;&gt;DAG_C --> <g id="edge3" class="edge">
<title>
DAG_D-&gt;DAG_C
</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M79.7,-69.62C87.91,-71.9 96.9,-74.4 105.53,-76.8"></path> <polygon fill="black" stroke="black" points="104.85,-80.25 115.43,-79.56 106.73,-73.5 104.85,-80.25"></polygon> </g> <!-- DAG_E --> <g id="node5" class="node">
<title>
DAG_E
</title>
<polygon fill="none" stroke="black" points="177.66,-52 115.89,-52 115.89,-16 177.66,-16 177.66,-52"></polygon> <text text-anchor="middle" x="146.78" y="-29.8" font-family="Times,serif" font-size="14.00">DAG_E</text> </g> <!-- DAG_D&#45;&gt;DAG_E --> <g id="edge4" class="edge">
<title>
DAG_D-&gt;DAG_E
</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M79.7,-52.38C88.08,-50.05 97.27,-47.49 106.06,-45.05"></path> <polygon fill="black" stroke="black" points="107.06,-48.4 115.76,-42.35 105.18,-41.66 107.06,-48.4"></polygon> </g> <!-- DAG_G --> <g id="node6" class="node">
<title>
DAG_G
</title>
<polygon fill="none" stroke="black" points="277.77,-52 213.89,-52 213.89,-16 277.77,-16 277.77,-52"></polygon> <text text-anchor="middle" x="245.83" y="-29.8" font-family="Times,serif" font-size="14.00">DAG_G</text> </g> <!-- DAG_E&#45;&gt;DAG_G --> <g id="edge5" class="edge">
<title>
DAG_E-&gt;DAG_G
</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M177.69,-34C185.93,-34 195.03,-34 203.79,-34"></path> <polygon fill="black" stroke="black" points="203.84,-37.5 213.84,-34 203.84,-30.5 203.84,-37.5"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>큐시스템과 같이 Job 수행이 완료된 Task 는 Push 하고 센싱이 필요한 task 은 큐 시스템을 구독하는 방식을 쓴다면 ? (약한 연결)</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 292.11 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 288.11,-205 288.11,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 276.11,-193 276.11,-8 8,-8"></polygon> <text text-anchor="middle" x="142.06" y="-176.4" font-family="Times,serif" font-size="14.00">DAG Flow</text> </g> <!-- DAG_A --> <g id="node1" class="node">
<title>
DAG_A
</title>
<polygon fill="none" stroke="black" points="79.66,-160 15.78,-160 15.78,-124 79.66,-124 79.66,-160"></polygon> <text text-anchor="middle" x="47.72" y="-137.8" font-family="Times,serif" font-size="14.00">DAG_A</text> </g> <!-- Queue --> <g id="node7" class="node">
<title>
Queue
</title>
<path fill="none" stroke="black" d="M169.44,-102.73C169.44,-104.53 157.34,-106 142.44,-106 127.54,-106 115.44,-104.53 115.44,-102.73 115.44,-102.73 115.44,-73.27 115.44,-73.27 115.44,-71.47 127.54,-70 142.44,-70 157.34,-70 169.44,-71.47 169.44,-73.27 169.44,-73.27 169.44,-102.73 169.44,-102.73"></path> <path fill="none" stroke="black" d="M169.44,-102.73C169.44,-100.92 157.34,-99.45 142.44,-99.45 127.54,-99.45 115.44,-100.92 115.44,-102.73"></path> <text text-anchor="middle" x="142.44" y="-83.8" font-family="Times,serif" font-size="14.00">Queue</text> </g> <!-- DAG_A&#45;&gt;Queue --> <g id="edge1" class="edge">
<title>
DAG_A-&gt;Queue
</title>
<path fill="none" stroke="black" d="M79.6,-124.02C88.29,-118.96 97.8,-113.42 106.7,-108.23"></path> <polygon fill="black" stroke="black" points="108.47,-111.25 115.35,-103.2 104.94,-105.21 108.47,-111.25"></polygon> </g> <!-- DAG_B --> <g id="node2" class="node">
<title>
DAG_B
</title>
<polygon fill="none" stroke="black" points="267.95,-52 205.61,-52 205.61,-16 267.95,-16 267.95,-52"></polygon> <text text-anchor="middle" x="236.78" y="-29.8" font-family="Times,serif" font-size="14.00">DAG_B</text> </g> <!-- DAG_C --> <g id="node3" class="node">
<title>
DAG_C
</title>
<polygon fill="none" stroke="black" points="267.95,-106 205.61,-106 205.61,-70 267.95,-70 267.95,-106"></polygon> <text text-anchor="middle" x="236.78" y="-83.8" font-family="Times,serif" font-size="14.00">DAG_C</text> </g> <!-- DAG_D --> <g id="node4" class="node">
<title>
DAG_D
</title>
<polygon fill="none" stroke="black" points="79.66,-106 15.78,-106 15.78,-70 79.66,-70 79.66,-106"></polygon> <text text-anchor="middle" x="47.72" y="-83.8" font-family="Times,serif" font-size="14.00">DAG_D</text> </g> <!-- DAG_D&#45;&gt;Queue --> <g id="edge2" class="edge">
<title>
DAG_D-&gt;Queue
</title>
<path fill="none" stroke="black" d="M79.6,-88C87.83,-88 96.81,-88 105.31,-88"></path> <polygon fill="black" stroke="black" points="105.35,-91.5 115.35,-88 105.35,-84.5 105.35,-91.5"></polygon> </g> <!-- DAG_E --> <g id="node5" class="node">
<title>
DAG_E
</title>
<polygon fill="none" stroke="black" points="267.66,-160 205.89,-160 205.89,-124 267.66,-124 267.66,-160"></polygon> <text text-anchor="middle" x="236.78" y="-137.8" font-family="Times,serif" font-size="14.00">DAG_E</text> </g> <!-- DAG_G --> <g id="node6" class="node">
<title>
DAG_G
</title>
<polygon fill="none" stroke="black" points="79.66,-52 15.78,-52 15.78,-16 79.66,-16 79.66,-52"></polygon> <text text-anchor="middle" x="47.72" y="-29.8" font-family="Times,serif" font-size="14.00">DAG_G</text> </g> <!-- Queue&#45;&gt;DAG_B --> <g id="edge3" class="edge">
<title>
Queue-&gt;DAG_B
</title>
<path fill="none" stroke="black" d="M169.65,-72.67C178.14,-67.71 187.74,-62.09 196.94,-56.71"></path> <polygon fill="black" stroke="black" points="198.72,-59.73 205.59,-51.66 195.19,-53.68 198.72,-59.73"></polygon> </g> <!-- Queue&#45;&gt;DAG_C --> <g id="edge4" class="edge">
<title>
Queue-&gt;DAG_C
</title>
<path fill="none" stroke="black" d="M169.65,-88C177.7,-88 186.75,-88 195.51,-88"></path> <polygon fill="black" stroke="black" points="195.59,-91.5 205.59,-88 195.59,-84.5 195.59,-91.5"></polygon> </g> <!-- Queue&#45;&gt;DAG_E --> <g id="edge5" class="edge">
<title>
Queue-&gt;DAG_E
</title>
<path fill="none" stroke="black" d="M169.65,-103.33C178.14,-108.29 187.74,-113.91 196.94,-119.29"></path> <polygon fill="black" stroke="black" points="195.19,-122.32 205.59,-124.34 198.72,-116.27 195.19,-122.32"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>Produce / Consume 구조를 이용하여 Task 완료를 알리기 위해 특정 키 값으로 Produce 하고 해당 키를 Consume 하는 DAG 을 트리거 스케줄 할 수 있는 기능
<ul>
<li>실제 큐가 있는 것은 아니고 DB 에 Produce / Consume 내역을 기록</li>
</ul></li>
</ul>
</section>
<section id="정리" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="정리"><span class="header-section-number">1.2</span> 정리</h2>
<ul>
<li>Dataset 은 Pub/sub 구조로 DAG 간 의존관계를 주는 방법</li>
<li>Unique 한 String 형태의 Key 값을 부여하여 Dataset Publish</li>
<li>Dataset 을 Consume 하는 DAG 은 스케줄을 별도로 주지 않고 리스트 형태로 구독할 Dataset 요소들을 명시</li>
<li>Dataset에 의해 시작된 DAG 의 Run_id 는 dataset_triggered__{trigger 된 시간 } 으로 표현됨</li>
<li>Airflow 화면 메뉴 중 Datasets 메뉴를 통해 별도로 Dataset 현황 모니터링 가능</li>
<li>N개의 Dataset 을 구독할 때 스케줄링 시점은 ?
<ul>
<li>마지막 수행 이후 N 개의 Dataset 이 모두 재 업데이트되는 시점 <img src="kmink3225.netlify.app/images/airflow/dataset_trigger.PNG" class="img-fluid" alt="Trigger using dataset - N개의 dataset 구독"></li>
</ul></li>
</ul>
</section>
</section>
<section id="dag의-default_args-파라미터" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> DAG의 default_args 파라미터</h1>
<section id="dag-의-default_args-파라미터" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="dag-의-default_args-파라미터"><span class="header-section-number">2.1</span> DAG 의 default_args 파라미터</h2>
<ul>
<li>목적: DAG 하위 모든 오퍼레이터에 공통 적용될 파라미터를 입력</li>
<li>어떤 파라미터들이 적용 가능할까?
<ul>
<li>오퍼레이터에 공통 적용할 수 있는 파라미터들</li>
<li>BaseOperator 클래스 생성자가 가지고 있는 파라미터</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/baseoperator.html#BaseOperator">airflow doc</a></li>
<li>Code</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">from airflow import DAG</span>
<span id="cb1-2">from airflow.operators.bash import BashOperator</span>
<span id="cb1-3">from datetime import timedelta</span>
<span id="cb1-4">import pendulum</span>
<span id="cb1-5">from airflow.models import Variable</span>
<span id="cb1-6"></span>
<span id="cb1-7">email_str = Variable.get("email_target")</span>
<span id="cb1-8">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">with DAG(</span>
<span id="cb1-11">    dag_id='dags_sla_email_example',</span>
<span id="cb1-12">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb1-13">    schedule='*/10 * * * *',</span>
<span id="cb1-14">    catchup=False,</span>
<span id="cb1-15">) as dag:</span>
<span id="cb1-16">    </span>
<span id="cb1-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_1 = BashOperator(</span></span>
<span id="cb1-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_1',</span></span>
<span id="cb1-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10m',</span></span>
<span id="cb1-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sla: timedelta(seconds=70), #SLA 설정</span></span>
<span id="cb1-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        email: 'sdf@sdfsfd.com'</span></span>
<span id="cb1-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb1-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_2 = BashOperator(</span></span>
<span id="cb1-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_2',</span></span>
<span id="cb1-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 2m',</span></span>
<span id="cb1-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sla: timedelta(seconds=70), #SLA 설정</span></span>
<span id="cb1-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        email: 'sdf@sdfsfd.com'</span></span>
<span id="cb1-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">   task_1 &gt;&gt; task_2</span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">from airflow import DAG</span>
<span id="cb2-2">from airflow.operators.bash import BashOperator</span>
<span id="cb2-3">from datetime import timedelta</span>
<span id="cb2-4">import pendulum</span>
<span id="cb2-5">from airflow.models import Variable</span>
<span id="cb2-6"></span>
<span id="cb2-7">email_str = Variable.get("email_target")</span>
<span id="cb2-8">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-9"></span>
<span id="cb2-10">with DAG(</span>
<span id="cb2-11">    dag_id='dags_sla_email_example',</span>
<span id="cb2-12">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb2-13">    schedule='*/10 * * * *',</span>
<span id="cb2-14">    catchup=False,</span>
<span id="cb2-15">    default_args={</span>
<span id="cb2-16">        'sla': timedelta(seconds=70),</span>
<span id="cb2-17">        'email': 'sdf@sdfsfd.com'</span>
<span id="cb2-18">    }</span>
<span id="cb2-19">) as dag:</span>
<span id="cb2-20">    </span>
<span id="cb2-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_1 = BashOperator(</span></span>
<span id="cb2-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_1',</span></span>
<span id="cb2-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10m'</span></span>
<span id="cb2-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_2 = BashOperator(</span></span>
<span id="cb2-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_2',</span></span>
<span id="cb2-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 2m'</span></span>
<span id="cb2-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-30"></span>
<span id="cb2-31">   task_1 &gt;&gt; task_2</span></code></pre></div>
</div>
</div>
</section>
<section id="baseoperator-파라미터-vs-dag-파라미터" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="baseoperator-파라미터-vs-dag-파라미터"><span class="header-section-number">2.2</span> BaseOperator 파라미터 vs Dag 파라미터</h2>
<div class="columns">
<div class="column" style="width:40%;">
<section id="dag-parameter" class="level3" data-number="2.2.1">
<h3 data-number="2.2.1" class="anchored" data-anchor-id="dag-parameter"><span class="header-section-number">2.2.1</span> DAG Parameter</h3>
<ul>
<li>DAG 파라미터는 DAG 단위로 적용될 파라미터</li>
<li>개별 오퍼레이터에 적용되지 않음</li>
<li>DAG 파라미터는 default_args 에 전달하면 안됨</li>
</ul>
</section>
</div><div class="column" style="width:60%;">
<section id="baseoperator-parameter" class="level3" data-number="2.2.2">
<h3 data-number="2.2.2" class="anchored" data-anchor-id="baseoperator-parameter"><span class="header-section-number">2.2.2</span> BaseOperator Parameter</h3>
<ul>
<li>Base 오퍼레이터 파라미터는 개별 Task 단위로 적용될 파라미터.</li>
<li>Task 마다 선언해줄 수 있지만 DAG 하위 모든 오퍼레이터에 적용 필요시 default_args 를 통해 전달 가능</li>
</ul>
</section>
</div>
</div>
<ul>
<li>default_args 에 전달된 파라미터보다 개별 오퍼레이터에 선언된 파라미터가 우선순위를 가짐</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"></span>
<span id="cb3-2">from airflow import DAG</span>
<span id="cb3-3">from airflow.operators.bash import BashOperator</span>
<span id="cb3-4">from datetime import timedelta</span>
<span id="cb3-5">import pendulum</span>
<span id="cb3-6">from airflow.models import Variable</span>
<span id="cb3-7"></span>
<span id="cb3-8">email_str = Variable.get("email_target")</span>
<span id="cb3-9">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">with DAG(</span>
<span id="cb3-12">    dag_id='dags_sla_email_example',</span>
<span id="cb3-13">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb3-14">    schedule='*/10 * * * *',</span>
<span id="cb3-15">    catchup=False,</span>
<span id="cb3-16">    default_args={</span>
<span id="cb3-17">        'sla': timedelta(seconds=70),</span>
<span id="cb3-18">        'email': 'sdf@sdfsfd.com'</span>
<span id="cb3-19">    }</span>
<span id="cb3-20">) as dag:</span>
<span id="cb3-21">    </span>
<span id="cb3-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_1 = BashOperator(</span></span>
<span id="cb3-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_1',</span></span>
<span id="cb3-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10m'</span></span>
<span id="cb3-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb3-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb3-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_2 = BashOperator(</span></span>
<span id="cb3-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_2',</span></span>
<span id="cb3-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 2m',</span></span>
<span id="cb3-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sla=timedelta(minutes=1)</span></span>
<span id="cb3-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">   task_1 &gt;&gt; task_2</span></code></pre></div>
</section>
</section>
<section id="task-실패시-email-발송하기" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task 실패시 Email 발송하기</h1>
<section id="email-발송-위한-파라미터-확인" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="email-발송-위한-파라미터-확인"><span class="header-section-number">3.1</span> Email 발송 위한 파라미터 확인</h2>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/baseoperator.html#BaseOperator">airflow doc</a></li>
<li>email 파라미터와 email_on_failure 파라미터를 이용</li>
<li>email 파라미터만 입력하면 email_on_failure 파라미터는 True 로 자동설정됨</li>
</ul>
</section>
<section id="email-발송-대상-등록" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="email-발송-대상-등록"><span class="header-section-number">3.2</span> Email 발송 대상 등록</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">from airflow import DAG</span>
<span id="cb4-2">from airflow.operators.bash import BashOperator</span>
<span id="cb4-3">from airflow.decorators import task</span>
<span id="cb4-4">from airflow.exceptions import AirflowException</span>
<span id="cb4-5">import pendulum</span>
<span id="cb4-6">from datetime import timedelta</span>
<span id="cb4-7">from airflow.models import Variable</span>
<span id="cb4-8"></span>
<span id="cb4-9">email_str = Variable.get("email_target")</span>
<span id="cb4-10">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">with DAG(</span>
<span id="cb4-13">    dag_id='dags_email_on_failure',</span>
<span id="cb4-14">    start_date=pendulum.datetime(2023,5,1, tz='Asia/Seoul'),</span>
<span id="cb4-15">    catchup=False,</span>
<span id="cb4-16">    schedule='0 1 * * *',</span>
<span id="cb4-17">    dagrun_timeout=timedelta(minutes=2),</span>
<span id="cb4-18">    default_args={</span>
<span id="cb4-19">        'email_on_failure': True,</span>
<span id="cb4-20">        'email': email_lst</span>
<span id="cb4-21">    }</span>
<span id="cb4-22">) as dag:</span>
<span id="cb4-23">    @task(task_id='python_fail')</span>
<span id="cb4-24">    def python_task_func():</span>
<span id="cb4-25">        raise AirflowException('에러 발생')</span>
<span id="cb4-26">    python_task_func()</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_fail = BashOperator(</span></span>
<span id="cb4-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_fail',</span></span>
<span id="cb4-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='exit 1',</span></span>
<span id="cb4-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_success = BashOperator(</span></span>
<span id="cb4-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_success',</span></span>
<span id="cb4-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='exit 0',</span></span>
<span id="cb4-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
<ul>
<li>Email 받을 대상이 1 명이면 string 형식으로 , 2 명 이상이면 list 로 전달</li>
<li>그런데 협업 환경에서 DAG 담당자는 수시로 바뀔 수 있고 인원도 수시로 바뀔 수 있는데 그때마다 DAG 을 뒤져서 email 리스트를 수정해야 할까 ?</li>
<li>이럴때 Variable 을 이용하자</li>
</ul>
</section>
</section>
<section id="sla로-task-수행-감시-email-발송하기" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> SLA로 task 수행 감시 &amp; Email 발송하기</h1>
<section id="sla파라미터-이해" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="sla파라미터-이해"><span class="header-section-number">4.1</span> SLA파라미터 이해</h2>
<ul>
<li><p>개념: 오퍼레이터 수행시 정해놓은 시간을 초과하였는지를 판단할 수 있도록 설정해놓은 시간 값 파이썬의 timedelta 로 정의</p></li>
<li><p>동작: 설정해놓은 SLA 를 초과하여 오퍼레이터 running 시 SLA Miss 발생 , Airflow UI 화면에서 Miss 건만 조회 가능 + email 발송 가능</p>
<ul>
<li>SLA Miss 발생시 task 가 실패되는 것은 아니며 단순 Miss 대상에 기록만 DB에 남기게 됨</li>
<li>SLA 는 DAG 파라미터가 아니며 BaseOperator 의 파라미터</li>
</ul></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/baseoperator.html#BaseOperator">airflow docs- def <strong>init</strong></a></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"> def __init__(</span>
<span id="cb5-2">      self,</span>
<span id="cb5-3">      task_id: str,</span>
<span id="cb5-4">      owner: str = DEFAULT_OWNER,</span>
<span id="cb5-5">      email: str | Iterable<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None = None,</span>
<span id="cb5-6">      email_on_retry: bool = conf.getboolean("email", "default_email_on_retry", fallback=True),</span>
<span id="cb5-7">      email_on_failure: bool = conf.getboolean("email", "default_email_on_failure", fallback=True),</span>
<span id="cb5-8">      retries: int | None = DEFAULT_RETRIES,</span>
<span id="cb5-9">      retry_delay: timedelta | float = DEFAULT_RETRY_DELAY,</span>
<span id="cb5-10">      retry_exponential_backoff: bool = False,</span>
<span id="cb5-11">      max_retry_delay: timedelta | float | None = None,</span>
<span id="cb5-12">      start_date: datetime | None = None,</span>
<span id="cb5-13">      end_date: datetime | None = None,</span>
<span id="cb5-14">      depends_on_past: bool = False,</span>
<span id="cb5-15">      ignore_first_depends_on_past: bool = DEFAULT_IGNORE_FIRST_DEPENDS_ON_PAST,</span>
<span id="cb5-16">      wait_for_past_depends_before_skipping: bool = DEFAULT_WAIT_FOR_PAST_DEPENDS_BEFORE_SKIPPING,</span>
<span id="cb5-17">      wait_for_downstream: bool = False,</span>
<span id="cb5-18">      dag: DAG | None = None,</span>
<span id="cb5-19">      params: collections.abc.MutableMapping | None = None,</span>
<span id="cb5-20">      default_args: dict | None = None,</span>
<span id="cb5-21">      priority_weight: int = DEFAULT_PRIORITY_WEIGHT,</span>
<span id="cb5-22">      weight_rule: str = DEFAULT_WEIGHT_RULE,</span>
<span id="cb5-23">      queue: str = DEFAULT_QUEUE,</span>
<span id="cb5-24">      pool: str | None = None,</span>
<span id="cb5-25">      pool_slots: int = DEFAULT_POOL_SLOTS,</span>
<span id="cb5-26">      sla: timedelta | None = None, # sla 변수</span>
<span id="cb5-27">      execution_timeout: timedelta | None = DEFAULT_TASK_EXECUTION_TIMEOUT,</span>
<span id="cb5-28">      on_execute_callback: None | TaskStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">TaskStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb5-29">      on_failure_callback: None | TaskStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">TaskStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb5-30">      on_success_callback: None | TaskStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">TaskStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb5-31">      on_retry_callback: None | TaskStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">TaskStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb5-32">      pre_execute: TaskPreExecuteHook | None = None,</span>
<span id="cb5-33">      post_execute: TaskPostExecuteHook | None = None,</span>
<span id="cb5-34">      trigger_rule: str = DEFAULT_TRIGGER_RULE,</span>
<span id="cb5-35">      resources: dict<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str, Any</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None = None,</span>
<span id="cb5-36">      run_as_user: str | None = None,</span>
<span id="cb5-37">      task_concurrency: int | None = None,</span>
<span id="cb5-38">      max_active_tis_per_dag: int | None = None,</span>
<span id="cb5-39">      max_active_tis_per_dagrun: int | None = None,</span>
<span id="cb5-40">      executor_config: dict | None = None,</span>
<span id="cb5-41">      do_xcom_push: bool = True,</span>
<span id="cb5-42">      inlets: Any | None = None,</span>
<span id="cb5-43">      outlets: Any | None = None,</span>
<span id="cb5-44">      task_group: TaskGroup | None = None,</span>
<span id="cb5-45">      doc: str | None = None,</span>
<span id="cb5-46">      doc_md: str | None = None,</span>
<span id="cb5-47">      doc_json: str | None = None,</span>
<span id="cb5-48">      doc_yaml: str | None = None,</span>
<span id="cb5-49">      doc_rst: str | None = None,</span>
<span id="cb5-50">      **kwargs,</span>
<span id="cb5-51">  ):</span></code></pre></div>
<ul>
<li>sla: timedelta | None = None, # sla 변수
<ul>
<li>timedelta보다 오랜 시간동안 task가 더 오래 수행되면 SLA Miss 기록만 남기고 실패처리는 안하게 됨</li>
<li>default_arg에 넣을 수 있기 때문에 모든 task, 즉 모든 operator에 공통 적용할 수 있다.</li>
</ul></li>
</ul></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/dag.html">sla_miss_callback: DAG에 있는 SLA 관련 파라미터로 SLA Miss시 수행할 함수 지정 가능-Source code for airflow.models.dag</a></p>
<ul>
<li>sla_miss_callback 파라미터
<ul>
<li>sla miss시 수행할 함수명을 입력 받음</li>
<li>dag에 있는 파라미터이기 때문에 default_arg에 넣을 수 없음</li>
</ul></li>
<li>DAG의 파라미터임 (BaseOperator 의 파라미터가 아니라는 것에 유의)</li>
</ul></li>
</ul>
</section>
<section id="sla-제약사항" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="sla-제약사항"><span class="header-section-number">4.2</span> SLA 제약사항</h2>
<ul>
<li>1번째 제약사항: 각 Task 의 SLA timeout 카운트 시작은 DAG 의 시작시간 기준임</li>
</ul>
<div class="columns">
<div class="column" style="width:40%;">
<section id="사람이-생각하는-sla-timeout-카운트-방식" class="level3" data-number="4.2.1">
<h3 data-number="4.2.1" class="anchored" data-anchor-id="사람이-생각하는-sla-timeout-카운트-방식"><span class="header-section-number">4.2.1</span> 사람이 생각하는 SLA timeout 카운트 방식</h3>
<p><img src="kmink3225.netlify.app/images/airflow/SLA_timeout_count1.PNG" class="img-fluid"></p>
<ul>
<li>처음 사용하는 사용자들은 다음과 같이 생각할 수 있다.
<ul>
<li>task1은 task1의 sla구간보다 수행시간이 짧게 완료됐기 때문에 성공 처리</li>
<li>task2는 sla 구간보다 더 길기 때문에 miss 처리됨</li>
<li>task3는 sla 구간보다 짧기 때문에 성공 처리</li>
</ul></li>
<li>airflow는 위와 같이 동작하지 않음 옆의 그림과 같이 동작함</li>
</ul>
</section>
</div><div class="column" style="width:60%;">
<section id="실제-airflow-의-sla-timeout-카운트-방식" class="level3" data-number="4.2.2">
<h3 data-number="4.2.2" class="anchored" data-anchor-id="실제-airflow-의-sla-timeout-카운트-방식"><span class="header-section-number">4.2.2</span> 실제 Airflow 의 SLA timeout 카운트 방식</h3>
<p><img src="kmink3225.netlify.app/images/airflow/SLA_timeout_count2.PNG" class="img-fluid"></p>
<ul>
<li>실제 airflow에서는 수행 시간을 dag의 최초 실행시점 부터 카운트 하기 시작함</li>
<li>task1의 수행완료 상태 및 시점과 상관없이 task2와 task3의 수행 시간은 task1 수행 시점 부터 카운트 되기 시작한다.</li>
<li>그러므로 task2, task3는 수행된적이 없음에도 miss sla 상태로 처리됨</li>
</ul>
</section>
</div>
</div>
<ul>
<li>2번째 제약사항: DAG의 시작시간 기준 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 명목적인 시작 시간 (data_interval_start)
<ul>
<li>위의 SLA timeout 카운트 시작은 dag의 시작시간 기준이라는 제약 사항과 연결되는 제약사항</li>
<li>만약 Pool 이 부족하거나 스케줄러의 부하로 인해 DAG 이 스케줄보다 늦게 시작했다면 늦게 시작한만큼 이미 SLA 시간 카운트는 진행되어 시간이 소요되고 있음
<ul>
<li>실질적 DAG 시작 시간을 기준으로 카운트하지 않음</li>
</ul></li>
<li>즉, 특정 task 수행에 computing 부하가 걸리면 후차적인 task들은 모두 miss 처리됨</li>
<li>대규모 프로젝트에서 흔히 발생하는 문제로 dag이 밀리는 현상이 자주 관찰되므로 sla는 자주쓰이는 방식은 아님.</li>
</ul></li>
<li>3번째 제약사항: 첫 스케줄에서는 SLA Miss 가 기록되지 않음 (두 번째 스케줄부터 기록)</li>
<li>4번째 제약사항: sla miss처리가 분명히 발생됐는데 가끔 기록이 안될때가 있고 email역시 발송이 되지 않을때가 있음. 엄격이 관리가 되지 않는 기능</li>
</ul>
</section>
<section id="full-dag-example" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="full-dag-example"><span class="header-section-number">4.3</span> Full Dag Example</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">from airflow import DAG</span>
<span id="cb6-2">from airflow.operators.bash import BashOperator</span>
<span id="cb6-3">from datetime import timedelta</span>
<span id="cb6-4">import pendulum</span>
<span id="cb6-5">from airflow.models import Variable</span>
<span id="cb6-6"></span>
<span id="cb6-7">email_str = Variable.get("email_target")</span>
<span id="cb6-8">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">with DAG(</span>
<span id="cb6-11">    dag_id='dags_sla_email_example',</span>
<span id="cb6-12">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb6-13">    schedule='*/10 * * * *',</span>
<span id="cb6-14">    catchup=False,</span>
<span id="cb6-15">    default_args={</span>
<span id="cb6-16">        'sla': timedelta(seconds=70),</span>
<span id="cb6-17">        'email': email_lst</span>
<span id="cb6-18">    }</span>
<span id="cb6-19">) as dag:</span>
<span id="cb6-20">    </span>
<span id="cb6-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 30초 sleep</span></span>
<span id="cb6-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_30s_sla_70s = BashOperator( </span></span>
<span id="cb6-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_30s_sla_70s',</span></span>
<span id="cb6-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 30'</span></span>
<span id="cb6-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 60초 sleep</span></span>
<span id="cb6-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_60_sla_70s = BashOperator(</span></span>
<span id="cb6-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_60_sla_70s',</span></span>
<span id="cb6-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 60'</span></span>
<span id="cb6-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-31"></span>
<span id="cb6-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 10초 sleep</span></span>
<span id="cb6-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_10s_sla_70s = BashOperator( </span></span>
<span id="cb6-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_10s_sla_70s',</span></span>
<span id="cb6-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10'</span></span>
<span id="cb6-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-37"></span>
<span id="cb6-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 10초 sleep</span></span>
<span id="cb6-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # sla의 timedelta를 명시적으로 30초 선언</span></span>
<span id="cb6-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # default argument보다 명시적 선언이 우선 순위가 더 높음</span></span>
<span id="cb6-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 그래서, 처음 3개의 task는 timedelta가 70초로 설정됐고 4번째 task는 30초로 설정됨 </span></span>
<span id="cb6-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_10s_sla_30s = BashOperator( </span></span>
<span id="cb6-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_10s_sla_30s',</span></span>
<span id="cb6-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10',</span></span>
<span id="cb6-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sla=timedelta(seconds=30)</span></span>
<span id="cb6-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-47"></span>
<span id="cb6-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_30s_sla_70s &gt;&gt; task_slp_60_sla_70s &gt;&gt; task_slp_10s_sla_70s &gt;&gt; task_slp_10s_sla_30s</span></span></code></pre></div>
<ul>
<li>위 코드를 보면,
<ul>
<li>1번째 task는 30초 sleep이 70초 sla timedelta보다 짧기 때문에 성공 처리</li>
<li>2번째 task는 30,40초 돌다가 miss 처리됨</li>
<li>3,4 번째 task는 수행되기도 전에 miss처리됨</li>
<li>4번째 timedelta가장 짧기 때문에 가장 먼저 miss 처리 됨</li>
</ul></li>
<li>Airflow web service에서 SLA Miss 현황 조회하기
<ul>
<li>airflow web service &gt;&gt; browse</li>
</ul></li>
</ul>
</section>
<section id="sla-miss-시-email-발송하기" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="sla-miss-시-email-발송하기"><span class="header-section-number">4.4</span> SLA Miss 시 email 발송하기</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"></span>
<span id="cb7-2">from airflow import DAG</span>
<span id="cb7-3">from airflow.operators.bash import BashOperator</span>
<span id="cb7-4">from datetime import timedelta</span>
<span id="cb7-5">import pendulum</span>
<span id="cb7-6">from airflow.models import Variable</span>
<span id="cb7-7"></span>
<span id="cb7-8">email_str = Variable.get("email_target")</span>
<span id="cb7-9">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-10"></span>
<span id="cb7-11">with DAG(</span>
<span id="cb7-12">    dag_id='dags_sla_email_example',</span>
<span id="cb7-13">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb7-14">    schedule='*/10 * * * *',</span>
<span id="cb7-15">    catchup=False,</span>
<span id="cb7-16">    default_args={</span>
<span id="cb7-17">        'sla': timedelta(seconds=70),</span>
<span id="cb7-18">        'email': email_lst</span>
<span id="cb7-19">    }</span>
<span id="cb7-20">) as dag:</span>
<span id="cb7-21">    </span>
<span id="cb7-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_30s_sla_70s = BashOperator(</span></span>
<span id="cb7-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_30s_sla_70s',</span></span>
<span id="cb7-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 30'</span></span>
<span id="cb7-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb7-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb7-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_60_sla_70s = BashOperator(</span></span>
<span id="cb7-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_60_sla_70s',</span></span>
<span id="cb7-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 60'</span></span>
<span id="cb7-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb7-31"></span>
<span id="cb7-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_10s_sla_70s = BashOperator(</span></span>
<span id="cb7-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_10s_sla_70s',</span></span>
<span id="cb7-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10'</span></span>
<span id="cb7-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb7-36"></span>
<span id="cb7-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_10s_sla_30s = BashOperator(</span></span>
<span id="cb7-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_slp_10s_sla_30s',</span></span>
<span id="cb7-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 10',</span></span>
<span id="cb7-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sla=timedelta(seconds=30)</span></span>
<span id="cb7-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb7-42"></span>
<span id="cb7-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_slp_30s_sla_70s &gt;&gt; task_slp_60_sla_70s &gt;&gt; task_slp_10s_sla_70s &gt;&gt; task_slp_10s_sla_30s</span></span></code></pre></div>
</section>
</section>
<section id="timeout-설정하기" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> timeout 설정하기</h1>
<section id="timeout-파라미터-이해" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="timeout-파라미터-이해"><span class="header-section-number">5.1</span> Timeout 파라미터 이해</h2>
<ul>
<li>Task수준의 timeout 과 DAG 수준의 timeout 이 존재</li>
<li>execution_timeout: <a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/baseoperator.html#BaseOperator">Task수준의 timeout 파라미터: baseOperator 명세에서 <strong>init</strong> 생성자에서 sla 파라미터 아래에 있음</a>
<ul>
<li>execution_timeout: timedelta | None = DEFAULT_TASK_EXECUTION_TIMEOUT,</li>
<li>timedelta보다 오래 task가 수행됐을 때 task는 fail 처리됨</li>
<li>task가 fialure 됐을 때 <strong>init</strong> 생성자 안의 다른 파라미터인 <code>email_on_failure: bool = conf.getboolean("email", "default_email_on_failure", fallback=True)</code> 과 <code>email: str | Iterable[str] | None = None,</code> 에 의해 지정 대상에게 email을 보낼 수 있다.</li>
<li>요약하면, timedelta, email_on_failure, email 이렇게 3개의 파라미터를 이용하여 timedelta 를 초과하는 task 수행시 fail 처리를 하여 이메일을 보낼 수 있다.</li>
</ul></li>
<li>dagrun_timeout: <a href="https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/dag.html">DAG수준에서도 timeout 파라미터를 걸 수 도 있음</a> : dagrun_timeout
<ul>
<li>[docs]class DAG(LoggingMixin): 의 <strong>init</strong> 생성자</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1"></span>
<span id="cb8-2">    def __init__(</span>
<span id="cb8-3">      self,</span>
<span id="cb8-4">      dag_id: str,</span>
<span id="cb8-5">      description: str | None = None,</span>
<span id="cb8-6">      schedule: ScheduleArg = NOTSET,</span>
<span id="cb8-7">      schedule_interval: ScheduleIntervalArg = NOTSET,</span>
<span id="cb8-8">      timetable: Timetable | None = None,</span>
<span id="cb8-9">      start_date: datetime | None = None,</span>
<span id="cb8-10">      end_date: datetime | None = None,</span>
<span id="cb8-11">      full_filepath: str | None = None,</span>
<span id="cb8-12">      template_searchpath: str | Iterable<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None = None,</span>
<span id="cb8-13">      template_undefined: type<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">jinja2.StrictUndefined</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = jinja2.StrictUndefined,</span>
<span id="cb8-14">      user_defined_macros: dict | None = None,</span>
<span id="cb8-15">      user_defined_filters: dict | None = None,</span>
<span id="cb8-16">      default_args: dict | None = None,</span>
<span id="cb8-17">      concurrency: int | None = None,</span>
<span id="cb8-18">      max_active_tasks: int = airflow_conf.getint("core", "max_active_tasks_per_dag"),</span>
<span id="cb8-19">      max_active_runs: int = airflow_conf.getint("core", "max_active_runs_per_dag"),</span>
<span id="cb8-20">      dagrun_timeout: timedelta | None = None,</span>
<span id="cb8-21">      sla_miss_callback: None | SLAMissCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">SLAMissCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb8-22">      default_view: str = airflow_conf.get_mandatory_value("webserver", "dag_default_view").lower(),</span>
<span id="cb8-23">      orientation: str = airflow_conf.get_mandatory_value("webserver", "dag_orientation"),</span>
<span id="cb8-24">      catchup: bool = airflow_conf.getboolean("scheduler", "catchup_by_default"),</span>
<span id="cb8-25">      on_success_callback: None | DagStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">DagStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb8-26">      on_failure_callback: None | DagStateChangeCallback | list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">DagStateChangeCallback</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> = None,</span>
<span id="cb8-27">      doc_md: str | None = None,</span>
<span id="cb8-28">      params: collections.abc.MutableMapping | None = None,</span>
<span id="cb8-29">      access_control: dict | None = None,</span>
<span id="cb8-30">      is_paused_upon_creation: bool | None = None,</span>
<span id="cb8-31">      jinja_environment_kwargs: dict | None = None,</span>
<span id="cb8-32">      render_template_as_native_obj: bool = False,</span>
<span id="cb8-33">      tags: list<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None = None,</span>
<span id="cb8-34">      owner_links: dict<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">str, str</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> | None = None,</span>
<span id="cb8-35">      auto_register: bool = True,</span>
<span id="cb8-36">  ):</span></code></pre></div>
<ul>
<li>다음 파라미터를 이용하여 dag을 관리할 수 있다.
<ul>
<li>schedule: ScheduleArg = NOTSET,</li>
<li>start_date: datetime | None = None,</li>
<li>default_args: dict | None = None,</li>
<li>dagrun_timeout: timedelta | None = None,</li>
</ul></li>
</ul></li>
<li>task1 &gt;&gt; task2 &gt;&gt; task3 예시</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<section id="execution_timeout" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="execution_timeout"><span class="header-section-number">5.1.1</span> execution_timeout</h3>
<ul>
<li>dag은 timeout이 안됐지만 task가 timeout이 되는 case</li>
</ul>
<p><img src="kmink3225.netlify.app/images/airflow/execution_timeout1.PNG" class="img-fluid"></p>
<ul>
<li>task2의 실행시간이 task2의 execution_timeout보다 길게 수행되어 fail되었고 task3은 task2로 인해 upstream failed 이 발생</li>
<li>하지만, task1,2,3 의 수행시간의 총합이 dagrun_timeout 보다 짧기 때문에 dag 자체는 실패처리 안됨</li>
</ul>
</section>
</div><div class="column" style="width:50%;">
<section id="datgrun_timeout" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="datgrun_timeout"><span class="header-section-number">5.1.2</span> datgrun_timeout</h3>
<ul>
<li>task는 성공 처리 됐지만 dag이 오랜시간동안 돌아 timeout되어 실패처리되는 case</li>
</ul>
<p><img src="kmink3225.netlify.app/images/airflow/dagrun_timeout.PNG" class="img-fluid"></p>
<ul>
<li>각 task들이 execution_timeout보다 짧아 모두 정상 처리 되었지만 task1,2,3의 총 실행시간이 dagrun_timeout보다 길어 dag자체는 failure이 된 상황</li>
<li>dag이 failure되는 시점에서의 task는 skipped 상태로 처리된다.</li>
</ul>
</section>
</div>
</div>
</section>
<section id="dag-full-example" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="dag-full-example"><span class="header-section-number">5.2</span> Dag Full Example</h2>
<ul>
<li>case1: tasks는 실패, dargrun 정상</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Package Import</span></span>
<span id="cb9-2">from airflow import DAG</span>
<span id="cb9-3">from airflow.operators.bash import BashOperator</span>
<span id="cb9-4">import pendulum</span>
<span id="cb9-5">from datetime import timedelta</span>
<span id="cb9-6">from airflow.models import Variable</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># email 수신자 리스트</span></span>
<span id="cb9-9">email_str = Variable.get("email_target") </span>
<span id="cb9-10">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">with DAG(</span>
<span id="cb9-13">    dag_id='dags_timeout_example_1',</span>
<span id="cb9-14">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb9-15">    catchup=False,</span>
<span id="cb9-16">    schedule=None,</span>
<span id="cb9-17">    dagrun_timeout=timedelta(minutes=1),</span>
<span id="cb9-18">    default_args={</span>
<span id="cb9-19">        #각 task들이 20초안에 끝나야 성공 처리됨</span>
<span id="cb9-20">        'execution_timeout': timedelta(seconds=20), </span>
<span id="cb9-21">        'email_on_failure': True,</span>
<span id="cb9-22">        'email': email_lst</span>
<span id="cb9-23">    }</span>
<span id="cb9-24">) as dag:</span>
<span id="cb9-25">    # execution_timeout보다 길기 때문에 task는 실패 처리됨</span>
<span id="cb9-26">    bash_sleep_30 = BashOperator(</span>
<span id="cb9-27">        task_id='bash_sleep_30', </span>
<span id="cb9-28">        bash_command='sleep 30',</span>
<span id="cb9-29">    )</span>
<span id="cb9-30">    # execution_timeout보다 짧기 때문에 task는 성공 처리됨</span>
<span id="cb9-31">    bash_sleep_10 = BashOperator(</span>
<span id="cb9-32">        trigger_rule='all_done', # upstream fail에도 task 실행시키기 위해 triggering</span>
<span id="cb9-33">        task_id='bash_sleep_10',</span>
<span id="cb9-34">        bash_command='sleep 10',</span>
<span id="cb9-35">    )</span>
<span id="cb9-36">    </span>
<span id="cb9-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # upstream failure 발생해도 trigger_rule을 all_done을 줬기 때문에 bash_sleep_10 은 실행됨</span></span>
<span id="cb9-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # dagrun_timeout을 1분으로 설정했기 때문에 task run의 총합이 40초이기 때문에 dagrun은 정상 처리됨</span></span>
<span id="cb9-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_sleep_30 &gt;&gt; bash_sleep_10 </span></span>
<span id="cb9-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span></code></pre></div>
<ul>
<li>case2: tasks는 정상, dargrun 실패</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">from airflow import DAG</span>
<span id="cb10-2">from airflow.operators.bash import BashOperator</span>
<span id="cb10-3">import pendulum</span>
<span id="cb10-4">from datetime import timedelta</span>
<span id="cb10-5">from airflow.models import Variable</span>
<span id="cb10-6"></span>
<span id="cb10-7">email_str = Variable.get("email_target")</span>
<span id="cb10-8">email_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">email.strip() for email in email_str.split(',')</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">with DAG(</span>
<span id="cb10-11">    dag_id='dags_timeout_example_2',</span>
<span id="cb10-12">    start_date=pendulum.datetime(2023, 5, 1, tz='Asia/Seoul'),</span>
<span id="cb10-13">    catchup=False,</span>
<span id="cb10-14">    schedule=None,</span>
<span id="cb10-15">    dagrun_timeout=timedelta(minutes=1),</span>
<span id="cb10-16">    default_args={</span>
<span id="cb10-17">        'execution_timeout': timedelta(seconds=40),</span>
<span id="cb10-18">        'email_on_failure': True,</span>
<span id="cb10-19">        'email': email_lst</span>
<span id="cb10-20">    }</span>
<span id="cb10-21">) as dag:</span>
<span id="cb10-22">    bash_sleep_35 = BashOperator(</span>
<span id="cb10-23">        task_id='bash_sleep_35',</span>
<span id="cb10-24">        bash_command='sleep 35',</span>
<span id="cb10-25">    )</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_sleep_36 = BashOperator(</span></span>
<span id="cb10-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trigger_rule='all_done',</span></span>
<span id="cb10-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_sleep_36',</span></span>
<span id="cb10-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='sleep 36',</span></span>
<span id="cb10-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_go = BashOperator(</span></span>
<span id="cb10-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_go',</span></span>
<span id="cb10-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='exit 0',</span></span>
<span id="cb10-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb10-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 모든 task들이 40초안에 실행완료가 되기때문에 성공 처리됨</span></span>
<span id="cb10-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># dagrun은 1분으로 설정됐기 때문에 2번째 task 가 실행될 때 dag이 fail되고</span></span>
<span id="cb10-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 2번째task는 skipped 처리가 됨, 이 task에 대해서는 email도 안감 </span></span>
<span id="cb10-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 3번째 task는  no status 처리됨 , 이 task에 대해서는 email도 안감</span></span>
<span id="cb10-41">    bash_sleep_35 &gt;&gt; bash_sleep_36 &gt;&gt; bash_go</span>
<span id="cb10-42">    </span></code></pre></div>
<ul>
<li>dagrun_timeout의 한계점
<ul>
<li>모든 task들이 40초안에 실행완료가 되기때문에 성공 처리됨</li>
<li>dagrun은 1분으로 설정됐기 때문에 2번째 task 가 실행될 때 dag이 fail되고</li>
<li>2번째task는 skipped 처리가 됨, 이 task에 대해서는 email도 안감</li>
<li>3번째 task는 no status 처리됨 , 이 task에 대해서는 email도 안감</li>
</ul></li>
</ul>
</section>
<section id="정리-1" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="정리-1"><span class="header-section-number">5.3</span> 정리</h2>
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Comparision</th>
<th>sla</th>
<th>execution_timeout</th>
<th>dagrun_timeout</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>파라미터 정의 위치</td>
<td>BaseOperator</td>
<td>BaseOperator</td>
<td>DAG</td>
</tr>
<tr class="even">
<td>적용 수준</td>
<td>Task</td>
<td>task</td>
<td>DAG</td>
</tr>
<tr class="odd">
<td>기능</td>
<td>지정한 시간 초과시 Miss 기록</td>
<td>지정한 시간 초과시 task fail 처리</td>
<td>지정한 시간 초과시 DAG fail 처리</td>
</tr>
<tr class="even">
<td>email 발송 가능 여부</td>
<td>O</td>
<td>O</td>
<td>X</td>
</tr>
<tr class="odd">
<td>timeout 발생시 후행 task 상태</td>
<td>상관없이 지속</td>
<td>Upstream_failed</td>
<td>Skipped (current) /No status (not run)</td>
</tr>
<tr class="even">
<td>스케쥴 필요</td>
<td>O</td>
<td>X</td>
<td>X</td>
</tr>
</tbody>
</table>
<ul>
<li>sla, execution_timeout에는 email 발송 paraemeter가 있지만 execution_timeout에는 없다.</li>
<li>dagrun timeout이 fail 됐을 때 반드시 email 발송 하고싶으면 dag의 파라미터 중 on_failure_callback 에 dag이 실패됐을 때 이메일을 전송하는 함수를 만들어 그 함수명을 할당해준다.</li>
<li>upstream_failed 상태는 execution_timeout만이 갖는 특징이 아니라 airflow의 디폴트 설정이다. 상위 task들이 fail되면 후행 task들은 upstream_failed로 남는다.</li>
<li>공통점: 파이썬의 timedelta 함수로 timeout 기준 시간 정의</li>
</ul>
</section>
</section>
<section id="airflow-cli-사용하기" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Airflow CLI 사용하기</h1>
<ul>
<li>Airflow가 설치되어 있는 서버 또는 환경에서 shell 명령을 이용하여 Airflow를 컨트롤 할 수 있도록 많은 기능들을 제공하고 있음</li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/cli-and-env-variables-ref.html">airflow cli doc</a>
<ul>
<li>대표적인 content
<ul>
<li>dags: dag을 다룰 수 잇는 커맨드
<ul>
<li><code>airflow dags [-h] COMMAND ...</code></li>
<li>backfill: airflow web ui 의 grid 기능을 보면 dag이 돌았던 이력을 볼 수 있는데 grid 상 가장 과거 날짜 뿐만 아니라 그 이전의 과거 날짜 또한 command의 옵션으로 모두 돌릴 수 있음</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">  airflow dags backfill <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-c CONF]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--continue-on-failures</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-2">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--delay-on-limit DELAY_ON_LIMIT</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [--disable-retry]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-x</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-3">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-n</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-e END_DATE]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-i</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-I]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-l</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-m]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--pool POOL</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-4">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--rerun-failed-tasks</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [--reset-dagruns]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-B</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-5">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-s START_DATE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-S SUBDIR]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-t TASK_REGEX</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-6">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--treat-dag-as-regex</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-v]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-y</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-7">                dag_id</span></code></pre></div>
<ul>
<li>delete: Delete all DB records related to the specified DAG</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">airflow dags delete <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-v]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-y</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> dag_id</span></code></pre></div>
<ul>
<li>details: Get DAG details given a DAG id</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">airflow dags details <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-o table, json, yaml, plain]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-v</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> dag_id</span>
<span id="cb13-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* </span>list: List all the DAGs</span>
<span id="cb13-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```markdown</span></span>
<span id="cb13-4">airflow dags list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-o table, json, yaml, plain]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-S SUBDIR</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-v]</span></span></code></pre></div></li>
<li>variables: variables을 관리하는 command
<ul>
<li><code>airflow variables [-h] COMMAND ...</code></li>
<li>delete: <code>airflow variables delete [-h] [-v] key</code>
<ul>
<li>등록되있는 variables을 key값을 입력하여 삭제</li>
</ul></li>
<li>export: <code>airflow variables export [-h] [-v] file</code>
<ul>
<li>등록되있는 variables을 json file로 추출</li>
</ul></li>
<li>get: <code>airflow variables get [-h] [-d VAL] [-j] [-v] key</code>
<ul>
<li>특정 variables의 key값을 주어 values을 꺼내옴</li>
</ul></li>
<li>import: <code>airflow variables import [-h] [-v] file</code>
<ul>
<li>json file에 variables을 작성해놓고 list를 한번에 입력한다.</li>
</ul></li>
<li>list: <code>airflow variables list [-h] [-o table, json, yaml, plain] [-v]</code></li>
<li>set: <code>airflow variables set [-h] [-j] [-v] key VALUE</code></li>
</ul></li>
</ul></li>
</ul></li>
<li>Cli를 잘 쓰면 좋은 이유
<ul>
<li>일괄작업: Airflow UI에서 할 수 없는 일괄 작업 방식을 제공
<ul>
<li>ex: connection 일괄 등록. 만약 airflow ui로 등록하면 일일히 등록해야한다.</li>
<li>물론 CLI를 이용하는 방법 외에 metaDB table에 직접 insert하는 방법도 있음</li>
</ul></li>
<li>특수기능: Airflow UI에서는 할 수 없는 기능을 제공
<ul>
<li>ex: backfill 은 airflow ui 를 통해서는 실행 불가</li>
</ul></li>
<li>자동화: Airflow UI에서 직접 눈으로 보고 클릭하는 방식이 아닌 프로그래밍에 의한 제어가 가능해짐
<ul>
<li>CLI 커맨드는 shell 명령어로 이루저있기 때문에 shell script를 작성하여 자동화 할 수 있다.</li>
</ul></li>
</ul></li>
</ul>
<section id="cli---dag-trigger" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="cli---dag-trigger"><span class="header-section-number">6.1</span> cli - dag trigger</h2>
<ul>
<li><p>dag trigger: airflow ui 상에서 manual 로 dag trigger 하거나 run_id 를 직접 넣어 trigger 할 수 있는 기능으로 CLI로 실행시킬 수 있다.</p></li>
<li><p>CLI 명령은 WSL2에서 하는게 아니라 docker container안에서 해야함</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">airflow dags trigger <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-c CONF]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e EXEC_DATE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> </span>
<span id="cb14-2">                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">--no-replace-microseconds</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-o table, json, yaml, plain]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-r RUN_ID</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-S SUBDIR]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-v</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-3">                   dag_id</span></code></pre></div>
<ul>
<li>EXEC_DATE: execution_date parameter는 모두 data_interval_start 기준이며 String 형식으로 입력하면 기본 UTC로 계산됨</li>
<li>RUN_ID를 입력하면 기본적으로 manual__로 시작하며 run_id를 직접 입력도 가능</li>
<li>예시: <code>#&gt; airflow dags trigger dags_seoul_api_corona</code></li>
</ul></li>
<li><p>Full Example</p></li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># docker container list 확인</span></span>
<span id="cb15-2">sudo docker ps </span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># webserver container 선택 (어떤 것을 골라도 상관없음)</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># airflow container 들어가기: sudo docker exec -it [docker_container_id] bash</span></span>
<span id="cb15-7">sudo docker exec -it 8b755cb5aa70 bash </span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># trigger 명령어 실행</span></span>
<span id="cb15-10">airflow dags trigger dags_base_branch_operator</span>
<span id="cb15-11"></span></code></pre></div>
</section>
<section id="결과" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="결과"><span class="header-section-number">6.2</span> 결과</h2>
<p><img src="kmink3225.netlify.app/images/airflow/cli_example_1.PNG" class="img-fluid"></p>
<ul>
<li>dag_run_id: manual__2023-07-22T05:05:59+00:00.</li>
<li>run type: manual__
<ul>
<li>ClI 로 돌렸기 때문에 manual_이 붙어있음</li>
<li>run types: schedule, manual, backfill 등이 있음</li>
</ul></li>
</ul>
</section>
<section id="cli---dag-backfill" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="cli---dag-backfill"><span class="header-section-number">6.3</span> cli - dag backfill</h2>
<ul>
<li>입력 스케줄 구간에 대해 일괄 (재)실행 (스케줄 이력이 없는 과거 날짜도 가능)</li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># start (-s), end(-ㄷ) 파라미터를 dashed string 형태로 입력하면 UTC로 간주(아래의 start 날짜에 시간:분:초가 나와있지 않지만 날짜뒤에 00:00:00 가 붙음) </span></span>
<span id="cb16-2">airflow dags backfill -s 2023-04-19 -e 2023-04-21 dags_seoul_api_corona</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 타임스탬프 형태로 직접 작성도 가능 (run_id에서 해당하는 날짜 구간을 찾아 실행)</span></span>
<span id="cb16-5">airflow dags backfill -s 2023-04-19T22:00:00+00:00 -e 2023-04-20T22:00:00+00:00 —reset-dagruns dags_seoul_api_corona</span></code></pre></div>
<ul>
<li>위의 예시에서, -s 2023-04-19 -e 2023-04-21 옵션이 있고 grid에서 task 수행 이력의 가장 최근 날짜가 2023-04-21 이라고 가정해보자.
<ul>
<li>run_id가 scheduled__2023-04-21T22:00:00+00:00 일때</li>
<li>위의 날짜 구간 옵션에 있고 dag이 실행되지 않았던 04/20 22:00, 04/19 22:00 2개가 돌아가게 됨</li>
</ul></li>
</ul>
</section>
<section id="cli---task-clear" class="level2" data-number="6.4">
<h2 data-number="6.4" class="anchored" data-anchor-id="cli---task-clear"><span class="header-section-number">6.4</span> cli - task clear</h2>
<ul>
<li>Clear 작업을 start / end 구간으로 일괄 재실행
<ul>
<li>backfill의 경우 task가 수행이 됐건 안됐건 무조건 실행 (무조건 재실행)</li>
<li>하지만 clear 이미 실행됐던 task에 한해서 재실행됨</li>
<li>Backfill과 달리 수행되지 않은 스케줄 구간은 실행할 수 없음</li>
</ul>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">airflow tasks clear <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-h</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-R]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-e END_DATE]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-X</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-x]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-r]</span></span>
<span id="cb17-2">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-s START_DATE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-S SUBDIR]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-t TASK_REGEX</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-u]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-v</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [-y]</span></span>
<span id="cb17-3">                    dag_id</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1">airflow tasks clear -s 2023-05-07 -e 2023-05-12 dags_seoul_api_corona</span>
<span id="cb18-2">airflow tasks clear -s 2023-05-07T22:00:00+00:00 -e 2023-05-12T22:00:00+00:00 dags_seoul_api_corona</span></code></pre></div></li>
<li>Backfill되었던 DAG은 clear 불가함. reset-dagruns 옵션과 함께 다시 Backfill 수행해야 함</li>
</ul>
</section>
<section id="정리-2" class="level2" data-number="6.5">
<h2 data-number="6.5" class="anchored" data-anchor-id="정리-2"><span class="header-section-number">6.5</span> 정리</h2>
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Comparision</th>
<th>trigger</th>
<th>backfill</th>
<th>clear</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>목적</td>
<td>특정 날짜로 DAG Trigger</td>
<td>Start ~ end 구간의 스케줄 실행</td>
<td>Start ~ end 구간 내 이미 수</td>
</tr>
<tr class="even">
<td>행되었던 스케줄 재실행</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>Run type</td>
<td>-r 옵션으로 지정 가능. 없으면 Manual</td>
<td>Backfill</td>
<td>원래의 run_type</td>
</tr>
<tr class="even">
<td>기 수행된 run_id가 존재하는 경우</td>
<td>동일 run_id 가 존재하는 경우 에러 발생</td>
<td>Run_type 을 Backfill 로 덮어쓰며</td>
<td></td>
</tr>
<tr class="odd">
<td>재실행</td>
<td>재실행</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>구간 지정</td>
<td>불가</td>
<td>가능</td>
<td>가능</td>
</tr>
<tr class="odd">
<td>과거 날짜 적용 가능</td>
<td>가능</td>
<td>가능</td>
<td>불가</td>
</tr>
<tr class="even">
<td>task 선택 가능</td>
<td>불가</td>
<td>가능</td>
<td>가능</td>
</tr>
</tbody>
</table>
<ul>
<li>공통점: CLI 명령으로 DAG 실행 가능</li>
</ul>
</section>
</section>
<section id="triggerer" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Triggerer</h1>
<p>Scheduler, worker, webserver, triggerer containers 중 하나</p>
<section id="airflow-triggerer의-필요성" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="airflow-triggerer의-필요성"><span class="header-section-number">7.1</span> Airflow Triggerer의 필요성</h2>
<ul>
<li>Airflow는 그 자체로 ETL 툴이라기보다 오케스트레이션 솔루션</li>
<li>왜냐면 airflow와 연계되는 외부 솔루션에 작업 제출, 상태 확인, 완료 확인 등의 절차를 통해 관리</li>
<li>예를 들어 airflow의 worker container가 python logic을 직접 처리하는게 아니라 python logic 을 python이 처리하도록 명령을 제출하고 로직 확인 및 결과 확인을 수행한다.</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 315.68 346.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 342)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-342 311.68,-342 311.68,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-330 299.68,-330 299.68,-8 8,-8"></polygon> </g> <!-- airflow --> <g id="node1" class="node">
<title>
airflow
</title>
<ellipse fill="none" stroke="black" cx="54.92" cy="-168" rx="38.85" ry="38.85"></ellipse> <text text-anchor="middle" x="54.92" y="-163.8" font-family="Times,serif" font-size="14.00">airflow</text> </g> <!-- PostgresqlDB --> <g id="node2" class="node">
<title>
PostgresqlDB
</title>
<polygon fill="none" stroke="black" points="291.58,-52 198,-52 198,-16 291.58,-16 291.58,-52"></polygon> <text text-anchor="middle" x="244.79" y="-29.8" font-family="Times,serif" font-size="14.00">PostgresqlDB</text> </g> <!-- airflow&#45;&gt;PostgresqlDB --> <g id="edge1" class="edge">
<title>
airflow-&gt;PostgresqlDB
</title>
<path fill="none" stroke="black" d="M74.91,-134.17C84.47,-119.47 97.17,-102.95 111.85,-91.2 134.21,-73.29 163.04,-59.94 188.05,-50.67"></path> <polygon fill="black" stroke="black" points="189.54,-53.85 197.78,-47.19 187.18,-47.26 189.54,-53.85"></polygon> <text text-anchor="middle" x="145.87" y="-95.2" font-family="Times,serif" font-size="14.00">작업 실행</text> </g> <!-- Hive --> <g id="node3" class="node">
<title>
Hive
</title>
<polygon fill="none" stroke="black" points="271.79,-106 217.79,-106 217.79,-70 271.79,-70 271.79,-106"></polygon> <text text-anchor="middle" x="244.79" y="-83.8" font-family="Times,serif" font-size="14.00">Hive</text> </g> <!-- airflow&#45;&gt;Hive --> <g id="edge2" class="edge">
<title>
airflow-&gt;Hive
</title>
<path fill="none" stroke="black" d="M90.06,-151.07C97.21,-147.64 104.74,-144.14 111.85,-141 144.08,-126.76 181.4,-111.92 208.1,-101.58"></path> <polygon fill="black" stroke="black" points="209.71,-104.71 217.79,-97.85 207.2,-98.18 209.71,-104.71"></polygon> </g> <!-- HDFS --> <g id="node4" class="node">
<title>
HDFS
</title>
<polygon fill="none" stroke="black" points="271.79,-160 217.79,-160 217.79,-124 271.79,-124 271.79,-160"></polygon> <text text-anchor="middle" x="244.79" y="-137.8" font-family="Times,serif" font-size="14.00">HDFS</text> </g> <!-- airflow&#45;&gt;HDFS --> <g id="edge3" class="edge">
<title>
airflow-&gt;HDFS
</title>
<path fill="none" stroke="black" d="M92.42,-157.37C98.85,-155.77 105.51,-154.3 111.85,-153.2 143.84,-147.65 180.7,-144.82 207.31,-143.39"></path> <polygon fill="black" stroke="black" points="207.52,-146.88 217.33,-142.89 207.17,-139.89 207.52,-146.88"></polygon> <text text-anchor="middle" x="145.87" y="-157.2" font-family="Times,serif" font-size="14.00">작업 실행</text> </g> <!-- Bigquerty --> <g id="node5" class="node">
<title>
Bigquerty
</title>
<polygon fill="none" stroke="black" points="280.78,-214 208.8,-214 208.8,-178 280.78,-178 280.78,-214"></polygon> <text text-anchor="middle" x="244.79" y="-191.8" font-family="Times,serif" font-size="14.00">Bigquerty</text> </g> <!-- airflow&#45;&gt;Bigquerty --> <g id="edge4" class="edge">
<title>
airflow-&gt;Bigquerty
</title>
<path fill="none" stroke="black" d="M93.49,-173.6C123.73,-178.11 166.34,-184.46 198.48,-189.25"></path> <polygon fill="black" stroke="black" points="198.11,-192.73 208.51,-190.74 199.14,-185.81 198.11,-192.73"></polygon> <text text-anchor="middle" x="145.87" y="-190.2" font-family="Times,serif" font-size="14.00">완료 확인</text> </g> <!-- Python_func --> <g id="node6" class="node">
<title>
Python_func
</title>
<polygon fill="none" stroke="black" points="288.34,-268 201.24,-268 201.24,-232 288.34,-232 288.34,-268"></polygon> <text text-anchor="middle" x="244.79" y="-245.8" font-family="Times,serif" font-size="14.00">Python_func</text> </g> <!-- airflow&#45;&gt;Python_func --> <g id="edge5" class="edge">
<title>
airflow-&gt;Python_func
</title>
<path fill="none" stroke="black" d="M86.27,-191.56C94.3,-197.12 103.16,-202.67 111.85,-207 136.87,-219.46 166.31,-229.46 191.02,-236.67"></path> <polygon fill="black" stroke="black" points="190.37,-240.12 200.95,-239.49 192.28,-233.39 190.37,-240.12"></polygon> <text text-anchor="middle" x="145.87" y="-236.2" font-family="Times,serif" font-size="14.00">Python func</text> </g> <!-- Spark --> <g id="node7" class="node">
<title>
Spark
</title>
<polygon fill="none" stroke="black" points="271.79,-322 217.79,-322 217.79,-286 271.79,-286 271.79,-322"></polygon> <text text-anchor="middle" x="244.79" y="-299.8" font-family="Times,serif" font-size="14.00">Spark</text> </g> <!-- airflow&#45;&gt;Spark --> <g id="edge6" class="edge">
<title>
airflow-&gt;Spark
</title>
<path fill="none" stroke="black" d="M72.53,-203.21C82.03,-220.18 95.35,-239.69 111.85,-253 139.93,-275.66 179.25,-289.11 207.65,-296.46"></path> <polygon fill="black" stroke="black" points="207.04,-299.91 217.58,-298.89 208.7,-293.11 207.04,-299.91"></polygon> <text text-anchor="middle" x="145.87" y="-292.2" font-family="Times,serif" font-size="14.00">상태 확인</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>bigquerty: google에 있는 data 저장소 서비스</li>
<li>외부 솔루션에 작업이 제출되어 완료될 때까지 Airflow의 Slot은 점유됨</li>
</ul>
<p><img src="kmink3225.netlify.app/images/airflow/triggerer.PNG" class="img-fluid"> * airflow 의 task가 들어왔을 때 task는 airflow worker의 slot을 차지하게 됨 * 후에, 작업 대상에 작업을 제출하고 작업이 시작된다 * 작업대상: python function 또는 postgres, HDFS, Spark와 같은 외부 솔루션 * 작업이 진행되면 airflow는 작업이 완료 되었는지 작업상태를 polling 하면서 지속적으로 체크 * 작업 처리가 진행되는 동안 task는 차지했던 worker의 slot을 게속해서 차지한다. * task가 많아지면 airflow의 slot이 부족할 수도 있는 상황이 있음 * 그럼 작업 처리동안 task는 slot 점유할 필요는 없지 않나라는 생각이 들 수 있다. * triggerer가 이 문제를 해결 * 작업을 제출하고 Task는 작업 처리가 시작될 때 Slot을 비우고 작업 상태 Polling 작업은 Triggerer 에게 위임 * 작업 처리 시작 전까지는 slot을 점유 * 작업상태를 끊임없이 polling하면서 확인해야하는데 triggerer를 이용하면 이 작업이 없어짐 * triggerer는 작업 처리 완료가 되는 event (작업 완료 callback message를 수신)를 받아 scheduluer container에게 message를 전달하고 scheduler는 task가 다시 비워진 slot을 점유하게 한다.</p>
<p><img src="kmink3225.netlify.app/images/airflow/triggerer2.PNG" class="img-fluid"></p>
</section>
<section id="triggerer란" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="triggerer란"><span class="header-section-number">7.2</span> Triggerer란</h2>
<ul>
<li>워커를 대신하여 작업 상태 완료를 수신하고, 그때까지 Slot을 비워둘 수 있도록 해주는 Airflow의 서비스
<ul>
<li>airflow service: 스케줄러, 워커 같은 요소 중 하나</li>
</ul></li>
<li>Python의 비동기 작업 라이브러리인 asyncio를 이용하여 작업상태 수신
<ul>
<li>사용 조건: Airflow 2.2 부터 &amp; Python 3.7부터 사용 가능</li>
</ul></li>
<li>어떻게 사용하나?
<ul>
<li>Deferrable Operator 이용하여 Task 생성</li>
<li>기본 Operator 중에서는 아래의 Sensor 종류만 사용 가능
<ul>
<li>TimeSensorAsync</li>
<li>DateTimeSensorAsync</li>
<li>TimeDeltaSensorAsync</li>
</ul></li>
<li>끝에 Async 가 붙은 오퍼레이터를 Deferrable Operator라 부르며 Triggerer에게 작업 완료 수신을 맡기는 오퍼레이터라는 의미</li>
</ul></li>
</ul>
</section>
<section id="triggerer-실습" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="triggerer-실습"><span class="header-section-number">7.3</span> Triggerer 실습</h2>
<p>비교 실험</p>
<ul>
<li>dags/dags_time_sensor.py (함수를 그냥 짬)</li>
<li>dags/dags_time_sensor_with_async.py (asyncio library 이용)</li>
</ul>
</section>
<section id="dag-full-example-1" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="dag-full-example-1"><span class="header-section-number">7.4</span> Dag Full Example</h2>
<ul>
<li>dag_time_sensor.py</li>
</ul>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1">import pendulum</span>
<span id="cb19-2">from airflow import DAG</span>
<span id="cb19-3">from airflow.sensors.date_time import DateTimeSensor</span>
<span id="cb19-4"></span>
<span id="cb19-5">with DAG(</span>
<span id="cb19-6">    dag_id="dags_time_sensor",</span>
<span id="cb19-7">    # 1시간 차이</span>
<span id="cb19-8">    start_date=pendulum.datetime(2023, 5, 1, 0, 0, 0), #5월1일 0시</span>
<span id="cb19-9">    end_date=pendulum.datetime(2023, 5, 1, 1, 0, 0), #5월1일 1시</span>
<span id="cb19-10">    schedule="*/10 * * * *", #10 분마다 1시간안에 7번 돌게함</span>
<span id="cb19-11">    # 00분, 10분, 20분, 30분, 40분, 50분, 60분 총 7번</span>
<span id="cb19-12">    catchup=True, # catchup을 true이기 때문에 작업 상태bar 7개가 동시에 뜸</span>
<span id="cb19-13">    # airflow ui의 작업 pool을 보면 시작할 때 7개를 모두 차지 하도록 나옴</span>
<span id="cb19-14">) as dag:</span>
<span id="cb19-15">    # DateTimeSensor는 목표로 하는 시간까지 기다리는 sensor</span>
<span id="cb19-16">    sync_sensor = DateTimeSensor(</span>
<span id="cb19-17">        task_id="sync_sensor",</span>
<span id="cb19-18">        # 현재 시간 + 5분</span>
<span id="cb19-19">        target_time="""{{ macros.datetime.utcnow() + macros.timedelta(minutes=5) }}""",</span>
<span id="cb19-20">    )</span></code></pre></div>
<ul>
<li>dags_time_sensor_with_async.py</li>
</ul>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1">import pendulum</span>
<span id="cb20-2">from airflow import DAG</span>
<span id="cb20-3">from airflow.sensors.date_time import DateTimeSensorAsync</span>
<span id="cb20-4"></span>
<span id="cb20-5">with DAG(</span>
<span id="cb20-6">    dag_id="dags_time_sensor_with_async",</span>
<span id="cb20-7">    start_date=pendulum.datetime(2023, 5, 1, 0, 0, 0),</span>
<span id="cb20-8">    end_date=pendulum.datetime(2023, 5, 1, 1, 0, 0),</span>
<span id="cb20-9">    schedule="*/10 * * * *",</span>
<span id="cb20-10">    catchup=True,</span>
<span id="cb20-11">) as dag:</span>
<span id="cb20-12">    sync_sensor = DateTimeSensorAsync(</span>
<span id="cb20-13">        task_id="sync_sensor",</span>
<span id="cb20-14">        target_time="""{{ macros.datetime.utcnow() + macros.timedelta(minutes=5) }}""",</span>
<span id="cb20-15">    )</span></code></pre></div>
<ul>
<li>airflow ui&gt;&gt; browse &gt;&gt; triggers 에서 trigger가 작업하는 대상 목록을 보여줌</li>
<li>trigger는 triggerer에게 작업을 맡길 event 또는 ticket이라고 생각하면 됨</li>
<li>triggerer id는 ticket id</li>
<li>defered status 는 보라색을 띄고 이 상태에서는 worker slot을 차지 않는 상태이다.</li>
</ul>
</section>
<section id="요약" class="level2" data-number="7.5">
<h2 data-number="7.5" class="anchored" data-anchor-id="요약"><span class="header-section-number">7.5</span> 요약</h2>
<ul>
<li>끝에 Async가 붙은 오퍼레이터는 Deferrable Operator 라 부르며 Triggerer에 의해 Polling이 수행되는 오퍼레이터임을 의미</li>
<li>Deferrable Operator는 작업 제출 후 Slot을 차지하지 않으며 Polling 내역에 대해 Trigger 제출 후 deferred 상태가 됨.</li>
<li>Triggerer는 제출된 Trigger 내역을 보고 작업 완료시(조건 만족시) Worker에게 알려줘 작업이 마무리될 수 있도록 함.</li>
</ul>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="go-to-blog-content-list" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/11.airflow_functions.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Template Variabler</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/12.dashboarding.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="r-shiny-container-올리기" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> R shiny Container 올리기</h1>
<section id="r-shiny" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="r-shiny"><span class="header-section-number">1.1</span> R shiny</h2>
<ul>
<li>R로 대화형 웹을 만들 수 있게 해주는 R의 라이브러리 중 하나</li>
<li>웹을 띄우기 위해선 세 가지 파일을 작성해야 함.
<ul>
<li>ui.R: 화면에 보여지는 UI에 대한 내용 (UI layout 정의)</li>
<li>server.R : ui.R 에서 입력을 받아 처리한 데이터를 ui.R 로 내보내는 내용. (데이터 처리 logic 정의)</li>
<li>global.R: shiny에서 사용되는 전역 객체를 정의. 주로 라이브러리 임포트 등 수행. ui.R, server.R 에서 모두 사용됨</li>
</ul></li>
</ul>
</section>
<section id="r-shiny-컨테이너-올리기" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="r-shiny-컨테이너-올리기"><span class="header-section-number">1.2</span> R shiny 컨테이너 올리기</h2>
<ul>
<li>docker-compose.yaml 파일 수정하기</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">services:</span></span>
<span id="cb1-2">  rshiny_custom: # custom image 다른 이름 붙여도 상관없음</span>
<span id="cb1-3">    image: rocker/shiny-verse:latest</span>
<span id="cb1-4">    networks:</span>
<span id="cb1-5">      network_custom:</span>
<span id="cb1-6">        ipv4_address: 172.28.0.2</span>
<span id="cb1-7">  ports:</span>
<span id="cb1-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>3838:3838</span></code></pre></div>
<ul>
<li><p><code>sudo docker compose up</code> 실행하면 rocker/shiny-verse:latest 이미지 자동으로 다운 받음</p></li>
<li><p>Docker compose 재기동 후 localhost:3838 접속</p></li>
</ul>
</section>
</section>
<section id="r-shiny-components" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> R shiny Components</h1>
<section id="rshiny-구성" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="rshiny-구성"><span class="header-section-number">2.1</span> Rshiny 구성</h2>
<ul>
<li>Rshiny로 웹을 띄우기 위해선 세 가지 파일을 작성해야 함.
<ul>
<li>ui.R : 화면에 보여지는 UI에 대한 내용</li>
<li>server.R : ui.R 에서 입력을 받아 처리한 데이터를 ui.R 로 내보내는 내용</li>
<li>global.R : shiny에서 사용되는 전역 객체를 정의. 주로 라이브러리 임포트 등 수행. ui.R, server.R 에서 모두 사용됨</li>
</ul></li>
<li>3가지 파일 작성 후 Rshiny 도커 이미지 Customizing 필요</li>
</ul>
<ol type="1">
<li>디렉토리 구조 및 파일 위치</li>
</ol>
<ul>
<li>$home/airflow/custom_image <img src="kmink3225.netlify.app/images/airflow/rshiny_path.PNG" class="img-fluid"></li>
</ul>
<ol start="2" type="1">
<li>global.R 작성</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">if (!require(shiny)) {install.packages("shiny"); library(shiny)}</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># DBI 와 glue는 DB에서 data 추출시에 사용하는 library</span></span>
<span id="cb2-3">if (!require(DBI)) {install.packages("DBI"); library(DBI)} </span>
<span id="cb2-4">if (!require(glue)) {install.packages("glue"); library(glue)}</span>
<span id="cb2-5">if (!require(ggplot2)) {install.packages("ggplot2"); library(ggplot2)}</span>
<span id="cb2-6">source("./ui.R", local = TRUE)</span>
<span id="cb2-7">source("./server.R", local = TRUE)</span>
<span id="cb2-8">shinyApp(ui, server)</span></code></pre></div>
<ol start="3" type="1">
<li>ui.R 작성</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">ui &lt;- fluidPage(</span>
<span id="cb3-2">    tags$h1("corona19"),</span>
<span id="cb3-3">    sidebarPanel(</span>
<span id="cb3-4">    # dateRangeInput: date 구간을 from/to 형식(form)으로 입력할 수 있는 형태</span>
<span id="cb3-5">        dateRangeInput("dates", # 형식(form) id 값</span>
<span id="cb3-6">                   "Date range", # 형식이 화면에 표시되는 이름</span>
<span id="cb3-7">                   start = as.Date("2023-01-01"), # 화면에 기본적으로 보여질 날짜</span>
<span id="cb3-8">                   end = Sys.Date()),</span>
<span id="cb3-9">        br(),</span>
<span id="cb3-10">        br()</span>
<span id="cb3-11">    ),</span>
<span id="cb3-12">  # form을 여러개 나열하고 싶으면 sidebarPanel() 어러개 넣으면 됨</span>
<span id="cb3-13"></span>
<span id="cb3-14">  # mainPanel 역시 집어 넣을 수 있는 객체 (형식 또는 form)가 정해져 있음</span>
<span id="cb3-15">  # 대표적으로 자주 사용되는 객체: plotOUtput,imageOutput, tableOutput 등</span>
<span id="cb3-16">    mainPanel(plotOutput("daily_confirmed"), plotOutput("total_confirmed"))</span>
<span id="cb3-17">  # daily_confirmed: 1번째 plotOutput의 id</span>
<span id="cb3-18">  # total_confirmed: 2번째 plotOutput의 id</span>
<span id="cb3-19">)</span></code></pre></div>
<p><img src="kmink3225.netlify.app/images/airflow/rshiny_layout.PNG" class="img-fluid"></p>
<ol start="4" type="1">
<li>server.R 작성</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">server &lt;- function(input, output){ # 무조건 오는 내용</span>
<span id="cb4-2">    selected_data &lt;- reactive({</span>
<span id="cb4-3">            # Connect to the DB</span>
<span id="cb4-4">            conn &lt;- dbConnect(</span>
<span id="cb4-5">                  RPostgres::Postgres(),</span>
<span id="cb4-6">                  dbname = "kmkim",</span>
<span id="cb4-7">                  host = "172.28.0.3",</span>
<span id="cb4-8">                  port = "5432",</span>
<span id="cb4-9">                  user = "kmkim",</span>
<span id="cb4-10">                  password = "kmkim"</span>
<span id="cb4-11">        )</span>
<span id="cb4-12">            # Get the data</span>
<span id="cb4-13">            corona &lt;- dbGetQuery(conn, glue("SELECT </span>
<span id="cb4-14">                         to_date(substring(\"S_DT\",1,10),'YYYY.MM.DD') as s_dt</span>
<span id="cb4-15">                            ,\"N_HJ\"::float as n_hj</span>
<span id="cb4-16">                        ,\"T_HJ\" as t_hj</span>
<span id="cb4-17">                        FROM \"TbCorona19CountStatus_bulk2\" </span>
<span id="cb4-18">                        WHERE to_date(substring(\"S_DT\",1,10),'YYYY.MM.DD') BETWEEN '{format(input$dates<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)}' AND '{format(input$dates<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)}'"))</span>
<span id="cb4-19">            # Disconnect from the DB</span>
<span id="cb4-20">            dbDisconnect(conn)</span>
<span id="cb4-21">            # Convert to data.frame</span>
<span id="cb4-22">            data.frame(corona)</span>
<span id="cb4-23">    })</span>
<span id="cb4-24">    </span>
<span id="cb4-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    output$daily_confirmed &lt;- renderPlot({</span></span>
<span id="cb4-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ggplot(data=selected_data(), aes(x=s_dt, y=n_hj)) + </span></span>
<span id="cb4-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            geom_line(color='blue', linewidth = 1) + </span></span>
<span id="cb4-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            geom_point(color='red') + </span></span>
<span id="cb4-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            geom_smooth(method='lm') +</span></span>
<span id="cb4-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            ggtitle("Daily confirmed cases") +</span></span>
<span id="cb4-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            labs(x='Date',y='Daily confirmed cases')</span></span>
<span id="cb4-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    })</span></span>
<span id="cb4-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    output$total_confirmed &lt;- renderPlot({</span></span>
<span id="cb4-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               ggplot(data=selected_data(), aes(x=s_dt, y=t_hj)) +</span></span>
<span id="cb4-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               geom_line(color='blue', linewidth = 1) +</span></span>
<span id="cb4-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               geom_point(color='red') +</span></span>
<span id="cb4-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               geom_smooth(method='lm') +</span></span>
<span id="cb4-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           ggtitle("Total confirmed cases") +</span></span>
<span id="cb4-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               labs(x='Date',y='Total confirmed cases')</span></span>
<span id="cb4-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        })</span></span>
<span id="cb4-41"></span>
<span id="cb4-42">}</span></code></pre></div>
<ul>
<li>selected_data 는 ui.R에서 사용자에 의해 입력 받은 data를 처리한 결과값이 할당된 변수</li>
<li>output<img src="https://latex.codecogs.com/png.latex?daily_confirmed%20%EC%9D%80%20server.R%EC%97%90%EC%84%9C%20ui.R%EB%A1%9C%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC%20%EB%8B%A4%EC%8B%9C%20%EB%82%B4%EB%B3%B4%EB%82%B4%EB%8A%94%20%EC%97%AD%ED%95%A0%EC%9D%84%20%ED%95%A8%20*%20daily_confirmed%20%EB%8A%94%20%EA%B0%9D%EC%B2%B4%EC%9D%98%20id%20*%20output">daily_confirmed: renderPlot의 처리 결과를 daily_confirmed에 보내는 과정 ## Custom 도커 이미지 만들기</li>
</ul>
<pre class="docker"><code>FROM rocker/shiny-verse:latest
COPY . /
WORKDIR /
EXPOSE 3838
CMD R -e 'shiny::runApp("global.R", port=3838, host="0.0.0.0")'
</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">sudo docker build -t rshiny-custom</span></code></pre></div>
</section>
<section id="custom-컨테이너-올리기" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="custom-컨테이너-올리기"><span class="header-section-number">2.2</span> Custom 컨테이너 올리기</h2>
<ul>
<li>docker compose.yaml 파일 수정하고 서비스 up</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">services</span>
<span id="cb7-2">  rshiny_custom</span>
<span id="cb7-3">    image: rshiny custom # 기존 rocker/shiny verse:latest 변경</span>
<span id="cb7-4">    networks:</span>
<span id="cb7-5">      network_custom:</span>
<span id="cb7-6">        ipv4_address: 172.28.0.2</span>
<span id="cb7-7">    ports:</span>
<span id="cb7-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>3838:3838</span>
<span id="cb7-9"></span></code></pre></div>
</section>
</section>
<section id="custom-operator-개발" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Custom Operator 개발</h1>
<section id="custom-operator-개발-1" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="custom-operator-개발-1"><span class="header-section-number">3.1</span> Custom Operator 개발</h2>
<ul>
<li>무엇을 만들것인가
<ul>
<li>현재는 서울시 공공데이터 API 를 통해 CSV 로 저장하는 오퍼레이터만 존재</li>
<li>PostgresQL 데이터베이스로 바로 Insert 하는 오퍼레이터가 있다면</li>
</ul></li>
<li>오퍼레이터 개발 목표
<ul>
<li>서울시 공공데이터 API 조회 후 데이터를 Postgres DB 로 바로 저장하는 오퍼레이 터</li>
</ul></li>
</ul>
</section>
<section id="dag-full-example" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="dag-full-example"><span class="header-section-number">3.2</span> DAG Full Example</h2>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="go-to-blog-content-list" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a><br>
<a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/12.dashboarding.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
