---
title: "Data Governance Study - Data Model (1)"
subtitle: "데이터 모델링 기초: 데이터베이스"
description: "Data Modeling을 위한 데이터 베이스 기초 지식"
author: Kwangmin Kim
date: 2024-08-05
format: 
  html:
    toc: true  
    code-fold: true
    code-copy: true
    code-overflow: wrap
    number-sections: true
    number-depth: 3
    grid:
      sidebar-width: 200px
      body-width: 1150px
      margin-width: 300px
---

## 데이터베이스 (Database, DB)

* 쉽게 말해, 데이터베이스는 데이터 저장소
* 어렵게 말해, 일정한 체계 속에 저장된 **데이터** 및 데이터간 **관계**의 집합
    * 데이터는 보통 table(표) 단위로 저장됨
    * DB는 보통 여러 table을 가지고 있을 수 있음

### 데이터베이스의 중요성

* 현대 사회는 거의 모든 전기 기기에 DB가 있기때문에 데이터를 효율적으로 관리하려면 DB 시스템이 필요함
* 하지만, 모든 상황에 DB가 필요한건 아님 
* 언제 필요함? **대용량의 데이터를 다룰 때**
* 예
    * 입금 출금 이체 등 은행 거래 (인터넷 뱅킹 포함) : Data 필요, 대용량 Data, 많은 사용자 (**DB 필요**)
    * 호텔 객실 예약 관리는 기록이 필요함 : Data 필요, 대용량 Data, 많은 사용자 (**DB 필요**)
    * 신호등의 램프 제어: 소규모 Data 필요 (신호의 상태를 기억하고 있어야 다음 신호 상태를 결정할 수 있음, DB 불필요)
        * 알고리즘으로 관리할 수 있는 프로그램 회로가 기능 대체 가능. 실질적으론 DB가 필요하지 않음
    * 온라인 쇼핑몰에서의 물품 구매: Data 필요, 대용량 Data, 많은 사용자 (**DB 필요**)
    * 전자식 개폐장치의 비밀번호 관리: Data 필요 (한명이 한번에 번호를 눌러 정답과 비교. DB가 필요하지 않음 , DB 불필요)
        * 입력받은 번호를 저장해놔야 정답 비밀번호와 비교 가능 하지만 이것 역시 알고리즘 프로그램 회로로 대체 가능 
 
### DB 시스템의 특성

* 데이터베이스 자체도 여러개 만들 수 있음
* 최초 적재 (loading): 서비스를 위한 초기 대량 데이터 적재 
* 데이터 축적 (Interaction): 이벤트 발생에 따른 잦은 변경 
* 대용량의 데이터를 다룰때만 DB가 필요
    - **1) 많은 사용자들이 2)원하는 순간 3)데이터에 접근하거나 4)동시 접근 할때 관리 가능**
    - 대용량의 데이터가 체계적으로 조직화되어 있어야함
    - 원하는 조건에 맞는 데이터에 접근가능
* 데이터베이스 시스템

```{dot}
digraph G {
	fontname="Helvetica,Arial,sans-serif"
	node [fontname="Helvetica,Arial,sans-serif"]
	edge [fontname="Helvetica,Arial,sans-serif"]

    a0 [label="Users/Programmers"];
    

	subgraph cluster_0 {
		style=filled;
		node [style=filled,color=white];
		a1 [label="Application Programs/Queries"];
		label = "Database System";

        subgraph cluster_1 {
		node [style=filled];
		a2 [label="Software to Process\n(Programs Queries)"];
        a3 [label="Software to Access\n(Stored Data)"];
        label = "DBMS Software";
	    }
	}

	a4 [label="Stored Database Definition\n(Metadata)"];
    a5 [label="Stored Database"];

	a0 -> a1 -> a2 -> a3;
    a3 -> a4[dir=both];
    a3 -> a5[dir=both];
}

```

### 테이블 (Table)

* table에는 row(행)와 column(열) 이 있다.
* row: table에 대한 체계적인 정보가 set로 구성되어 있는 단위, 개체
* column: table이 갖고 있는 속성
* 예: 학생 table
    * row: 각 각의 학생 개체 (김철수 개체 , 이영희 개체 등)이 갖고 있는 정보
        * 행 (Row): SQL 등에서 실제로 데이터를 다룰 때 자주 사용되는 용어
        * 레코드 (Record): 가장 일반적으로 사용되는 용어, 하나의 완전한 데이터 항목을 나타냄
        * 튜플 (Tuple): 관계형 데이터베이스 이론에서 주로 사용되는 용어, 수학적인 의미에서 속성들의 순서화된 집합을 나타냄
        * 엔티티 (Entity): 주로 데이터 모델링 단계에서 사용되는 용어, 실세계의 개체나 개념을 나타냄.
        * 인스턴스 (Instance): 특정 엔티티의 구체적인 예를 나타냄, 객체 지향 개념에서 차용된 용어.
    * column: 학생(table)이 갖고 있는 속성
        * 열 (Column): SQL 등에서 실제로 데이터를 다룰 때 자주 사용되는 용어, 테이블의 수직적 구성 요소를 지칭
        * 필드 (Field): 가장 일반적으로 사용되는 용어, 특정 유형의 데이터를 저장하는 테이블의 한 부분을 나타냄
        * 속성 (Attribute): 데이터 모델링과 관계형 데이터베이스 이론에서 주로 사용되는 용어, 엔티티의 특성이나 성질을 나타냄
        * 도메인 (Domain): 특정 속성이 가질 수 있는 모든 가능한 값의 집합(or 정의역)을 의미하는데 때로는 열 자체를 지칭하는 데 사용되기도 한다.
        * 변수 (Variable): 프로그래밍 관점에서 데이터베이스를 다룰 때 사용되는 용어

    | 학번 | 이름 | 전공 | 성별 |
    |------|------|------|------|
    | 20240001 | 김철수 | 컴퓨터공학 | 남 |
    | 20240002 | 이영희 | 경영학 | 여 |
    | 20240003 | 박민준 | 생물학 | 남 |
    | 20240004 | 정수연 | 물리학 | 여 |
    | 20240005 | 강지원 | 심리학 | 여 |


### 질의 (Queries)

* DB를 다루는 언어
* 대표적인 예: SQL
    * 다른 언어에서 SQL문을 string 의 형태로 DB에 접근할수도 있고 따로 SQL을 써서 접근할 수 있음
    * SQL 질의를 입력하면 (=SQL 쿼리을 날리면) 쿼리문이 stored database definition에서 DB구조를 파악한 후 Stored DB에 접근해서 쿼리문에 대응되는 원하는 data를 가지고와서 사용자에게 전달
* DBMS: DB를 다루는 프로그램
    * DataBase Management System (DB 관리 시스템)
    * 사용자가 DB에 접근할 수 있도록 지원해주는 프로그램의 집합 (모듈의 집합)
        * 사용자 ID생성, 권한부여, 보안 관리, 동시성 제어, 사용자의 쿼리문을 처리 등의 모듈의 집합
    * Business 요구사항에 맞는 DBMS를 선택해야함
    * DBMS종류: 오라클, MS-SQL, MS-Access, SQLite, MySQL, MariaDB, SQL Server, SQLite, PostgreSQL, etc.
    * DBMS 종류마다 시스템이 다르긴 하지만 모두 SQL 로 다룰 수 있다.
    * SQL은 국제 표준이 존재하기 때문에 국제 표준을 습득하면 모든 DBMS를 어느 정도 사용할 수 있다. (하지만, 각 DBMS마다 고유의 문법이 있어 약간 씩 다름)

### Database Example

* 학적 관리
    * Course Table
        * attribute: course_name, credit_hours, department
        
        | course_name | credit_hours | department |
        |-------------|--------------|------------|
        | Introduction to Computer Science | 3 | Computer Science |
        | Calculus I | 4 | Mathematics |
        | World History | 3 | History |
        | Organic Chemistry | 4 | Chemistry |
    * Student Table
        * attribute: name, student_number
        
        | name | student_number |
        |------|----------------|
        | John Smith | 20240001 |
        | Emma Johnson | 20240002 |
        | Michael Lee | 20240003 |
        | Sophia Chen | 20240004 |

    * Section Table
        * attribute: section_ideintifier, course_number, semester, year, instructor
        
        | section_identifier | course_number | semester | year | instructor |
        |--------------------|---------------|----------|------|------------|
        | CS101-1 | CS101 | Fall | 2023 | Dr. Alan Turing |
        | MATH201-2 | MATH201 | Spring | 2023 | Dr. Katherine Johnson |
        | HIST100-3 | HIST100 | Fall | 2023 | Prof. Howard Zinn |
        | CHEM302-1 | CHEM302 | Spring | 2023 | Dr. Marie Curie |

    * Grade Report Table
        * attribute: student_number, section_identifier, grade

        | student_number | section_identifier | grade |
        |----------------|---------------------|-------|
        | 20240001 | CS101-1 | A |
        | 20240002 | MATH201-2 | B+ |
        | 20240003 | HIST100-3 | A- |
        | 20240004 | CHEM302-1 | B |

### Schemas vs ERD vs Instances

* DB schema
    - DB 구조(table 종류), 데이터 타입, 그리고 제약 조건에 대한 명세
    - 테이블, 필드, 관계, 뷰, 인덱스 등 데이터베이스 객체들의 논리적 구조를 설명
    - 데이터 베이스 설계 단계에서 명시 되며 자주 변경되지 않음
    - 실제 데이터베이스 시스템에서 구현될 수 있는 형태로 정의된다.
    - SQL DDL(Data Definition Language)로 표현될 수 있다.

        ```makrdown
        -- Course 테이블 생성
        CREATE TABLE Course (
            course_id VARCHAR(10) PRIMARY KEY,
            course_name VARCHAR(100) NOT NULL,
            credit_hours INT NOT NULL,
            department VARCHAR(50) NOT NULL
        );

        -- Student 테이블 생성
        CREATE TABLE Student (
            student_number VARCHAR(8) PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            date_of_birth DATE,
            major VARCHAR(50)
        );

        -- Section 테이블 생성
        CREATE TABLE Section (
            section_id VARCHAR(15) PRIMARY KEY,
            course_id VARCHAR(10) NOT NULL,
            semester VARCHAR(10) NOT NULL,
            year INT NOT NULL,
            instructor VARCHAR(100),
            FOREIGN KEY (course_id) REFERENCES Course(course_id)
        );

        -- Grade_Report 테이블 생성
        CREATE TABLE Grade_Report (
            student_number VARCHAR(8),
            section_id VARCHAR(15),
            grade CHAR(2),
            PRIMARY KEY (student_number, section_id),
            FOREIGN KEY (student_number) REFERENCES Student(student_number),
            FOREIGN KEY (section_id) REFERENCES Section(section_id)
        );
        ```
    - DB schema를 만드는 과정을 Data Modeling 또는 DB design이라고 부름 (늬앙스 차이가있음)
        * Data Modeling
            - 현실 세계의 데이터를 추상화하여 컴퓨터 세계의 데이터로 표현하는 과정
            - 특징 (데이터 거버넌스와 상대적으로 더 밀접한 관련이 있음)
                - 주로 **개념적, 논리적 수준**에서 이루어짐
                - 더 추상적이고 개념적인 수준
                - 비즈니스 요구사항을 데이터 구조로 변환
                - ERD(Entity-Relationship Diagram) 등을 사용하여 시각화
            - 결과물: ERD, 개념적/논리적 데이터 모델
            - 단계: 프로젝트 초기 단계
                - 개념적 모델링: 핵심 엔티티와 관계 식별
                - 논리적 모델링: 속성 정의, 정규화 수행
            - 목적 
                - 비즈니스 프로세스와 규칙을 이해하고 표현
                - 데이터의 구조와 관계를 명확히 정의
        * DB Design
            - 데이터 모델을 실제 데이터베이스 구조로 변환하는 과정
            - 특징
                - **논리적, 물리적 수준**에서 이루어짐
                - 더 구체적이고 구현에 가까운 수준
                - 특정 DBMS와 하드웨어 환경을 고려
                - SQL DDL 등을 사용하여 실제 스키마 생성
            - 결과물: 데이터베이스 스키마, 테이블 정의, 인덱스 구조 등
            - 단계: Data Modeling 이후, 실제 구현 전 단계
                - 논리적 설계: 데이터 모델을 DBMS에 독립적인 형태로 변환
                - 물리적 설계: 특정 DBMS에 맞는 물리적 구조 설계 (인덱스, 파티션 등)
            - 목적
                - 효율적인 데이터 저장, 접근, 관리 구조 설계
                - 성능, 보안, 확장성 등을 고려한 최적화
* ERD (Entity-Relationship Diagram)
    - 데이터베이스의 구조를 시각적으로 표현한 다이어그램이다.
    - Entity(개체), 속성 (Attribute), 관계(Relationship)를 그래픽 요소로 나타낸다.
    - Entity(개체) 
        - 현실 세계에서 독립적으로 존재하는 객체나 개념을 나타냄
        - 데이터 모델링 단계에서 사용되는 추상적인 개념
        - 특징
            - 보통 명사로 표현 (예: 학생, 강의, 교수)
            - 속성(Attribute)을 가진다
            - ERD에서 사각형으로 표현된다.
            - 일반적으로 ERD의 엔티티는 데이터베이스 설계 과정에서 테이블로 변환된다.
            - 하나의 엔티티는 대부분 하나의 테이블로 매핑된다.
    - 예시
      [ERD Example - Stack overflow by snowflake](../../../../images/governance/erd_example.PNG)
      ![link](https://stackoverflow.com/questions/42445390/database-design-erd-diagram-verification)  
* DB Instance
    - 특정 시점에 DB에 실제로 저장되어 있는 데이터로 자주 변동된다.