---
title: "Data Governance Study - Data Model (2)"
subtitle: "데이터 모델링 기초: SQL 개념"
description: "Data Modeling을 위한 데이터 베이스 기초 지식"
author: Kwangmin Kim
date: 2024-08-06
format: 
  html:
    toc: true  
    code-fold: true
    code-copy: true
    code-overflow: wrap
    number-sections: true
    number-depth: 3
    grid:
      sidebar-width: 200px
      body-width: 1150px
      margin-width: 300px
---

## SQL (Structured Query Language)

* SQL은 영문명을 풀이하면 구조를 갖는 질의 언어라는 의미 
* 단순하게 질의만을 수행하는 것이 아니라 데이터베이스의 모든 작업을 통제하는 비절차적(Non-procedural) 언어
* 다시 말해, 비절차적 언어는 사용자가 "무엇을" 원하는지만 명시하고, "어떻게" 그것을 수행할지는 시스템에 맡기는 프로그래밍 방식이다.
    * SQL의 비절차적 특성
        * 사용자는 원하는 결과만 명시 (예: 어떤 데이터를 조회하고 싶은지).
        * 데이터베이스 시스템이 그 결과를 얻기 위한 최적의 방법을 결정
    * 절차적 언어와의 차이
        * 절차적 언어: 모든 단계를 순서대로 명시해야 함
        * 비절차적 언어: 원하는 결과만 명시하면 됨
    * 예시: SQL 쿼리 
        ```markdown
        SELECT * FROM Customers WHERE City = 'London';
        ```
        * 사용자: London에 있는 모든 고객 정보를 원한다고만 명시
        * 시스템: 어떤 인덱스를 사용할지, 어떤 순서로 데이터를 읽을지 등을 결정
    * 장점
        * 사용 편의성: 상세한 기술 지식 없이도 사용 가능
        * 최적화: 시스템이 최적의 실행 계획을 선택
        * 높은 생산성: 적은 코드로 복잡한 작업 수행 가능
    * 특징
        * 데이터베이스 작업의 효율성 증대
        * 사용자는 데이터 자체에 집중 가능
        * 시스템의 내부 변경에도 쿼리는 그대로 사용 가능

### Database Example

* 학적 관리
    * Course Table
        * attribute: course_name, credit_hours, department
        
        | course_name | credit_hours | department |
        |-------------|--------------|------------|
        | Introduction to Computer Science | 3 | Computer Science |
        | Calculus I | 4 | Mathematics |
        | World History | 3 | History |
        | Organic Chemistry | 4 | Chemistry |
    * Student Table
        * attribute: name, student_number
        
        | name | student_number |
        |------|----------------|
        | John Smith | 20240001 |
        | Emma Johnson | 20240002 |
        | Michael Lee | 20240003 |
        | Sophia Chen | 20240004 |

    * Section Table
        * attribute: section_ideintifier, course_number, semester, year, instructor
        
        | section_identifier | course_number | semester | year | instructor |
        |--------------------|---------------|----------|------|------------|
        | CS101-1 | CS101 | Fall | 2023 | Dr. Alan Turing |
        | MATH201-2 | MATH201 | Spring | 2023 | Dr. Katherine Johnson |
        | HIST100-3 | HIST100 | Fall | 2023 | Prof. Howard Zinn |
        | CHEM302-1 | CHEM302 | Spring | 2023 | Dr. Marie Curie |

    * Grade Report Table
        * attribute: student_number, section_identifier, grade

        | student_number | section_identifier | grade |
        |----------------|---------------------|-------|
        | 20240001 | CS101-1 | A |
        | 20240002 | MATH201-2 | B+ |
        | 20240003 | HIST100-3 | A- |
        | 20240004 | CHEM302-1 | B |

* 쿼리(질의) 예
    * calculus 1 course의 section을 하나라도 수강한 학생을 찾으시오
        * 질의의 정보를 각 table을  통해 추적이 가능해야 한다.
        * 결과적으로 course table >> section table >> grade_report table >> student table 순으로 추적함 (이것이 join의 원리)
        
        ```markdown
        SELECT DISTINCT s.student_number, s.name
            FROM Course c
            JOIN Section sec ON c.course_name = sec.course_number
            JOIN Grade_Report gr ON sec.section_identifier = gr.section_identifier
            JOIN Student s ON gr.student_number = s.student_number
            WHERE c.course_name = 'Calculus I';
        ```    

    * MATH201-2, student 20240001의 grade를 B로 수정하시오

        ```markdown
        UPDATE Grade_Report
        SET grade = 'B'
        WHERE section_identifier = 'MATH201-2'
          AND student_number = '20240001';
        ```
    * 위 처럼 table의 추적이 가능하게 하려면 DB 설계를 잘해야한다
        * 설계: table의 정의를 잘 내려야 하고 table들간 관계를 잘 설정 해야한다.


### Schemas vs Instances

- DB schema
    - DB 구조(table 종류), 데이터 타입, 그리고 제약 조건에 대한 명세
    - 데이터 베이스 설계 단계에서 명시 되며 자주 변경되지 않음
    - DB schema를 만드는 과정을 Data Modeling 또는 DB design이라고 부름 (늬앙스 차이가있음)