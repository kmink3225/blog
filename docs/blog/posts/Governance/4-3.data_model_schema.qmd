---
title: "Data Governance Study - Data Model (2)"
subtitle: "데이터 모델링 기초: Schema"
description: "Data Modeling을 위한 데이터 베이스 기초 지식"
author: Kwangmin Kim
date: 2024-08-05
format: 
  html:
    toc: true  
    code-fold: true
    code-copy: true
    code-overflow: wrap
    number-sections: true
    number-depth: 3
    grid:
      sidebar-width: 200px
      body-width: 1150px
      margin-width: 300px
---

### Schemas vs ERD vs Instances

* DB schema
    - DB 구조(table 종류), 데이터 타입, 그리고 제약 조건에 대한 명세
    - 테이블 (table or relation), 필드 (field), 관계 (relationship), 뷰 (view), 인덱스 등 데이터베이스 객체들의 논리적 구조를 설명
    - 데이터 베이스 설계 단계에서 명시 되며 자주 변경되지 않음
    - 실제 데이터베이스 시스템에서 구현될 수 있는 형태로 정의된다.
    - 테이블 (table or relation) & 필드 (field)
        - 예시
        ```markdown
        -- example: the Student table
        CREATE TABLE Student (
            student_id INT PRIMARY KEY,
            name VARCHAR(100) NOT NULL
        );
        -- example: the Course table
        CREATE TABLE Course (
            course_id INT PRIMARY KEY,
            course_name VARCHAR(100) NOT NULL
        );
        ```
    - 관계 (relationship)
        - 외래 키(Foreign Key)를 통한 관계 표현: 주로 외래 키를 사용하여 테이블 간의 관계를 표현
        - 즉, 한 테이블의 컬럼이 다른 테이블의 기본 키를 참조하도록 설정
        - 관계 표현 방법
            - ONE-TO-MANY (1:N) 관계: 가장 흔한 관계로, 자식 테이블에 부모 테이블의 기본 키를 외래 키로 추가한다.
            - ONE-TO-ONE (1:1) 관계: 한 테이블에 다른 테이블의 기본 키를 외래 키로 추가하고, 이를 유니크 제약조건으로 설정한다.
            - MANY-TO-MANY (M:N) 관계: 중간 테이블(연결 테이블)을 생성하여 두 테이블의 관계를 표현한다.
        ```markdown
        -- 수강 테이블 (학생과 과목의 M:N 관계를 표현)
        CREATE TABLE Enrollment (
            student_id INT,
            course_id INT,
            enrollment_date DATE,
            PRIMARY KEY (student_id, course_id),
            FOREIGN KEY (student_id) REFERENCES Student(student_id),
            FOREIGN KEY (course_id) REFERENCES Course(course_id)
        );
        ```
    - SQL DDL(Data Definition Language)로 표현될 수 있다.

        ```makrdown
        -- Course 테이블 생성
        CREATE TABLE Course (
            course_id VARCHAR(10) PRIMARY KEY,
            course_name VARCHAR(100) NOT NULL,
            credit_hours INT NOT NULL,
            department VARCHAR(50) NOT NULL
        );

        -- Student 테이블 생성
        CREATE TABLE Student (
            student_number VARCHAR(8) PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            date_of_birth DATE,
            major VARCHAR(50)
        );

        -- Section 테이블 생성
        CREATE TABLE Section (
            section_id VARCHAR(15) PRIMARY KEY,
            course_id VARCHAR(10) NOT NULL,
            semester VARCHAR(10) NOT NULL,
            year INT NOT NULL,
            instructor VARCHAR(100),
            FOREIGN KEY (course_id) REFERENCES Course(course_id)
        );

        -- Grade_Report 테이블 생성
        CREATE TABLE Grade_Report (
            student_number VARCHAR(8),
            section_id VARCHAR(15),
            grade CHAR(2),
            PRIMARY KEY (student_number, section_id),
            FOREIGN KEY (student_number) REFERENCES Student(student_number),
            FOREIGN KEY (section_id) REFERENCES Section(section_id)
        );
        ```
    - DB schema를 만드는 과정을 Data Modeling 또는 DB design이라고 부름 (늬앙스 차이가있음)
        * Data Modeling
            - 현실 세계의 데이터를 추상화하여 컴퓨터 세계의 데이터로 표현하는 과정
            - 특징 (데이터 거버넌스와 상대적으로 더 밀접한 관련이 있음)
                - 주로 **개념적, 논리적 수준**에서 이루어짐
                - 더 추상적이고 개념적인 수준
                - 비즈니스 요구사항을 데이터 구조로 변환
                - ERD(Entity-Relationship Diagram) 등을 사용하여 시각화
            - 결과물: ERD, 개념적/논리적 데이터 모델
            - 단계: 프로젝트 초기 단계
                - 개념적 모델링: 핵심 엔티티와 관계 식별
                - 논리적 모델링: 속성 정의, 정규화 수행
            - 목적 
                - 비즈니스 프로세스와 규칙을 이해하고 표현
                - 데이터의 구조와 관계를 명확히 정의
        * DB Design
            - 데이터 모델을 실제 데이터베이스 구조로 변환하는 과정
            - 특징
                - **논리적, 물리적 수준**에서 이루어짐
                - 더 구체적이고 구현에 가까운 수준
                - 특정 DBMS와 하드웨어 환경을 고려
                - SQL DDL 등을 사용하여 실제 스키마 생성
            - 결과물: 데이터베이스 스키마, 테이블 정의, 인덱스 구조 등
            - 단계: Data Modeling 이후, 실제 구현 전 단계
                - 논리적 설계: 데이터 모델을 DBMS에 독립적인 형태로 변환
                - 물리적 설계: 특정 DBMS에 맞는 물리적 구조 설계 (인덱스, 파티션 등)
            - 목적
                - 효율적인 데이터 저장, 접근, 관리 구조 설계
                - 성능, 보안, 확장성 등을 고려한 최적화
* ERD (Entity-Relationship Diagram)
    - 데이터베이스의 구조를 시각적으로 표현한 다이어그램이다.
    - Entity(개체), 속성 (Attribute), 관계(Relationship)를 그래픽 요소로 나타낸다.
    - Entity(개체) 
        - 현실 세계에서 독립적으로 존재하는 객체나 개념을 나타냄
        - 데이터 모델링 단계에서 사용되는 추상적인 개념
        - 특징
            - 보통 명사로 표현 (예: 학생, 강의, 교수)
            - 속성(Attribute)을 가진다
            - ERD에서 사각형으로 표현된다.
            - 일반적으로 ERD의 엔티티는 데이터베이스 설계 과정에서 테이블로 변환된다.
            - 하나의 엔티티는 대부분 하나의 테이블로 매핑된다.
    - 관계(Relationship)
        
    - 예시

      ![ERD Example - Stack overflow by snowflake](../../../../images/governance/erd_example.PNG)

      [link](https://stackoverflow.com/questions/42445390/database-design-erd-diagram-verification)  
* DB Instance
    - 특정 시점에 DB에 실제로 저장되어 있는 데이터로 자주 변동된다.