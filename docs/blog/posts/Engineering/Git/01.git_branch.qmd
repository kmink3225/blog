---
title: "Git Branch"
subtitle: 브랜치와 관련된 주요 기능 및 사용 사례
description: |
  브랜치는 소프트웨어 개발 프로세스를 효율적으로 관리하기 위한 중요한 도구입이다. 각 브랜치는 프로젝트의 독립적인 작업 공간을 제공하며, 여러 사람이 동시에 작업 및 협업할 수 있도록 지원한다.
categories:
  - Engineering
author: Kwangmin Kim
date: 05/02/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
comments: 
  utterances: 
    repo: ./docs/comments
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">

<li class="nav-item" role="presentation">

<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">

Korean

</button>

</li>

<li class="nav-item" role="presentation">

<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">

English

</button>

</li>

<div class="tab-content" id="language-tabcontent">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

# Git Branch  

* Git 브랜치 관련 명령어는 프로젝트의 독립적인 작업과 효율적인 협업을 가능하게 함. 
* 브랜치를 생성, 확인, 병합, 삭제하는 과정을 통해 코드 관리를 체계적으로 수행할 수 있음.

## 브랜치 생성

* 프로젝트 관련 개발을 동시에 수행할 때 사용함.
* 새로운 기능이나 버그 수정을 시작할 때 사용함.  

```bash
git branch <branch_name>
```  

* 사용 예시  
  * `feature/login-page`라는 브랜치를 생성하려면:

```bash
git branch feature/login-page
```
## 브랜치 이동  

* 작업하려는 브랜치로 전환

```bash
git checkout <branch_name> # git version 2.23 미만
```  
또는, Git 버전 2.23 이상에서는
```bash
git switch <branch_name> # git version 2.23 이상
```  

* 사용 예시

`feature/login-page` 브랜치로 이동하려면

```bash
git switch feature/login-page
```

## 브랜치 병합

* 작업을 완료한 후 다른 브랜치(주로 `main` 또는 `develop`)로 병합함.  

```bash
git merge <branch_name>
```  

* `feature/login-page`를 `main`에 병합하려면
  1. `main` 브랜치로 이동
     ```bash
     git switch main
     ```
  2. 병합:
     ```bash
     git merge feature/login-page
     ```
## 브랜치 삭제  

* 실수로 생성된 잘못된 브랜치를 제거해야 할 때 삭제
* 브랜치를 병합한 후, 더 이상 필요하지 않을 때 삭제
  * 필요 없는 브랜치를 삭제하여 프로젝트의 현재 상태를 명확히 유지함.
* 오래된 작업 브랜치를 정리하고 싶을 때 삭제
  * 오래된 브랜치가 남아 있으면 팀원들이 혼란스러워할 수 있음. 
* 완료된 브랜치를 삭제하여 깔끔하게 관리함.  
  * 불필요한 브랜치를 제거하여 원격 저장소의 작업 공간을 정리함.
* 사용법
  * 로컬 브랜치 삭제: 개발자가 자신의 컴퓨터에 생성한 브랜치를 삭제   
    * 원격 저장소와 독립적으로 존재할 수 있음.

    ```bash
    git branch -d <branch_name>
    ```  
  * 원격 브랜치 삭제: Git 원격 저장소(Remote Repository)에 있는 브랜치를 제거하는 것을 의미
    * 협업 중인 팀원들이 함께 접근할 수 있음.
    
    ```bash
    git push origin --delete <branch_name>
    ```  
* 사용 예시  
  * 로컬에서 `feature/login-page`를 삭제
    ```bash
    git branch -d feature/login-page
    ```  
  * 원격에서 `feature/login-page`를 삭제
    ```bash
    git push origin --delete feature/login-page
    ```

### 원격 브랜치를 삭제한 후

* 다른 팀원들은 더 이상 해당 브랜치를 원격에서 확인할 수 없음.
* 하지만 원격 삭제 전에 브랜치를 가져간 팀원의 로컬에는 여전히 브랜치가 남아 있을 수 있음.
* 로컬에서도 삭제해야 할 경우: 원격에서 삭제된 브랜치를 로컬에서도 삭제하려면

```bash
git branch -d <branch_name>
git branch -D <branch_name> # 강제 삭제
```

* 가져온 원격 브랜치 삭제: 삭제된 원격 브랜치 정보를 로컬에서도 정리하려면:

```bash
git fetch --prune
```

## 브랜치 상태 확인

* 로컬 및 원격 브랜치를 확인하고 상태를 파악함.  
    ```bash
    git branch # 로컬 브랜치 목록
    git branch -a # 원격 브랜치를 포함한 전체 브랜치 목록
    ```
* 사용 예시  
  - 원격 저장소의 최신 상태를 가져온 후 전체 브랜치 확인:
    ```bash
    git fetch --all # 원격 저장소의 최신 상태를 가져옴
    git branch -a # 로컬 및 원격의 모든 브랜치를 확인함
    ```

## 브랜치 추적  

* 원격 저장소에 있는 브랜치를 기반으로 새로운 로컬 브랜치를 생성하고, 이를 로컬 브랜치에서 해당 원격 브랜치를 추적하도록 설정

```bash
git checkout -b <local_branch_name> origin/<remote_branch_name>
```  

* arguement 설명
  * `local_branch_name`: (첫 번째): 로컬에서 생성할 새로운 브랜치 이름.
  * `origin/<remote_branch_name>`: 원격 저장소에 있는 브랜치의 이름 (원격 브랜치를 참조함)
  * `origin`은 기본적으로 설정된 원격 저장소 이름.
  * `<remote_branch_name>`은 원격 저장소에 존재하는 브랜치 이름.
* 사용 예시  
  * 원격의 `feature/login-page`를 추적하는 로컬 브랜치를 생성

```bash
git checkout -b feature/login-page origin/feature/login-page
```

---

## 충돌 해결  

* 병합 중 충돌이 발생하면 파일을 수정하고 아래 명령어를 사용하여 병합을 완료

```bash
git add .
git commit
```

## 예시 : 특정 브랜치 병합

* 현재 작업 중인 브랜치가 `main`이고, 병합하려는 대상 브랜치가 `dev-yjlee5`
  * `main`에 병합: 주로 개발이 완료된 브랜치를 병합.

```bash
git checkout main #자신이 어디 브랜치에 있는 지 모르면 그냥 main으로 이동할 것
git fetch origin dev-yjlee5 # 원격 브랜치 가져오기
git branch # 병합은 현재 브랜치에서 이루어지므로, 이미 main 브랜치에 있다면 이 단계는 건너뛰어도 됨
git checkout main # 병합할 브랜치로 이동 (현재 브랜치가 main인 경우 생략 가능)
git merge dev-yjlee5 # 병합 수행
git push origin main # 결과 푸시
```
* 현재 브랜치(`dev-yjlee5`), 병합 대상 브랜치(`main`)
  * `dev-yjlee5`에 병합: 주로 최신 상태를 유지하기 위해.

```bash
git checkout dev-yjlee5 # 병합할 브랜치로 이동
git fetch origin main # 병합 대상 브랜치를 로컬로 가져옴
git merge main # 병합 수행

# 병합 후 충돌이 나면 파일을 수정한 후 아래 명령어 실행
git add .
git commit

# 병합 결과를 원격 저장소에 푸시
git push origin dev-yjlee5
```


:::


::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::

# Go to Blog Content List

[Blog Content List](../../content_list.qmd)\
[Engineering Content List](../../Engineering/guide_map/index.qmd)