---
title: "GitHub Pull Request"
subtitle: "간단한 Python 계산기 프로젝트로 Pull Request 실습"
description: |
  Python으로 작성된 간단한 계산기 프로젝트를 통해 GitHub Pull Request 생성 및 병합 과정을 단계별로 실습한다.
categories:
  - Engineering
author: Kwangmin Kim
date: 05/02/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
draft: False
---

## 들어가며

GitHub Pull Request(PR)는 협업 개발 과정에서 코드 변경 사항을 제안하고 검토하는 핵심적인 기능이다. 이 글에서는 간단한 Python 계산기 프로젝트를 예제로 사용하여 Pull Request를 직접 만들고 병합하는 전체 과정을 단계별로 알아본다.

## 초기 저장소 코드 준비

먼저, 기본 기능을 가진 초기 코드를 준비한다. 이 코드가 원본 저장소의 `main` 브랜치에 존재한다고 가정한다.

### `main.py`

```python
def add(a, b):
    """두 숫자를 더하는 함수"""
    return a + b

def subtract(a, b):
    """두 숫자를 빼는 함수"""
    return a - b

def main():
    print("간단한 계산기 프로그램")
    print("1. 더하기")
    print("2. 빼기")
    
    choice = input("원하는 연산을 선택하세요 (1/2): ")
    
    num1 = float(input("첫 번째 숫자: "))
    num2 = float(input("두 번째 숫자: "))
    
    if choice == '1':
        print(f"{num1} + {num2} = {add(num1, num2)}")
    elif choice == '2':
        print(f"{num1} - {num2} = {subtract(num1, num2)}")
    else:
        print("잘못된 선택입니다.")

if __name__ == "__main__":
    main()
```

### `README.md`

```markdown
# 간단한 계산기 프로젝트

이 프로젝트는 GitHub Pull Request 연습을 위한 간단한 계산기 프로그램이다.

## 기능
- 두 숫자 더하기
- 두 숫자 빼기

## 사용 방법
1. `main.py` 파일을 실행한다.
2. 원하는 연산을 선택한다.
3. 두 개의 숫자를 입력한다.
4. 결과를 확인한다.
```

## Pull Request로 추가할 새 기능 코드

이제 새로운 기능을 추가할 차례이다. 새 브랜치를 생성하고, 기존 코드에 곱하기와 나누기 기능을 추가한다.

### `main.py` (수정)

```python
def add(a, b):
    """두 숫자를 더하는 함수"""
    return a + b

def subtract(a, b):
    """두 숫자를 빼는 함수"""
    return a - b

def multiply(a, b):
    """두 숫자를 곱하는 함수"""
    return a * b

def divide(a, b):
    """두 숫자를 나누는 함수"""
    if b == 0:
        return "0으로 나눌 수 없습니다."
    return a / b

def main():
    print("간단한 계산기 프로그램")
    print("1. 더하기")
    print("2. 빼기")
    print("3. 곱하기")
    print("4. 나누기")
    
    choice = input("원하는 연산을 선택하세요 (1/2/3/4): ")
    
    num1 = float(input("첫 번째 숫자: "))
    num2 = float(input("두 번째 숫자: "))
    
    if choice == '1':
        print(f"{num1} + {num2} = {add(num1, num2)}")
    elif choice == '2':
        print(f"{num1} - {num2} = {subtract(num1, num2)}")
    elif choice == '3':
        print(f"{num1} * {num2} = {multiply(num1, num2)}")
    elif choice == '4':
        print(f"{num1} / {num2} = {divide(num1, num2)}")
    else:
        print("잘못된 선택입니다.")

if __name__ == "__main__":
    main()
```

### `README.md` (수정)

```markdown
# 간단한 계산기 프로젝트

이 프로젝트는 GitHub Pull Request 연습을 위한 간단한 계산기 프로그램이다.

## 기능
- 두 숫자 더하기
- 두 숫자 빼기
- 두 숫자 곱하기
- 두 숫자 나누기

## 사용 방법
1. `main.py` 파일을 실행한다.
2. 원하는 연산을 선택한다.
3. 두 개의 숫자를 입력한다.
4. 결과를 확인한다.
```

## GitHub에서 Pull Request 생성 과정

다음은 GitHub에서 Pull Request를 생성하고 병합하는 단계이다.

1.  **저장소 생성 및 클론**:
    *   GitHub에 로그인하여 새 저장소(예: `calculator-project`)를 생성한다.
    *   생성한 저장소를 로컬 환경으로 클론한다:
        ```bash
        git clone https://github.com/your-username/calculator-project.git
        cd calculator-project
        ```

2.  **초기 코드 커밋 및 푸시**:
    *   준비된 초기 `main.py`와 `README.md` 파일을 저장소에 추가하고 커밋한 후, `main` 브랜치에 푸시한다:
        ```bash
        # 파일 생성 및 내용 작성 후
        git add main.py README.md
        git commit -m "초기 계산기 프로젝트: 더하기, 빼기 기능"
        git push origin main
        ```

3.  **새 브랜치 생성 및 기능 추가 코드 커밋/푸시**:
    *   새로운 기능(곱하기, 나누기)을 추가하기 위한 브랜치(예: `feature-multiply-divide`)를 생성하고 체크아웃한다:
        ```bash
        git checkout -b feature-multiply-divide
        ```
    *   수정된 `main.py`와 `README.md` 파일을 커밋하고, 새 브랜치를 원격 저장소에 푸시한다:
        ```bash
        # 파일 수정 후
        git add main.py README.md
        git commit -m "곱하기와 나누기 기능 추가"
        git push origin feature-multiply-divide
        ```

4.  **GitHub에서 Pull Request 생성**:
    *   GitHub 웹사이트에서 해당 저장소로 이동한다.
    *   `feature-multiply-divide` 브랜치가 푸시되면, 저장소 페이지 상단에 `Compare & pull request` 버튼이 나타난다. 이 버튼을 클릭한다.
    *   PR 제목과 설명을 작성한다. 예를 들어:
        *   제목: "곱하기와 나누기 기능 추가"
        *   설명: "이 PR은 계산기에 곱하기와 나누기 기능을 추가한다."
    *   `Create pull request` 버튼을 클릭하여 PR을 생성한다.

5.  **Pull Request 검토 및 병합**:
    *   생성된 PR 페이지에서 변경된 코드 내용을 검토한다.
    *   필요하다면 코멘트를 남겨 피드백을 주고받는다.
    *   코드 검토가 완료되고 모든 사항이 만족스러우면, `Merge pull request` 버튼을 클릭하여 변경 사항을 `main` 브랜치에 병합한다.
    *   병합 후, `feature-multiply-divide` 브랜치는 더 이상 필요 없으므로 삭제할 수 있다.

## 결론

이 예제를 통해 GitHub Pull Request의 기본적인 생성 및 병합 과정을 살펴보았다. 실제 프로젝트에서는 더 복잡한 코드 변경과 다양한 검토 과정이 포함될 수 있지만, 기본적인 흐름은 이와 유사하다. Pull Request를 적극적으로 활용하면 코드 품질을 높이고 협업 효율성을 증대시킬 수 있다.
