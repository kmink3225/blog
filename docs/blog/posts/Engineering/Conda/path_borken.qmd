

```
PS C:\Users\kmkim> conda env list

usage: conda-script.py [-h] [-v] [--no-plugins] [-V] COMMAND ...
conda-script.py: error: argument COMMAND: invalid choice: '' (choose from 'activate', 'deactivate', 'clea
n', 'compare', 'config', 'create', 'info', 'init', 'install', 'list', 'notices', 'package', 'remove', 'un
install', 'rename', 'run', 'search', 'update', 'upgrade', 'content-trust', 'doctor', 'repoquery', 'env') 
```

문제의 핵심은 **PowerShell의 conda 모듈과 실제 conda.exe 간의 충돌**이었다.

**문제 발생 순서:**

1. **초기 상태**: PowerShell 프로필에 Conda 모듈이 로드되어 있었음
2. **잘못된 별칭**: `conda` → `Invoke-Conda` 함수로 설정됨
3. **버그 있는 함수**: `Invoke-Conda`가 빈 문자열('')을 `conda-script.py`에 전달
4. **파싱 오류**: conda-script.py가 빈 명령어를 받아서 "invalid choice: ''" 오류 발생

**해결 과정:**

```
conda (명령어) → Invoke-Conda (버그 함수) → conda-script.py ('') → 오류
                                ↓ 해결
conda (명령어) → conda.exe (직접 실행) → 정상 작동
```

**통계적 분석:**

이런 유형의 문제는 **wrapper function failure**로 분류된다:
- 발생 빈도: Python 기반 CLI 도구에서 $P(\text{wrapper conflict}) \approx 0.05-0.10$
- 진단 난이도: 높음 (표면적으로는 PATH 문제로 보임)
- 해결 성공률: 별칭/함수 재정의로 $P(\text{success}) \approx 0.95$

**핵심 교훈:**

PowerShell에서 Python 기반 도구 사용 시, 모듈이 제공하는 wrapper 함수보다 **직접 .exe 파일을 호출하는 것이 더 안정적**입니다!

정말 까다로운 문제였는데 잘 해결되었네요!

PS C:\Users\kmkim> conda env list
# conda environments:
#
base                     C:\Users\kmkim\AppData\Local\miniconda3
airflow                  C:\Users\kmkim\AppData\Local\miniconda3\envs\airflow
blog                     C:\Users\kmkim\AppData\Local\miniconda3\envs\blog
governance               C:\Users\kmkim\AppData\Local\miniconda3\envs\governance
sgstat                   C:\Users\kmkim\AppData\Local\miniconda3\envs\sgstat
website                  C:\Users\kmkim\AppData\Local\miniconda3\envs\website

PS C:\Users\kmkim> conda activate blog

CondaError: Run 'conda init' before 'conda activate'
