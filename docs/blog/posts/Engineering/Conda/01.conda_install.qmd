---
title: "Conda Introduction"
subtitle: Conda Introduction, Conda Installation
description: |
  template
categories:
  - Engineering
author: Kwangmin Kim
date: 05/01/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

# Conda

(To be written)

* 파이썬 가상환경
    - 라이브러리 버전 충돌 방지를 위해 설치/사용되는 파이썬 인터프리터 환경을 격리시키는 기술
    - 파이썬은 라이브러리 설치 시점에 따라서도 설치되는 버전이 상이한 경우가 많음

    ![가상 환경의 필요성](../../../../../images/airflow/virtual-environment.PNG)

    - python을 global 환경에 설치할 경우 위의 그림처럼 C,D프로젝트가 동시에 진행될 때 둘 중하나의 library version이 차이가 나면 old version의 library 로 진행되는 프로젝트는 에러가 발생함 
        - 2개의 다른 프로젝트가 같은 python interpreter를 바라보고 library를 설치하기 때문에 종속성 문제가 생김 (library 충돌 발생)
        - 그래서 다른 가상환경 venv안에 다른 프로젝트를 할당해서 독립적으로 프로젝트를 진행하는게 일반적임
    - miniconda install [link](https://docs.conda.io/projects/miniconda/en/latest/)
      - Linux:  `wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh`
      - Mac OS M1:  `wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh`
      - Mac OS Intel: `wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh`
    - 설치 스크립트 실행
      - `./Miniconda3-latest-Linux-x86_64.sh`
      - 만약, *permission denied* error message 뜨면 실행권한 줄것
      - `chmod +x Miniconda3-latest-Linux-x86_64.sh`
    - Licence 동의, Miniconda 설치 경로 지정, 초기화: 그냥 다 yes 하면 됨
    - .bashrc 최신화
      - `source ~/.bashrc`
    - prompt 재시작하면됨
    - python 가상환경 만들기: 보통 가상환경 이름 = 프로젝트 이름
      - `conda create -n {project_name} python={python version}`
      - python에 있는 가상환경 생성 기능으로 만들 경우 `python -m airflow ./venv` 실행
        * `./venv` directory에 python 설치하고 version 관리하겠다는 의미
    - VScode가 python 가상환경 참조하도록 설정
        *  help>show all commands or `ctrl+shift+p` 누른후 `interpreter` 입력하여 가상환경에 있는 python 클릭
    - terminal 에서 가상환경 잘 잡혔는지 확인
    - 생성된 가상 환경 리스트 보기
      - `conda env list`
    - 가상 환경 활성화  
      - `conda activate {project_name or 가상환경_name}`  
    - 가상 환경 비활성화  
      - `conda deactivate`  
      - 가상 환경을 바꿀 시 비활성화 해주고 다른 가상환경 활성화  
    - 가상 환경 삭제  
      - `conda remove --name {가상 환경_ 이름} -all`

:::
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::


</div>

# Go to Blog Content List

[Blog Content List](../../content_list.qmd)  
[Engineering Content List](../../Engineering/guide_map/index.qmd)