---
title: Pathlib Library
subtitle: File System Path Management
description: | 
  `pathlib`은 Python의 표준 라이브러리 중 하나로, 파일 시스템 경로를 객체 지향적인 방식으로 쉽게 다룰 수 있게 해주는 모듈이다. 이전에는 파일 시스템 경로를 문자열로 처리했지만, `pathlib`을 사용하면 경로를 `Path` 객체로 표현하여 경로에 대한 다양한 작업을 보다 직관적이고 효율적으로 수행할 수 있다.
categories:
  - Engineering
author: Kwangmin Kim
date: 07/01/2023
draft: false
format: 
  html:
    toc: true
    number-sections: True
    code-fold: true
    page-layout: full
execute: 
  warning: false
  message: false
---

## pathlib

`pathlib`은 산재된 데이터를 체계적으로 관리하고, 데이터 분석이나 엔지니어링 작업을 수행할 때 매우 유용한 도구이다. 파일 시스템에서의 데이터 접근, 조작, 관리를 간결하고 효율적으로 할 수 있게 해주기 때문이다.

### `pathlib` 기능

* 경로 조작: 경로를 쉽게 조합하고, 분해하며, 변경할 수 있다.
* 파일 시스템 정보 조회: 파일의 존재 유무 확인, 파일 크기 조회, 수정 날짜 조회 등의 정보를 쉽게 얻을 수 있다.
* 파일 시스템 작업: 파일 또는 디렉토리 생성, 읽기, 쓰기, 이름 변경, 삭제 등의 작업을 할 수 다.
* 경로 탐색: 특정 패턴이나 조건에 맞는 파일을 경로 내에서 찾을 수 있다.

### 응용 상황

1. 데이터 파일 구조화 및 접근
    * 동적 경로 생성: 다양한 데이터 소스나 폴더 구조에 대한 동적 경로를 쉽게 생성할 수 있다. 예를 들어, 날짜별로 구분된 로그 파일을 처리할 때 `Path` 객체를 사용하여 해당 날짜의 경로를 쉽게 생성할 수 있다.
    * 파일 탐색: 특정 패턴이나 조건에 맞는 파일들을 `glob` 또는 `rglob` 메소드를 사용하여 쉽게 찾을 수 있다. 이는 분석 대상 파일을 자동으로 식별하는 데 유용하다.
2. 데이터 파일 읽기 및 쓰기 작업
    * 파일 읽기/쓰기: `pathlib`을 사용하면 파일을 열고 읽거나 쓰는 작업을 직관적으로 수행할 수 있다. `Path` 객체의 `read_text`, `write_text`, `read_bytes`, `write_bytes` 메소드를 활용하여 파일 내용을 쉽게 처리할 수 있다.
3. 파일 및 디렉토리 관리
    * 파일 생성 및 삭제: `touch` 메소드로 새 파일을 생성하거나, `unlink` 메소드로 파일을 삭제할 수 있다. 
    * 디렉토리 생성 및 삭제: 생성에는 `mkdir` 메소드를, 삭제에는 `rmdir` 메소드를 사용할 수 있다.
    * 경로 유효성 검사: 파일이나 디렉토리의 존재 여부를 확인하고, 경로가 파일인지 디렉토리인지 등의 속성을 검사할 수 있다.
4. 플랫폼 독립적 경로 처리
    * 운영 체제 호환성: `pathlib`은 윈도우, 맥, 리눅스 등 다양한 운영 체제에서 동일하게 작동하므로, 코드의 이식성이 향상된다.

### Example

```{python}
from pathlib import Path

# 현재 디렉토리에 데이터 파일 폴더 생성
data_dir = Path.cwd() / "data_files"
data_dir.mkdir(exist_ok=True)

# 특정 패턴을 가진 데이터 파일 탐색
for file_path in data_dir.glob("*.csv"):
    print(f"CSV 파일 처리: {file_path}")

# 파일 읽기 및 처리
for file_path in data_dir.iterdir():
    if file_path.is_file() and file_path.suffix == ".txt":
        content = file_path.read_text()
        # 파일 내용 처리
        print(f"{file_path.name} 파일의 내용 처리")

```