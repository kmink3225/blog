---
title: Package Management - 1
subtitle: requirements.text 사용
description: | 
  Engineering for Data Science
categories:
  - Engineering
author: Kwangmin Kim
date: 01/01/2023
draft: false
format: 
  html:
    toc: true
    number-sections: True
    code-fold: true
    page-layout: full
execute: 
  warning: false
  message: false
---

## Basic Engineering

### 코드 품질 & 설계 원칙

- SOLID 원칙 (단일책임, 개방폐쇄, 리스코프치환, 인터페이스분리, 의존성역전)
- DRY, KISS, YAGNI 원칙
- 코드 리팩토링 기법
- 클린 코드 작성법 (변수명, 함수 설계, 주석)

### 객체지향 프로그래밍

- 캡슐화, 상속, 다형성, 추상화
- 컴포지션 vs 상속
- 인터페이스와 추상 클래스
- 디자인 패턴 기초 (Factory, Observer, Strategy)

## 데이터 중심 아키텍처

### 데이터 아키텍처 패턴

- ETL/ELT 파이프라인 설계
- Repository 패턴 (데이터 접근 계층)
- Data Access Object (DAO) 패턴
- 배치 vs 스트림 처리 아키텍처

### API 설계 & 개발

- RESTful API 설계 원칙
- FastAPI/Flask로 데이터 API 구축
- 데이터 검증 및 직렬화
- API 문서화 (OpenAPI/Swagger)

### 데이터베이스 엔지니어링

- 데이터 모델링 (정규화, 비정규화)
- 트랜잭션 관리
- 인덱싱 전략
- ORM vs Raw SQL 사용 시점

## 소프트웨어 품질 관리

### 테스팅

- 단위 테스트 (pytest, unittest)
- 통합 테스트
- 데이터 품질 테스트
- 모의 객체(Mock) 활용

### 버전 관리 & 협업

- Git 고급 사용법 (브랜치 전략, 머지 전략)
- 코드 리뷰 프로세스
- 이슈 관리 및 프로젝트 관리

### 코드 품질 도구

- Linting (flake8, pylint)
- 타입 힌팅 (mypy)
- 코드 포맷팅 (black, isort)
- 커버리지 측정

## 배포 & 운영

### 컨테이너화 & 오케스트레이션

- Docker 기초 및 활용
- Docker Compose
- Kubernetes 기본 개념

### CI/CD 파이프라인

- GitHub Actions/GitLab CI
- 자동화된 테스트 및 배포
- 환경별 설정 관리

### 모니터링 & 로깅

- 구조화된 로깅
- 메트릭 수집 및 모니터링
- 에러 추적 및 알림

## 고급 아키텍처

### 마이크로서비스 아키텍처

- 서비스 분해 전략
- API Gateway 패턴
- 서비스 간 통신 (동기/비동기)
- 데이터 일관성 관리

### 스케일링 & 성능

- 수평적/수직적 확장
- 캐싱 전략 (Redis, Memcached)
- 로드 밸런싱
- 성능 프로파일링

### 보안

- 인증/인가 (JWT, OAuth)
- 데이터 암호화
- SQL 인젝션 방지
- 보안 모범 사례

## 데이터 특화 엔지니어링

### 데이터 파이프라인 엔지니어링

- Apache Airflow 활용
- 데이터 품질 모니터링
- 스키마 진화 관리
- 데이터 리니지 추적

### MLOps 통합

- 모델 버전 관리
- 모델 배포 전략
- A/B 테스트 프레임워크
- 피처 스토어 구축

## 응용

1. **ETL 파이프라인 구축** (PostgreSQL + Airflow)
2. **데이터 API 서버** (FastAPI + Docker)
3. **실시간 데이터 처리** (Kafka + Python)
4. **모니터링 대시보드** (Grafana + InfluxDB)
