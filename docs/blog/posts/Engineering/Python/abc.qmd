---
title: Python Abstract Base Classes (ABC)
subtitle: Defining Interfaces and Abstract Classes
description: | 
  파이썬 추상 베이스 클래스(Abstract Base Classes, ABC)는 클래스의 인터페이스를 정의하고 강제하는 메커니즘이다. abc 모듈을 사용하여 추상 메서드와 추상 프로퍼티를 정의할 수 있으며, 이를 통해 객체지향 프로그래밍의 다형성과 인터페이스 계약을 보장할 수 있다. ABC를 사용하면 코드의 구조를 명확히 하고 런타임에 인터페이스 준수 여부를 검증할 수 있다.
categories:
  - Engineering
  - Python
author: Kwangmin Kim
date: 07/02/2023
draft: false
format: 
  html:
    toc: true
    number-sections: True
    code-fold: true
    page-layout: full
execute: 
  warning: false
  message: false
  eval: false
  echo: true
---

## Python Abstract Base Classes (ABC)

* 파이썬 추상 베이스 클래스(Abstract Base Classes, ABC)는 클래스의 인터페이스를 정의하고 강제하는 메커니즘이다. 
* ABC를 사용하면 객체지향 프로그래밍에서 중요한 개념인 다형성과 인터페이스 계약을 파이썬에서도 명확하게 구현할 수 있다.

### ABC의 정의

* 추상 베이스 클래스는 직접 인스턴스화할 수 없는 클래스로, 하나 이상의 추상 메서드를 포함한다. 
* 추상 메서드는 메서드의 시그니처만 정의하고 구현은 하지 않으며, 이를 상속받는 하위 클래스에서 반드시 구현해야 한다.

### abc 모듈 소개

* 파이썬에서는 `abc` 모듈을 통해 추상 베이스 클래스를 정의할 수 있다:

```python
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        """도형의 면적을 계산한다"""
        pass
    
    @abstractmethod
    def perimeter(self):
        """도형의 둘레를 계산한다"""
        pass

# 추상 클래스는 직접 인스턴스화할 수 없다
# shape = Shape()  # TypeError: Can't instantiate abstract class Shape
```

### 기본 ABC 구현 예제

```python
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        """도형의 면적을 계산한다"""
        pass
    
    @abstractmethod
    def perimeter(self):
        """도형의 둘레를 계산한다"""
        pass
    
    # 구체적인 메서드도 포함할 수 있다
    def describe(self):
        return f"이 도형의 면적은 {self.area()}이고 둘레는 {self.perimeter()}입니다."

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
    
    def perimeter(self):
        return 2 * (self.width + self.height)

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14159 * self.radius ** 2
    
    def perimeter(self):
        return 2 * 3.14159 * self.radius

# 사용 예제
rect = Rectangle(5, 3)
circle = Circle(4)

print(rect.describe())  # 이 도형의 면적은 15이고 둘레는 16입니다.
print(circle.describe())  # 이 도형의 면적은 50.26544이고 둘레는 25.13272입니다.
```

### abstractmethod 데코레이터

* 추상 메서드는 `@abstractmethod` 데코레이터를 사용하여 정의한다.
* 하위 클래스에서 반드시 구현해야 하는 메서드를 지정

```python
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass

# 올바른 구현
class Dog(Animal):
    def make_sound(self):
        return "멍멍"

# 잘못된 구현 (구현 누락)
class Cat(Animal):
    pass  # make_sound 구현하지 않음

dog = Dog()  # 정상 동작
# cat = Cat()  # TypeError 발생!
```


### 추상 프로퍼티 (Abstract Properties)

* 프로퍼티(property)는 메서드를 마치 속성(attribute)처럼 접근할 수 있게 만드는 기능
* 추상 프로퍼티를 정의하여 하위 클래스에서 특정 속성을 구현하도록 강제할 수 있다

```python
# @property 없이
class WithoutProperty:
    def __init__(self):
        self._speed = 100
    
    def get_max_speed(self):
        return self._speed

car1 = WithoutProperty()
print(car1.get_max_speed())  # 메서드 호출 - 괄호 필요

# @property 사용
class WithProperty:
    def __init__(self):
        self._speed = 100
    
    @property
    def max_speed(self):
        return self._speed

car2 = WithProperty()
print(car2.max_speed)  # 속성처럼 접근 - 괄호 불필요
```

### property + abstractmethod 데코레이터

* 속성처럼 접근 가능하면서도 반드시 구현해야 하는 요소

```python
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @property
    @abstractmethod
    def max_speed(self):
        pass
    
    @property
    @abstractmethod
    def fuel_type(self):
        pass
    
    @abstractmethod
    def start_engine(self):
        pass

class Car(Vehicle):
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
        self._max_speed = 200
        self._fuel_type = "gasoline"
    
    @property
    def max_speed(self):
        return self._max_speed
    
    @property
    def fuel_type(self):
        return self._fuel_type
    
    def start_engine(self):
        return f"{self.brand} {self.model}의 엔진이 시작되었습니다."

class ElectricCar(Vehicle):
    def __init__(self, brand, model, battery_capacity):
        self.brand = brand
        self.model = model
        self.battery_capacity = battery_capacity
        self._max_speed = 180
        self._fuel_type = "electric"
    
    @property
    def max_speed(self):
        return self._max_speed
    
    @property
    def fuel_type(self):
        return self._fuel_type
    
    def start_engine(self):
        return f"{self.brand} {self.model}의 전기 모터가 시작되었습니다."

# 사용 예제
car = Car("현대", "소나타")
electric_car = ElectricCar("테슬라", "모델 3", 75)

print(f"연료 타입: {car.fuel_type}, 최고 속도: {car.max_speed}km/h")
# 연료 타입: gasoline, 최고 속도: 200km/h
print(car.start_engine())
# 현대 소나타의 엔진이 시작되었습니다.

print(f"연료 타입: {electric_car.fuel_type}, 최고 속도: {electric_car.max_speed}km/h")
# 연료 타입: electric, 최고 속도: 180km/h
print(electric_car.start_engine())
# 테슬라 모델 3의 전기 모터가 시작되었습니다.
```

### 추상 클래스 메서드와 정적 메서드

```python
from abc import ABC, abstractmethod

class DatabaseConnection(ABC):
    @abstractmethod
    def connect(self):
        pass
    
    @abstractmethod
    def disconnect(self):
        pass
    
    @abstractclassmethod
    def get_driver_name(cls):
        pass
    
    @abstractstaticmethod
    def validate_connection_string(connection_string):
        pass

class MySQLConnection(DatabaseConnection):
    def __init__(self, host, database):
        self.host = host
        self.database = database
    
    def connect(self):
        return f"MySQL 데이터베이스 {self.database}에 연결되었습니다."
    
    def disconnect(self):
        return f"MySQL 데이터베이스 {self.database}와의 연결이 종료되었습니다."
    
    @classmethod
    def get_driver_name(cls):
        return "MySQL Driver"
    
    @staticmethod
    def validate_connection_string(connection_string):
        return "mysql://" in connection_string

mysql_conn = MySQLConnection("localhost", "my_database")
print(mysql_conn.connect())
# MySQL 데이터베이스 my_database에 연결되었습니다.
print(mysql_conn.disconnect())
# MySQL 데이터베이스 my_database와의 연결이 종료되었습니다.
print(mysql_conn.get_driver_name())
# MySQL Driver
print(mysql_conn.validate_connection_string("mysql://localhost/my_database"))
# True  
```

### 실용적인 ABC 예제

#### 데이터 처리 파이프라인

```python
from abc import ABC, abstractmethod
from typing import Any, List

class DataProcessor(ABC):
    @abstractmethod
    def load_data(self, source: str) -> Any:
        """데이터를 로드한다"""
        pass
    
    @abstractmethod
    def process_data(self, data: Any) -> Any:
        """데이터를 처리한다"""
        pass
    
    @abstractmethod
    def save_data(self, data: Any, destination: str) -> bool:
        """처리된 데이터를 저장한다"""
        pass
    
    # 템플릿 메서드 패턴
    def run_pipeline(self, source: str, destination: str):
        print("데이터 파이프라인 시작")
        data = self.load_data(source)
        processed_data = self.process_data(data)
        success = self.save_data(processed_data, destination)
        print(f"데이터 파이프라인 완료: {'성공' if success else '실패'}")
        return success

class CSVProcessor(DataProcessor):
    def load_data(self, source: str) -> List[dict]:
        print(f"CSV 파일 {source}를 로드합니다")
        # 실제로는 pandas나 csv 모듈을 사용
        return [{"name": "홍길동", "age": 30}, {"name": "김철수", "age": 25}]
    
    def process_data(self, data: List[dict]) -> List[dict]:
        print("CSV 데이터를 처리합니다")
        # 나이에 1을 더하는 처리
        for record in data:
            record["age"] += 1
        return data
    
    def save_data(self, data: List[dict], destination: str) -> bool:
        print(f"처리된 데이터를 {destination}에 저장합니다")
        print(f"저장된 데이터: {data}")
        return True

class JSONProcessor(DataProcessor):
    def load_data(self, source: str) -> dict:
        print(f"JSON 파일 {source}를 로드합니다")
        return {"users": [{"name": "이영희", "score": 85}]}
    
    def process_data(self, data: dict) -> dict:
        print("JSON 데이터를 처리합니다")
        # 점수에 10을 더하는 처리
        for user in data["users"]:
            user["score"] += 10
        return data
    
    def save_data(self, data: dict, destination: str) -> bool:
        print(f"처리된 데이터를 {destination}에 저장합니다")
        print(f"저장된 데이터: {data}")
        return True

# 사용 예제
csv_processor = CSVProcessor()
json_processor = JSONProcessor()

csv_processor.run_pipeline("input.csv", "output.csv")
print("=" * 50)
json_processor.run_pipeline("input.json", "output.json")
# 데이터 파이프라인 시작
# CSV 파일 input.csv를 로드합니다
# CSV 데이터를 처리합니다
# 처리된 데이터를 output.csv에 저장합니다
# 데이터 파이프라인 완료: 성공
# ==================================================
# JSON 파일 input.json를 로드합니다
# JSON 데이터를 처리합니다
# 처리된 데이터를 output.json에 저장합니다
# 데이터 파이프라인 완료: 성공
```

#### 알림 시스템

```python
from abc import ABC, abstractmethod
from typing import Dict, Any

class NotificationSender(ABC):
    @abstractmethod
    def send_notification(self, recipient: str, message: str, **kwargs) -> bool:
        """알림을 발송한다"""
        pass
    
    @abstractmethod
    def validate_recipient(self, recipient: str) -> bool:
        """수신자 정보가 유효한지 검증한다"""
        pass
    
    def send_with_validation(self, recipient: str, message: str, **kwargs) -> bool:
        if not self.validate_recipient(recipient):
            print(f"유효하지 않은 수신자: {recipient}")
            return False
        
        return self.send_notification(recipient, message, **kwargs)

class EmailSender(NotificationSender):
    def send_notification(self, recipient: str, message: str, **kwargs) -> bool:
        subject = kwargs.get("subject", "알림")
        print(f"이메일 발송: {recipient}")
        print(f"제목: {subject}")
        print(f"내용: {message}")
        return True
    
    def validate_recipient(self, recipient: str) -> bool:
        return "@" in recipient and "." in recipient

class SMSSender(NotificationSender):
    def send_notification(self, recipient: str, message: str, **kwargs) -> bool:
        print(f"SMS 발송: {recipient}")
        print(f"내용: {message}")
        return True
    
    def validate_recipient(self, recipient: str) -> bool:
        return recipient.isdigit() and len(recipient) >= 10

class PushNotificationSender(NotificationSender):
    def send_notification(self, recipient: str, message: str, **kwargs) -> bool:
        title = kwargs.get("title", "푸시 알림")
        print(f"푸시 알림 발송: {recipient}")
        print(f"제목: {title}")
        print(f"내용: {message}")
        return True
    
    def validate_recipient(self, recipient: str) -> bool:
        return len(recipient) > 10  # 디바이스 토큰 길이 검증

# 알림 매니저 클래스
class NotificationManager:
    def __init__(self):
        self.senders: Dict[str, NotificationSender] = {}
    
    def register_sender(self, name: str, sender: NotificationSender):
        self.senders[name] = sender
    
    def send_notification(self, sender_type: str, recipient: str, message: str, **kwargs):
        if sender_type not in self.senders:
            print(f"알 수 없는 발송자 타입: {sender_type}")
            return False
        
        sender = self.senders[sender_type]
        return sender.send_with_validation(recipient, message, **kwargs)

# 사용 예제
manager = NotificationManager()
manager.register_sender("email", EmailSender())
manager.register_sender("sms", SMSSender())
manager.register_sender("push", PushNotificationSender())

# 다양한 방식으로 알림 발송
manager.send_notification("email", "user@example.com", "환영합니다!", subject="회원가입 완료")
manager.send_notification("sms", "01012345678", "인증 코드: 123456")
manager.send_notification("push", "device_token_12345", "새로운 메시지가 있습니다", title="메시지 알림")
# 이메일 발송: user@example.com
# 제목: 회원가입 완료
# 내용: 환영합니다!
# SMS 발송: 01012345678
# 내용: 인증 코드: 123456
# 푸시 알림 발송: device_token_12345
# 제목: 메시지 알림
# 내용: 새로운 메시지가 있습니다
```

### isinstance()와 ABC

ABC는 `isinstance()` 및 `issubclass()` 함수와 함께 사용하여 타입 검증에 활용할 수 있다:

```python
from abc import ABC, abstractmethod

class Drawable(ABC):
    @abstractmethod
    def draw(self):
        pass

class Circle(Drawable):
    def draw(self):
        return "원을 그립니다"

class Square(Drawable):
    def draw(self):
        return "사각형을 그립니다"

def render_shape(shape):
    if isinstance(shape, Drawable):
        return shape.draw()
    else:
        raise TypeError("Drawable 객체가 아닙니다")

# 사용 예제
circle = Circle()
square = Square()

print(render_shape(circle))  # 원을 그립니다
print(render_shape(square))  # 사각형을 그립니다

# 타입 검증
print(isinstance(circle, Drawable))  # True
print(issubclass(Circle, Drawable))  # True
```

### ABC의 장점

1. **인터페이스 강제**: 하위 클래스에서 반드시 구현해야 할 메서드를 명확히 정의
2. **코드 문서화**: 클래스의 의도와 계약을 명확히 표현
3. **런타임 검증**: 인터페이스 준수 여부를 런타임에 검증
4. **다형성 지원**: 동일한 인터페이스를 구현하는 다양한 클래스들의 일관된 사용
5. **설계 개선**: 객체지향 설계 원칙을 강제하여 더 나은 코드 구조 유도

### ABC 사용 시 고려사항

1. **복잡성**: 간단한 프로젝트에서는 과도한 추상화가 될 수 있음
2. **성능**: 추상화 레이어 추가로 인한 약간의 성능 오버헤드
3. **학습 곡선**: 초보자에게는 개념 이해가 어려울 수 있음

## 결론

파이썬 추상 베이스 클래스(ABC)는 객체지향 프로그래밍의 인터페이스와 다형성을 구현하는 강력한 도구다. 클래스의 계약을 명확히 정의하고 강제함으로써 코드의 구조를 개선하고 유지보수성을 높일 수 있다. 특히 큰 프로젝트나 팀 개발에서 일관된 인터페이스를 유지하고 싶을 때 매우 유용하다. ABC를 적절히 활용하면 더 견고하고 확장 가능한 파이썬 애플리케이션을 개발할 수 있다.

